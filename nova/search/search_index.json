{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"addon/","title":"Getting Started","text":"<p>This guide is not beginner-friendly! Making Nova addons requires a lot of knowledge about Kotlin, the Spigot API, Maven and Gradle.</p>"},{"location":"addon/#prerequisites","title":"Prerequisites","text":""},{"location":"addon/#intellij","title":"IntelliJ","text":"<p>Even though Eclipse does have Kotlin support via a plugin, it's not the best option. We recommend using IntelliJ to make addons.</p>"},{"location":"addon/#github","title":"GitHub","text":"<p>This guide uses a GitHub repo template so having a GitHub account is recommended. You can also install GitHub Desktop if you don't want to use git commands.</p>"},{"location":"addon/#codestyle","title":"Codestyle","text":"<p>You can find the xenondevs codestyle here. To apply it, open  your Intellij settings and import the codestyle.xml file here:</p> <p></p>"},{"location":"addon/#setting-up-your-project","title":"Setting up your project","text":"<p>You can now create a new repo using our addon template here. After creating the new repo and cloning it, make sure to edit the following files:</p>"},{"location":"addon/#srcmainkotlin","title":"src/main/kotlin","text":"<p>Change the package name to your own.</p>"},{"location":"addon/#settingsgradlekts","title":"settings.gradle.kts","text":"<p>Change <code>rootProject.name</code> to your addon id.</p>"},{"location":"addon/#buildgradlekts","title":"build.gradle.kts","text":"<p>Change <code>group</code> to your group. Change <code>version</code> to your version.</p> <p>In the <code>addon</code> task, set <code>main</code> to your addon main class.</p>"},{"location":"addon/#adding-dependencies","title":"Adding dependencies","text":"<p>If your addon requires dependencies that need to be present at runtime, add them under the <code>nova</code> configuration:</p> build.gradle.kts dependencies { }<pre><code>nova(\"commons-net:commons-net:3.8.0\")\n</code></pre>"},{"location":"addon/#building","title":"Building","text":"<p>To build, run Build with Gradle<pre><code>gradlew addonJar -PoutDir=\"&lt;Path to your addons directory here&gt;\"\n</code></pre> Or if you're on a mojang-mapped server, run Build with Gradle<pre><code>gradlew addonJar -PoutDir=\"&lt;Path to your addons directory here&gt;\" -Pmojang-mapped\n</code></pre></p>"},{"location":"addon/#enabling-dev-mode","title":"Enabling dev mode","text":"<p>To enable dev mode, add the <code>NovaDev</code> argument using <code>-DNovaDev</code>. This allows you to bypass some restrictions, like the reload prevention, joining the server during startup, or using addons that require a different version of Nova.</p>"},{"location":"addon/#kdoc","title":"KDoc","text":"<p>The generated KDoc for Nova can be found on here.</p>"},{"location":"addon/abilities/","title":"Abilities","text":""},{"location":"addon/abilities/#what-are-abilities","title":"What are Abilities?","text":"<p>In Nova, abilities are ticking objects that can be assigned to players. They work similar to attachments, except that they have no logic by default.</p>"},{"location":"addon/abilities/#creating-your-own-ability","title":"Creating your own Ability","text":"<p>To create your own ability, inherit from <code>Ability</code> and add your custom <code>handleRemoved</code> and <code>handleTick</code> logic.</p> <pre><code>class ExampleAbility(player: Player) : Ability(player) {\n\n    override fun handleRemove() {\n        // TODO\n    }\n\n    override fun handleTick() {\n        // TODO\n    }\n\n}\n</code></pre> <p>Then, register a new ability type for that ability: <pre><code>@Init(stage = InitStage.PRE_PACK)\nobject Abilities : AbilityTypeRegistry by ExampleAddon.registry {\n\n    val EXAMPLE_ABILITY = registerAbilityType(\"example_ability\", ::MyAbility)\n\n}\n</code></pre></p> <p>Then, give the ability to a player:</p> <pre><code>AbilityManager.giveAbility(player, Abilities.EXAMPLE_ABILITY)\n</code></pre> <p>And this is how you remove an ability:</p> <pre><code>AbilityManager.takeAbility(player, Abilities.EXAMPLE_ABILITY)\n</code></pre>"},{"location":"addon/addon-configuration/","title":"Configure Addon","text":"<p>Now that you've created your project, you need to set several values in the <code>addon</code> task.  If you're using the addon template, most of these values are already set for you.</p> <p>Options marked with a * are required.</p>"},{"location":"addon/addon-configuration/#id","title":"id*","text":"<p>This is the id of your addon. It is used for multiple things like the addon's config folder name or the namespace for items and blocks. Please note that:</p> <ul> <li>The id has to start with a letter and can only contain lowercase letters, numbers and <code>_</code>, <code>-</code>. (1)</li> <li>Addon ids should not be changed after release, as that will break items and blocks in existing worlds.   </li> <li>There are also a few reserved namespaces that cannot be used: <code>minecraft</code>, <code>nova</code>, <code>itemsadder</code>, <code>oraxen</code>, <code>mmoitems</code>.   This list might be expanded in the future, so you should generally avoid using namespaces that are already used by other   well-known plugins.</li> </ul> <ol> <li>Regex: <code>^[a-z][a-z\\d_-]*$</code></li> </ol> <p>Example:</p> build.gradle.kts addon { }<pre><code>id.set(\"example\")\n</code></pre> <p>In most cases, you can just use your project name:</p> build.gradle.kts addon { }<pre><code>id.set(project.name)\n</code></pre>"},{"location":"addon/addon-configuration/#name","title":"name*","text":"<p>This is the displayed name of your addon. Unlike the addon id, there are no naming restrictions. The name can be changed at any time.</p> <p>Example:</p> build.gradle.kts addon { }<pre><code>name.set(\"Example Addon\")\n</code></pre> <p>In most cases, you can just use your project name:</p> build.gradle.kts addon { }<pre><code>name.set(project.name)\n</code></pre>"},{"location":"addon/addon-configuration/#version","title":"version*","text":"<p>The version of the addon.</p> <p>Example:</p> build.gradle.kts addon { }<pre><code>version.set(\"1.0\")\n</code></pre> <p>Or to automatically get the version from your project:</p> build.gradle.kts addon { }<pre><code>version.set(project.version.toString())\n</code></pre>"},{"location":"addon/addon-configuration/#novaversion","title":"novaVersion*","text":"<p>The minimum version of Nova that your addon requires.</p> <p>Example:</p> build.gradle.kts addon { }<pre><code>novaVersion.set(\"0.11\")\n</code></pre> <p>Or use the version set in your version catalog:</p> build.gradle.kts addon { }<pre><code>novaVersion.set(deps.versions.nova)\n</code></pre>"},{"location":"addon/addon-configuration/#main","title":"main*","text":"<p>Full path to your main class (without the .class extension).</p> <p>Example:</p> build.gradle.kts addon { }<pre><code>main.set(\"com.example.ExampleAddon\")\n</code></pre>"},{"location":"addon/addon-configuration/#authorauthors","title":"author/authors*","text":"<p>A list of author(s) of your addon.</p> <p>Example:</p> build.gradle.kts addon { }<pre><code>authors.add(\"ExampleAuthor\")\n</code></pre> <p>Or for multiple authors:</p> build.gradle.kts addon { }<pre><code>authors.set(listOf(\"ExampleAuthor\", \"Another Author\"))\n</code></pre>"},{"location":"addon/addon-configuration/#dependsoftdepend","title":"depend/softdepend","text":"<p>You can use these options to specify which addons your addon depends on and thus needs to be loaded before your addon is. The difference between <code>depend</code> and <code>softdepend</code> is that <code>softdepend</code> will not cause the addon to fail if the dependency is not loaded.</p> <p>Example:</p> build.gradle.kts addon { }<pre><code>depend.add(\"machines\")\nsoftdepend.add(\"logistics\")\n</code></pre> <p>Info</p> <p>Unlike in spigot plugins, <code>depdend</code> and <code>softdepend</code> actually change which classes can be accessed from your addon. Without a (soft)dependency configured, you will not be able to access the classes of different addons at runtime.</p>"},{"location":"addon/addon-configuration/#example-configuration","title":"Example configuration","text":"build.gradle.kts<pre><code>addon {\n    id.set(\"example\")\n    name.set(\"Example Addon\")\n    version.set(\"0.1\")\n    novaVersion.set(\"0.11\")\n    main.set(\"com.example.ExampleAddon\")\n    authors.set(listOf(\"Example Author\", \"Another Author\"))\n    depend.add(\"machines\")\n    softdepend.add(\"logistics\")\n}\n</code></pre>"},{"location":"addon/advancements/","title":"Advancements","text":"<p>Advancement DSL builder has been removed</p> <p>The built-in advancement DSL builder has been removed in 0.15. However, you can still create advancements using Mojang's internal advancement builders and then register them using <code>AdvancementLoader</code> like before.</p> <p>Alternatively, you could also use a third-party advancement api.</p> <p>Advancements can be created with the top level function <code>advancement</code>. From there, you'll need to use Mojang's internal advancement builders.</p>"},{"location":"addon/advancements/#creating-the-root-advancement","title":"Creating the root advancement","text":"<p>When creating the root advancement, make sure to set a background image and a criterion that is obtained automatically, such as an empty tick.</p> Example root advancement<pre><code>private val ROOT = advancement(ExampleAddon, \"root\") {\n    display(DisplayInfo(\n        Items.MY_ITEM.clientsideProvider.get().nmsCopy,\n        Component.translatable(\"advancement.example_addon.root.title\").toNMSComponent(),\n        Component.empty().toNMSComponent(),\n        ResourceLocation(\"minecraft\", \"textures/block/tuff.png\"),\n        FrameType.TASK,\n        false, false, false\n    ))\n\n    addCriterion(\"tick\", PlayerTrigger.TriggerInstance.tick())\n}\n</code></pre>"},{"location":"addon/advancements/#advancements-for-obtaining-nova-items","title":"Advancements for obtaining Nova items","text":"<p>Nova also provided some useful top level functions for creating advancements with Nova items:</p> <ul> <li><code>obtainNovaItemAdvancement</code></li> <li><code>obtainNovaItemsAdvancement</code></li> </ul> Example usage of obtainNovaItemAdvancement and obtainNovaItemsAdvancement obtainNovaItemAdvancementobtainNovaItemsAdvancement <pre><code>private val OBTAIN_EXAMPLE_ITEM = obtainNovaItemAdvancement(ExampleAddon, ROOT, Blocks.EXAMPLE_ITEM)\n</code></pre> <pre><code>// Advancement for obtaining any dust type\nprivate val DUST = obtainNovaItemsAdvancement(ExampleAddon, \"dust\", ROOT, listOf(\n    Items.IRON_DUST, Items.GOLD_DUST, Items.DIAMOND_DUST,\n    Items.NETHERITE_DUST, Items.EMERALD_DUST, Items.LAPIS_DUST,\n    Items.COAL_DUST, Items.COPPER_DUST, Items.STAR_DUST\n), false)\n\n// Advancement for obtaining all dust types\nprivate val ALL_DUSTS = obtainNovaItemsAdvancement(ExampleAddon, \"all_dusts\", DUST, listOf(\n    Items.DIAMOND_DUST, Items.IRON_DUST, Items.GOLD_DUST,\n    Items.NETHERITE_DUST, Items.EMERALD_DUST, Items.LAPIS_DUST,\n    Items.COAL_DUST, Items.COPPER_DUST, Items.STAR_DUST\n), true)\n</code></pre>"},{"location":"addon/advancements/#registering-advancements","title":"Registering Advancements","text":"<p>After creating all advancements, you can register them using the <code>AdvancementLoader</code>:</p> <pre><code>AdvancementLoader.registerAdvancements(ROOT, DUST, ALL_DUSTS)\n</code></pre>"},{"location":"addon/attachments/","title":"Attachments","text":""},{"location":"addon/attachments/#what-is-an-attachment","title":"What is an Attachment?","text":"<p>In Nova, an <code>Attachment</code> is a (fake) entity riding a player, but you'll mostly likely use the <code>ItemAttachment</code> implementation which is a clientside armor stand riding a player while wearing a custom item as a helmet. The attachment system makes assigning models to players easy, as it handles all the riding logic. Once a player is given an attachment, it will stay on that player until it is removed again.</p>"},{"location":"addon/attachments/#creating-an-attachmenttype","title":"Creating an AttachmentType","text":"<p>Create an <code>AttachmentTypeRegistry</code> and annotate it with <code>@Init</code> to have it loaded during addon initialization.</p> <pre><code>@Init(stage = InitStage.PRE_PACK)\nobject Attachments : AttachmentTypeRegistry by ExampleAddon.registry {\n\n    val EXAMPLE_ATTACHMENT = registerAttachmentType(\"example_attachment\") { ItemAttachment(it, Items.ATTACHMENT_ITEM) }\n\n}\n</code></pre> <p>Then, add the attachment to a player:</p> <pre><code>AttachmentManager.addAttachment(player, Attachments.EXAMPLE_ATTACHMENT)\n</code></pre> <p>And this is how you would remove it again:</p> <pre><code>AttachmentManager.removeAttachment(player, Attachments.EXAMPLE_ATTACHMENT)\n</code></pre>"},{"location":"addon/attachments/#modifying-attachment-logic","title":"Modifying Attachment Logic","text":"<p>You can also change the attachment logic by either directly implementing the <code>Attachment</code> interface or by extending the <code>ItemAttachment</code> class. Then, just call the constructor of your 'Attachment' subclass when registering the attachment type.</p> <p>If you need an attachment which gets hidden when a player looks down, check out the <code>HideOnDownItemAttachment</code>.</p>"},{"location":"addon/configs/","title":"Configs","text":""},{"location":"addon/configs/#configuration-library","title":"Configuration Library","text":"<p>Nova uses a modified version of SpongePowered/Configurate, but most of the time you'll be dealing with Nova's <code>ConfigProvider</code>, which helps you with config reloading.</p>"},{"location":"addon/configs/#provider","title":"Provider","text":"<p>To help with config reloading, Nova offers the <code>Provider</code> class. This class stores a value of a given type and can be delegated to. <code>Providers</code> have an abstract <code>loadValue</code> function that, depending on its implementation, might load something from a config, a CBF <code>Compound</code>, or anything else. ConfigProviders are automatically reloaded when the config is reloaded. You can also chain value modification calls on a <code>Provider</code>. Those modification steps will then be run every time the config is reloaded.</p> <p>Some of those modification functions are:</p> <ul> <li><code>map</code> - Maps the value to a new value.</li> <li><code>orElse</code> - Falls back to a default value if the value is null.</li> <li><code>flatMap</code> - Performs a flatMap operation for a <code>Provider&lt;List&lt;*&gt;&gt;</code>.</li> <li><code>flatten</code> - Performs a flattening operation for a <code>Provider&lt;List&lt;List&lt;*&gt;&gt;&gt;</code>.</li> <li><code>requireNonNull</code> - Throws an exception if the value is null.</li> </ul> <p>Every time such a modification function is called, a new <code>Provider</code> is created and returned. This allows you to create several modified versions from the same <code>Provider</code>.</p> <p>You might also be interested in these <code>Provider</code>-related top-level functions:</p> <ul> <li><code>provider</code> - Creates a static <code>Provider</code> from a given value.</li> <li><code>combinedProvider</code> - Creates a <code>Provider&lt;List&lt;T&gt;&gt;</code> from a list of <code>Provider&lt;T&gt;</code>s.</li> <li><code>lazyProvider</code> - Creates a <code>Provider</code> whose parent is only created lazily using the given <code>initializer</code> lambda.</li> <li><code>combinedLazyProvider</code> - Creates a <code>Provider&lt;List&lt;T&gt;&gt;</code> from a list of <code>Provider&lt;T&gt;</code>s, where the <code>Provider&lt;T&gt;</code>s are   created lazily using the given <code>initializer</code> lambda.</li> <li><code>lazyProviderWrapper</code> - Creates a <code>Provider</code> that wraps a lazily initialized static value from given <code>initializer</code>   lambda.</li> </ul>"},{"location":"addon/configs/#adding-configs-to-your-addon","title":"Adding configs to your addon","text":"<p>In order to add configs to your addon, create a directory called <code>configs</code> in <code>resources</code>. There, you can add all your .yml configs, which will automatically be extracted on startup. New or changed keys will automatically be added / updated on the server as well, unless they have been modified by an admin.</p>"},{"location":"addon/configs/#accessing-configs","title":"Accessing configs","text":"<p>To access the configs, retrieve them from <code>Configs</code>. You can either use their names: <pre><code>Configs[\"example:ruby\"] // namespace:name (drop the .yml)\n</code></pre> <pre><code>Configs[ResourceLocation(\"example:ruby\")]\n</code></pre></p> <p>Or retrieve the config of a <code>NovaItem</code> or <code>NovaBlock</code> using <code>NovaItem#config</code> and <code>NovaBlock#config</code>.</p> <p>All of the above ways will result in you obtaining a <code>ConfigProvider</code>, which is a <code>Provider&lt;CommentedConfigurationNode&gt;</code>. Now, you can either retrieve the raw config node using <code>Provider#value</code>, or get a reloadable entry provider using <code>ConfigProvider#entry</code> and <code>ConfigProvider#optionalEntry</code>.</p> <pre><code>val exampleValue: Int by Configs[Items.RUBY].entry&lt;Int&gt;(\"example_value\") // (1)!\nval otherValue: Int? by Configs[Items.RUBY].optionalEntry&lt;Int&gt;(\"other_value\") // (2)!\n</code></pre> <ol> <li>Delegating to the <code>Provider&lt;Int&gt;</code> will cause this field automatically change every time the config is reloaded.</li> <li>Using <code>ConfigProvider#optionalEntry</code>, you can get a <code>Provider&lt;Int?&gt;</code>, where the value is null if the key is not present    in the config.</li> </ol>"},{"location":"addon/hitboxes/","title":"Hitboxes","text":""},{"location":"addon/hitboxes/#hitbox-implementations","title":"Hitbox Implementations","text":"<p>Nova provides you with two built-in ways to handle left- and right-click detection in game.</p>"},{"location":"addon/hitboxes/#physicalhitbox","title":"PhysicalHitbox","text":"<p>A <code>PhysicalHitbox</code> uses an Interaction Entity. This means that the hitbox can be shown by pressing <code>F3+B</code> and functions similar to a normal entity, with it not allowing to interact with anything behind it. <code>PhysicalHitboxes</code> are also restricted to a square base area, as they only have a <code>width</code> and a <code>height</code>.</p> <pre><code>// create the hitbox\nval hitbox = PhysicalHitbox(center, width, height)\n// add click handlers\nhitbox.addLeftClickHandler { /* ... */ }\nhitbox.addRightClickHandler { /* ... */ }\n// spawn the hitbox\nhitbox.register()\n// despawn the hitbox\nhitbox.unregister()\n</code></pre>"},{"location":"addon/hitboxes/#virtualhitbox","title":"VirtualHitbox","text":"<p><code>VirtualHitboxes</code> use server-side path tracing, which has a bigger performance impact than <code>PhysicalHitboxes</code>, but allows for more complex and flexible hitboxes. For one, their size is completely customizable, and they're not limited to a square base area. Additionally, you can also specify a <code>qualifier</code> function, which allows you to filter out certain cases where the hitbox should not be triggered and the player should be able to interact with the block behind it.</p> <p>You can show all virtual hitboxes using the command <code>/nova debug showHitboxes</code>.</p> <pre><code>// create the hitbox\nval hitbox = VirtualHitbox(from, to)\n// set the qualifier function\nhitbox.setQualifier { /* ... */ }\n// add click handlers\nhitbox.addLeftClickHandler { /* ... */ }\nhitbox.addRightClickHandler { /* ... */ }\n// spawn the hitbox\nhitbox.register()\n// despawn the hitbox\nhitbox.unregister()\n</code></pre>"},{"location":"addon/hitboxes/#hit-location","title":"Hit Location","text":"<p>When a player clicks a hitbox, you might be supplied with a <code>Vector3f location</code> parameter. This location is relative to the center of the base area of the hitbox. To determine the block face that was clicked, you can use the  <code>Hitbox.determineBlockFace(location: Vector3f)</code> function.</p> <p>Info</p> <p>Whether or not you're supplied with a <code>location</code> parameter depends on the click type and hitbox implementation. For physical hitboxes, only right-clicks will supply you with a location, while for virtual hitboxes, both left- and right-clicks will supply you with a location.</p>"},{"location":"addon/recipes/","title":"Recipes","text":""},{"location":"addon/recipes/#adding-recipes-to-your-addon","title":"Adding recipes to your addon","text":"<p>Recipes files are placed under <code>recipes/&lt;namespace&gt;/type</code>, where the <code>namespace</code> is the namespace of the addon that registered this recipe type (<code>minecraft</code> for Minecraft recipe types) and <code>type</code> the name of the recipe type. For more information about the recipe format and default recipe types, read the admin page on it.</p>"},{"location":"addon/recipes/#creating-a-custom-recipe-type","title":"Creating a custom Recipe Type","text":"<p>Recipe types are registered over the <code>RecipeTypeRegistry</code>. All of the following values are required to create a new <code>RecipeType</code>:</p> Name Type Usage <code>dirName</code> <code>String</code> The name for the directory of your recipe type. <code>recipeClass</code> <code>KClass&lt;T&gt;</code> The class of your recipe type, must be a subclass of <code>NovaRecipe</code>. <code>group</code> <code>RecipeGroup&lt;T&gt;?</code> The recipe group that displays the recipe in the recipe explorer gui. <code>deserializer</code> <code>RecipeDeserializer&lt;T&gt;?</code> The deserializer that deserializes the recipe files to an instance of the previously specified <code>recipeClass</code>. <p>Attention</p> <p>Setting <code>RecipeGroup</code> to null can lead to exceptions being thrown when players try to view recipes from that type. This parameter might be made non-null in the future.</p> <p>Creating a custom Recipe Type</p> Recipe ClassRecipe DeserializerRecipe Group <p>Every recipe that is created also creates a new instance of the <code>recipeClass</code>. That object then contains all the information about the recipe (e.g. Input, Output, Time, etc.).</p> <p>The following example is the <code>PulverizerRecipe</code> from the Machines addon: PulverizerRecipe<pre><code>class PulverizerRecipe(\n    key: NamespacedKey,\n    input: RecipeChoice,\n    result: ItemStack,\n    time: Int,\n) : ConversionNovaRecipe(key, input, result, time) {\n    override val type = RecipeTypes.PULVERIZER\n}\n</code></pre> Since a Pulverizer just converts one input item to another output item, I could use the pre-existing <code>ConversionNovaRecipe</code>. Depending on your recipe type, you might need to directly inherit from <code>NovaRecipe</code> though.</p> <p>The recipe deserializer deserializes the recipe file to an instance of the <code>recipeClass</code>.</p> <p>For the <code>PulverizerRecipe</code> from Machines, the recipe deserializer is actually quite easy, as you can just extend the already existing <code>ConversionRecipeDeserializer</code>: PulverizerRecipeDeserializer<pre><code>object PulverizerRecipeDeserializer : ConversionRecipeDeserializer&lt;PulverizerRecipe&gt;() {\n    override fun createRecipe(json: JsonObject, key: NamespacedKey, input: RecipeChoice, result: ItemStack, time: Int) =\n        PulverizerRecipe(key, input, result, time)\n}\n</code></pre></p> <p>However, depending on you recipe type you might need to do some more work. The following deserializer is used for the fluid infuser recipe: FluidInfuserRecipeDeserializer<pre><code>object FluidInfuserRecipeDeserializer : RecipeDeserializer&lt;FluidInfuserRecipe&gt; {\n\n    override fun deserialize(json: JsonObject, file: File): FluidInfuserRecipe {\n        val mode = json.getDeserialized&lt;FluidInfuserRecipe.InfuserMode&gt;(\"mode\")!!\n        val fluidType = json.getDeserialized&lt;FluidType&gt;(\"fluid_type\")!!\n        val fluidAmount = json.getLong(\"fluid_amount\")!!\n        val input = parseRecipeChoice(json.get(\"input\"))\n        val time = json.getInt(\"time\")!!\n        val result = ItemUtils.getItemBuilder(json.getString(\"result\")!!).get()\n\n        return FluidInfuserRecipe(getRecipeKey(file), mode, fluidType, fluidAmount, input, result, time)\n    }\n\n}\n</code></pre></p> <p>Info</p> <p>Make sure to always use the <code>parseRecipeChoice(JsonElement)</code>, <code>ItemUtils.getItemBuilder(String)</code> and<code>getRecipeKey(File)</code> utility methods instead of using your own logic.</p> <p>The recipe group is only used for recipe explorer GUI, so your recipes will already work without it. However, it is still required to create a recipe group.</p> <p>As always, it is very easy to create a recipe group for conversion recipes: PulverizingRecipeGroup<pre><code>object PulverizingRecipeGroup : ConversionRecipeGroup&lt;PulverizerRecipe&gt;() {\n    override val priority = 4 // (1)!\n    override val icon = Blocks.PULVERIZER.basicClientsideProvider // (2)!\n    override val texture = GUITextures.RECIPE_PULVERIZER // (3)!\n}\n</code></pre></p> <ol> <li>The priority defines where in the recipe explorer your recipe type is going to be. (Lower value -&gt; left | Higher value -&gt; right)</li> <li>The icon displayed for your recipe type.</li> <li>The GUI Texture used when displaying your recipe type.</li> </ol> <p>However, if your recipe is not a <code>ConversionNovaRecipe</code>, your recipe group might be a bit more work: (The resulting GUI needs to be in the dimensions <code>9x3</code>)</p> FluidInfuserRecipeGroup<pre><code>object FluidInfuserRecipeGroup : RecipeGroup&lt;FluidInfuserRecipe&gt;() {\n\n    override val texture = GUITextures.RECIPE_FLUID_INFUSER\n    override val icon = Blocks.FLUID_INFUSER.basicClientsideProvider\n    override val priority = 6\n\n    override fun createGUI(recipe: FluidInfuserRecipe): GUI {\n        val progressItem: ItemBuilder\n        val translate: String\n        if (recipe.mode == FluidInfuserRecipe.InfuserMode.INSERT) {\n            progressItem = GUIMaterials.TP_FLUID_PROGRESS_LEFT_RIGHT.createClientsideItemBuilder()\n            translate = \"menu.machines.recipe.insert_fluid\"\n        } else {\n            progressItem = GUIMaterials.TP_FLUID_PROGRESS_RIGHT_LEFT.createClientsideItemBuilder()\n            translate = \"menu.machines.recipe.extract_fluid\"\n        }\n\n        progressItem.setDisplayName(TranslatableComponent(\n            translate,\n            recipe.fluidAmount,\n            TranslatableComponent(recipe.fluidType.localizedName)\n        ))\n\n        return GUIBuilder(GUIType.NORMAL)\n            .setStructure(\n                \". f . t . . . . .\",\n                \". f p i . . . r .\",\n                \". f . . . . . . .\")\n            .addIngredient('i', createRecipeChoiceItem(recipe.input)) // (1)!\n            .addIngredient('r', createRecipeChoiceItem(listOf(recipe.result)))\n            .addIngredient('p', progressItem)\n            .addIngredient('f', StaticFluidBar(recipe.fluidType, recipe.fluidAmount, FLUID_CAPACITY, 3))\n            .addIngredient('t', CoreGUIMaterial.TP_STOPWATCH\n                .createClientsideItemBuilder()\n                .setDisplayName(TranslatableComponent(\"menu.nova.recipe.time\", recipe.time / 20.0))\n            )\n            .build()\n    }\n\n}\n</code></pre> <ol> <li>This function creates an InvUI item for a <code>RecipeChoice</code>. When clicked, it shows you recipes / usages for that     item. It also automatically cycles through all possible input options if there is more than one.</li> </ol> <p> InvUI Documentation</p>"},{"location":"addon/asset-packs/assetpack-basics/","title":"AssetPack","text":"<p>An AssetPack is a collection of all assets needed by your addon. It's pretty much just your addon's resource pack. However, the format differs a lot from a vanilla resource pack. To start off, create an <code>assets</code> directory in your addon's resources folder.</p> <p></p>"},{"location":"addon/asset-packs/assetpack-basics/#asset-index-files","title":"Asset Index Files","text":"<p>Depending on what you want to do, you can create a file called <code>materials.json</code> for custom items and blocks, <code>guis.json</code> for custom GUIs, and/or <code>armor.json</code> for custom armor textures. These files are called asset index files, as they're an index of the assets that you're adding to the game.</p>"},{"location":"addon/asset-packs/creating-armor/","title":"Creating Armor","text":""},{"location":"addon/asset-packs/creating-armor/#registering-an-armor-texture","title":"Registering an Armor Texture","text":"<p>In order to register an armor texture, you'll first need to create a <code>armor.json</code> in <code>assets/</code>: </p> <p>Then, create an armor entry: <pre><code>{\n  \"my_armor\": {\n    \"layer_1\": \"\", // (1)!\n    \"layer_2\": \"\", // (2)!\n    \"layer_1_emissivity_map\": \"\", // (3)!\n    \"layer_2_emissivity_map\": \"\", // (4)!\n    \"interpolation\": \"\", // (5)!\n    \"fps\": 0 // (6)!\n  }\n}\n</code></pre></p> <ol> <li>The first layer of the armor texture.    This is the first layer of the diamond armor texture: </li> <li>The second layer of the armor texture.     This is the second layer of the diamond armor texture: </li> <li>(optional) The emissivity map of the first layer of the armor texture. Black pixels are interpreted as not emissive, white    pixels are interpreted as fully emissive.</li> <li>(optional) The emissivity map of the second layer of the armor texture. Black pixels are interpreted as not emissive, white    pixels are interpreted as fully emissive.</li> <li>(optional) The interpolation mode used for the case that this is an animated armor texture.    Valid values are <code>none</code> and <code>linear</code>. This value is optional and defaults to <code>none</code>.</li> <li>(optional) The frames per second of the animation, for the case that this is an animated armor texture.    This value is optional and defaults to <code>0</code>.</li> </ol>"},{"location":"addon/asset-packs/creating-armor/#higher-resolution-armor-textures","title":"Higher Resolution Armor Textures","text":"<p>You can create armor textures of higher resolutions, as long as the aspect ratio is 2:1. If you do this, make sure that all layers (including emissivity maps) are of the same resolution.</p>"},{"location":"addon/asset-packs/creating-armor/#animated-armor-textures","title":"Animated Armor Textures","text":"<p>You can create animated armor textures by creating an animated texture, similar to how block and item textures are animated. If you create an animated texture, make sure that the <code>interpolation</code> and <code>fps</code> properties are set and that all layers (including emissivity maps) have the same number of frames.</p>"},{"location":"addon/asset-packs/creating-armor/#compatibility-with-client-side-rendering-mods","title":"Compatibility with client-side rendering mods","text":""},{"location":"addon/asset-packs/creating-armor/#optifine","title":"OptiFine","text":"<p>Custom armor can be rendered when using OptiFine, however, the emissivity maps will not be used. The framerate of animated armor will be capped at 20 FPS.</p>"},{"location":"addon/asset-packs/creating-armor/#iris","title":"Iris","text":"<p>To use custom armor with Iris, it is required to install CITResewn for custom armor and Animatica for animated armor textures or similar mods that can read the OptiFine resource pack format. The emissivity maps will not be used. The framerate of animated armor will be capped at 20 FPS.</p>"},{"location":"addon/asset-packs/creating-blocks/","title":"Creating Blocks","text":""},{"location":"addon/asset-packs/creating-blocks/#creating-your-first-block-material","title":"Creating your first block material","text":"<p>Generally, creating a block material is very similar to creating an item material. If your item and block are supposed to use the same model, you don't need to do anything at all. For example, this is how we register the Solar Panel in our Machines addon:</p> materials.json<pre><code>\"solar_panel\": \"block/solar_panel\"\n</code></pre>"},{"location":"addon/asset-packs/creating-blocks/#different-models-for-block-and-item","title":"Different models for block and item","text":"<p>In some cases, you will need different models for block and item. An example from the Machines addon would be the Wind Turbine. As it occupies multiple blocks, the Wind Turbine is split into 6 different (4 four the actual \"pillar\" and 2 for the rotor blades) models. However, since an item cannot be a compound of multiple models, we needed to create a separate, smaller version of the whole Wind Turbine for players to hold in their hands. For such cases, you can separate <code>item</code> and `block:</p> materials.json<pre><code>\"wind_turbine\": {\n  \"item\": \"item/wind_turbine\",\n  \"block\": {\n    \"models\": [\n      \"block/wind_turbine/0\",\n      \"block/wind_turbine/1\",\n      \"block/wind_turbine/2\",\n      \"block/wind_turbine/3\",\n      \"block/wind_turbine/rotor_middle\",\n      \"block/wind_turbine/rotor_blade\"\n    ]\n  }\n}\n</code></pre>"},{"location":"addon/asset-packs/creating-blocks/#block-types","title":"Block Types","text":"<p>The block type defines how blocks are added to the world. Currently, there are only two types: <code>default</code> (can be omitted) and <code>solid</code>.</p>"},{"location":"addon/asset-packs/creating-blocks/#display-entity-blocks","title":"Display Entity blocks","text":"<p>When using the block type <code>default</code>, display entities are used to display the block in the world. When this type is used, you can also configure the hitbox material with the <code>hitbox</code> parameter. This is the material of the block over which the custom block model will be displayed with the display entity. By default, the hitbox type is <code>BARRIER</code>, which comes with several benefits such as being able to use models smaller than the block itself.</p>"},{"location":"addon/asset-packs/creating-blocks/#solid-blocks","title":"Solid blocks","text":"<p>Solid blocks are real blocks in the world, whose block state does not appear in the world or have been made by Nova to not appear in the world (For example note block instruments are sent to the client, but are not required for their functionality). When using the block type <code>solid</code>, Nova automatically chooses one of the four available solid block options, depending on availability:  </p> Block Type Amount available Note Block 1149 Red Mushroom Block 63 Brown Mushroom Block 63 Mushroom Stem 63 Total 1338 <p>In total, 1338 blocks can be registered as <code>solid</code>. If there are no more blocks available, Nova will fall back to armor stand blocks.</p>"},{"location":"addon/asset-packs/creating-blocks/#directions","title":"directions","text":"<p>If your block is directional, you will need to register that under the <code>directions</code> property. Each direction takes up one block state, so a normal directional block will take up four block states and a block that can also be rotated to look up or down will take up six block states. The <code>directions</code> property accepts a string with the chars <code>n</code>, <code>e</code>, <code>s</code>, <code>w</code>, <code>u</code>, <code>d</code> representing the directions <code>north</code>, <code>east</code>, <code>south</code>, <code>west</code>, <code>up</code>, <code>down</code>. The order is irrelevant. materials.json - Directional solid block for North, East, South, West<pre><code>\"quarry\": {\n  \"item\": \"block/quarry\",\n  \"block\": {\n    \"type\": \"solid\",\n    \"directions\": \"nesw\"\n  }\n}\n</code></pre></p> <p><code>directions</code></p> <p>The <code>directions</code> property is only required for blocks of type <code>solid</code>, as Nova needs to generate the block states for those rotations. Display entity blocks do not need this property since display entities can just be rotated.</p>"},{"location":"addon/asset-packs/creating-blocks/#priority","title":"priority","text":"<p>Because the supply of solid bocks is limited, you can set a priority for your material to become a solid block. The blocks with the highest priority will become solid blocks. In general, the priority should be an estimation of how many blocks of this type will be in a chunk.</p> <p>Info</p> <p>If you want to learn more about the concepts behind custom blocks, consider checking out our spigot thread about it.</p>"},{"location":"addon/asset-packs/creating-guis/","title":"Registering a GUI Texture","text":"<p>In order to register GUI textures, you first need to create a <code>guis.json</code> in <code>assets/</code>:</p> <p></p> <p>The following registers a GUI texture located under <code>assets/textures/gui/example.png</code> with the name <code>example_gui</code>: <pre><code>{\n  \"example_gui\": \"gui/example\"\n}\n</code></pre></p>"},{"location":"addon/asset-packs/creating-items/","title":"Creating Items","text":""},{"location":"addon/asset-packs/creating-items/#creating-your-first-material","title":"Creating your first material","text":"<p>To start off, open the newly created <code>materials.json</code> file. This file will contain all materials needed by your addon. Both items and blocks are described in this file. So let's create a simple ruby item. We can use minecraft's old unused ruby texture.</p> <p>We just have to add it to our materials file:</p> materials.json<pre><code>{\n  \"ruby\": \"item/ruby\"\n}\n</code></pre> <p>And add the texture to our asset pack at <code>assets/textures/item/ruby.png</code>. So our file structure looks like this:</p> <p></p> <p>If you want an item with a custom model, you can just link to it the same way. Just put the model file the models folder instead.</p> Vanilla item material <p>The vanilla item material (which is used to alter clientside behavior of items) will be automatically chosen based on the item behaviors (i.e. a damageable item for tools or a sword for tools that can't break blocks in creative).</p> <p>If you still need to set the material type explicitly, you can do so by setting the <code>material</code> property:</p> materials.json<pre><code>{\n  \"ruby\": {\n    \"item\": {\n      \"material\": \"diamond\",\n      \"model\": \"item/ruby\"\n    }\n  }\n}\n</code></pre>"},{"location":"addon/asset-packs/creating-items/#items-with-multiple-models","title":"Items with multiple models","text":"<p>Some items have multiple models. For example, the vanilla bow item has multiple models while drawing the bow. Nova makes this process a lot easier. Instead of having to specify each model explicitly, you can specify a range and file name format. For example a diamond bow with multiple models would look like this:</p> materials.json<pre><code>{\n  \"diamond_bow\": {\n    \"item\": {\n      \"models\": {\n        \"item/diamond_bow/%s\": [0, 3]\n      }\n    }\n  }\n}\n</code></pre> <p>This will generate a diamond bow with 4 models using the textures<code>texture/item/diamond_bow/0</code> - <code>texture/item/diamond_bow/3</code>.</p> <p>If your models don't have a fixed number format, you can also list them by hand:</p> materials.json<pre><code>{\n  \"diamond_bow\": {\n    \"item\": {\n      \"models\": [\n        \"item/diamond_bow/not_pulled\",\n        \"item/diamond_bow/pulled\",\n        \"item/diamond_bow/shooting\",\n        \"item/diamond_bow/releasing\"\n      ]\n    }\n  }\n}\n</code></pre>"},{"location":"addon/asset-packs/creating-items/#applying-an-armor-texture","title":"Applying an armor texture","text":"<p>To apply an armor texture to your item, simple add the <code>armor</code> property:</p> materials.json<pre><code>{\n  \"star_chestplate\": {\n    \"item\": \"item/star_chestplate\",\n    \"armor\": \"star\" // (1)!\n  }\n}\n</code></pre> <ol> <li>The name of your armor texture. See: registering an armor texture</li> </ol> <p>We'll implement these items in code later. Let's create a block in the asset-pack in the next section.</p>"},{"location":"addon/asset-packs/language-files/","title":"Language Files","text":"<p>Everything in Nova has to be localized which is why language files are very important. To start off, create a folder called<code>lang</code> in your <code>assets</code> root folder. Here you can create language files for your addon. The format for these files is the same the one minecraft uses. If you need the locale code for a language, you can search for it here.</p> <p>Warning</p> <p>Make sure to use the \"in-game\" locale code since ISO-639-3 isn't implemented by Minecraft yet</p> <p>To start off, create a file called <code>en_us.json</code> in the <code>lang</code> folder. The format <code>[&lt;type&gt;].&lt;namespace/addon-id&gt;.&lt;item&gt;</code>  should be used for the translations keys. The type can be left out if it's a generic message. In general, the following  types should be used:</p> <ul> <li><code>item</code> - For translations related to items</li> <li><code>block</code> - For translations related to blocks</li> <li><code>menu</code> - For GUI related translations</li> <li><code>inventory</code> - For VirtualInventory names</li> <li><code>container</code> - For fluid container names</li> <li><code>command</code> - For command responses</li> <li><code>advancement</code> - For advancements</li> </ul> <p>You can of course use your own type names, just make sure to include your addons namespace in the key.</p> <pre><code>{\n  \"item.example.ruby\": \"Ruby\",\n  \"block.example.solar_panel\": \"Solar Panel\",\n  \"advancement.example.ruby.title\": \"Ruby\",\n  \"advancement.example.ruby.description\": \"Acquire a ruby\",\n  \"advancement.example.solar_panel.title\": \"Clean Energy\",\n  \"advancement.example.solar_panel.description\": \"Craft a Solar Panel\"\n}\n</code></pre>"},{"location":"addon/blocks/registering-blocks/","title":"Registering Blocks","text":""},{"location":"addon/blocks/registering-blocks/#creating-a-block-registry","title":"Creating a Block Registry","text":"<p>Create a <code>BlockRegistry</code> singleton object and annotate it with <code>@Init</code> to have it loaded during addon initialization.</p> <pre><code>@Init(stage = InitStage.PRE_PACK) // (1)!\nobject Blocks : BlockRegistry by ExampleAddon.registry {\n\n    // (2)!\n\n}\n</code></pre> <ol> <li>Nova will load this class during addon initialization, causing your blocks to be registered.</li> <li>Register your blocks here</li> </ol>"},{"location":"addon/blocks/registering-blocks/#blockoptions","title":"BlockOptions","text":"<p>Before registering a new Block, you need to create a <code>BlockOptions</code> instance. This class contains properties for breaking/placing custom blocks. Let's create an instance that can be broken with a stone pickaxe:</p> <pre><code>private val STONE = BlockOptions(\n    3.0, // (1)!\n    VanillaToolCategories.PICKAXE, // (2)!\n    VanillaToolTiers.STONE, // (3)!\n    true, // (4)!\n    SoundGroup.STONE, // (5)!\n    Material.NETHERITE_BLOCK // (6)!\n)\n</code></pre> <ol> <li>This is the hardness of the block. It determines how long it takes to break the block. This value currently doesn't affect explosions.</li> <li>A list of tool categories that are suitable to break this block. Can be empty.</li> <li>The minimum <code>ToolTier</code> that is required to properly break this block (Like diamond for obsidian). Can be null.</li> <li>Whether a tool is required to receive drops.</li> <li>The sound group to use for this block. Sound groups include sounds for hitting, breaking and placing a block as well as    stepping and falling on a block. You can also create your own sound group with your own custom sounds.</li> <li>The break particles that spawn when the block is broken. This is only relevant for armor stand based blocks, but since    you can't know if your block will end up being and armor stand block, you'll always have to set this value.</li> </ol>"},{"location":"addon/blocks/registering-blocks/#registering-the-block","title":"Registering the block","text":"<p>Using the options specified above, you can now register your block material via the builders obtained by calling <code>BlockRegistry#block</code> or <code>BlockRegistry#tileEntity</code>. Unlike items, block- and tile-entities can only be registered using the builder functions.</p> <pre><code>// normal block\nval MY_BLOCK = block(\"example_block\").blockOptions(STONE).register()\n\n// normal directional block (North, East, South, West)\nval MY_BLOCK_1 = block(\"example_block\").blockOptions(STONE).properties(Directional.NORMAL).register()\n\n// normal directional block (North, East, South, West, Up, Down)\nval MY_BLOCK_2 = block(\"example_block\").blockOptions(STONE).properties(Directional.ALL).register()\n\n// directional tile entity block (North, East, South, West)\nval MY_TILE_ENTITY_1 = tileEntity(\"example_block\", ::ExampleTileEntity).blockOptions(STONE).properties(Directional.NORMAL).register()\n</code></pre> <p>Don't forget to call <code>register()</code> at the end of the builder chain.</p>"},{"location":"addon/blocks/registering-blocks/#additional-properties","title":"Additional properties","text":""},{"location":"addon/blocks/registering-blocks/#blockbehavior","title":"BlockBehavior","text":"<p>The <code>BlockBehavior</code> handles the logic of all blocks of that material (or multiple materials, if the same <code>BlockBehavior</code> is registered to them). This logic includes handling interacts, returning drops, playing the break sound, showing break particles and more. Depending on if you register a TileEntity or a normal block, the <code>TileEntityBlockBehavior</code> or <code>BlockBehavior$Default</code> is used.</p>"},{"location":"addon/blocks/registering-blocks/#block-properties","title":"Block properties","text":"<p>Block properties store data stored inside the <code>NovaBlockState</code>. Currently, the only block property available is <code>Directional</code>, but addons can create custom block properties. Block properties can be accessed by calling the <code>getProperty(BlockPropertyType)</code> or <code>getProperty(KClass)</code> methods in <code>NovaBlockState</code>.</p>"},{"location":"addon/blocks/registering-blocks/#multiblockloader","title":"MultiBlockLoader","text":"<p>The <code>MultiBlockLoader</code> is a typealias for <code>(BlockPos) -&gt; List&lt;BlockPos&gt;</code> which is just supposed to return a list of block positions that are also part of this block. This list should not include the position of the base block.</p>"},{"location":"addon/blocks/registering-blocks/#placecheckfun","title":"PlaceCheckFun","text":"<p>The <code>PlaceCheckFun</code> is a typealias for <code>((Player, ItemStack, Location) -&gt; CompletableFuture&lt;Boolean&gt;)</code> used to check for placement permissions of multi blocks.</p>"},{"location":"addon/blocks/registering-blocks/#registering-the-block-item","title":"Registering the block item","text":"<p>After you've registered your block, you will also need to register the item for it:</p> <pre><code>@Init(stage = InitStage.PRE_PACK)\nobject Items : ItemRegistry by ExampleAddon.registry {\n\n    /* ... your other items ... */\n\n    val MY_BLOCK = registerItem(Blocks.MY_BLOCK)\n\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/base/","title":"Creating a basic TileEntity class","text":"<p>Before registering the material, you need to create a TileEntity class with a constructor that takes a <code>NovaTileEntityState</code> instance.</p> <pre><code>class SolarPanel(blockState: NovaTileEntityState) : NetworkedTileEntity(blockState) {\n\n}\n</code></pre> <p>Now, we can register the material:</p> <pre><code>val SOLAR_PANEL = NovaMaterialRegistry.tileEntity(ExampleAddon, \"solar_panel\", ::SolarPanel).blockOptions(STONE).register()\n</code></pre> <p>So your <code>Blocks</code> object might look something like this:</p> <pre><code>@Init(stage = InitStage.PRE_PACK) // (1)!\nobject Blocks : BlockRegistry by ExampleAddon.registry {\n\n    private val STONE = BlockOptions(3.0, ToolCategory.PICKAXE, ToolTier.WOOD, true, SoundGroup.STONE, Material.NETHERITE_BLOCK)\n\n    val SOLAR_PANEL = tileEntity(ExampleAddon, \"solar_panel\", ::SolarPanel).blockOptions(STONE).register()\n\n}\n</code></pre> <ol> <li>Nova will load this class during addon initialization, causing your blocks to be registered.</li> </ol>"},{"location":"addon/blocks/tileentity/base/#networkedtileentity","title":"NetworkedTileEntity","text":"<p>A default <code>TileEntity</code> can't be connected to networks, but a <code>NetworkedTileEntity</code> can. So if your TileEntity should be able to properly interact with surrounding blocks and cables, use <code>NetworkedTileEntity</code>.</p>"},{"location":"addon/blocks/tileentity/base/#overriding-commonly-needed-functions","title":"Overriding commonly needed functions","text":"<p>Note</p> <p>Some of these functions are only available via the <code>NetworkedTileEntity</code> class.</p>"},{"location":"addon/blocks/tileentity/base/#handletick","title":"<code>handleTick()</code>","text":"<p>This function is called every tick in the server thread.</p> <pre><code>override fun handleTick() {\n    // Called every tick\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/base/#handleasynctick","title":"<code>handleAsyncTick()</code>","text":"<p>This function is called every tick asynchronously.</p> <pre><code>override fun handleAsyncTick() {\n    // Called every tick\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/base/#handleinitializedfirst-boolean","title":"<code>handleInitialized(first: Boolean)</code>","text":"<p>Called when the TileEntity is loaded/placed. The <code>first</code> parameter is true when the TileEntity is first loaded meaning it has just been placed. Make sure to call the superclass's function.</p> <pre><code>override fun handleInitialized(first: Boolean) {\n    super.handleInitialized(first)\n    // Called when the TileEntity is loaded/placed\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/base/#handleremovedunload-boolean","title":"<code>handleRemoved(unload: Boolean)</code>","text":"<p>Called after the TileEntity has been removed from the TileEntityManager's TileEntity map because it either got unloaded  or destroyed. The <code>unload</code> parameter is true when the TileEntity was removed because the chunk was unloaded. Make sure  to call the superclass's function.</p> <pre><code>override fun handleRemoved(unload: Boolean) {\n    super.handleRemoved(unload)\n    // Called when the TileEntity is unloaded/broken\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/base/#handlerightclickctx-blockinteractcontext-boolean","title":"<code>handleRightClick(ctx: BlockInteractContext): Boolean</code>","text":"<p>This function is called when a player right-clicks the block. The return value determines whether any action was performed. Make sure to call the superclass's function.</p> <pre><code>override fun handleRightClick(ctx: BlockInteractContext): Boolean {\n    actionPerformed = super.handleRightClick(ctx)\n    // Called when a player right-clicks the block\n    return actionPerformed // || ...\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/base/#reload","title":"<code>reload()</code>","text":"<p>This function is called when a TileEntity's upgrades are changed or when the config is reloaded. Make sure to call the  superclass's function</p> <pre><code>override fun reload() {\n    super.reload()\n    // do your own reloading here\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/base/#getdropsincludeself-boolean-mutablelistitemstack","title":"<code>getDrops(includeSelf: Boolean): MutableList&lt;ItemStack&gt;</code>","text":"<p>Override this function if you need to add additional drops. You can ignore the <code>includeSelf</code> parameter as it is only needed by the superclass's function.</p> <pre><code>override fun getDrops(includeSelf: Boolean): MutableList&lt;ItemStack&gt; {\n    val list = super.getDrops(includeSelf)\n    // add your own drops here\n    return list\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/base/#savedata","title":"<code>saveData()</code>","text":"<p>Use this function to save any additional data your TileEntity might have. You can store the data via <code>storeData</code> which will serialize the data via CBF. Make sure to call the superclass's function. Read the TileEntity Data Page for more information.</p> <pre><code>override fun saveData() {\n    super.saveData()\n    // save your data here\n    // e.g. storeData(\"pressTime\", timeLeft)\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/base/#other-useful-functions","title":"Other useful functions","text":"<ul> <li><code>getInventory()</code> - See ItemHolders.</li> <li><code>getFluidContainer()</code> - See FluidHolders.</li> <li><code>createPacketTask()</code> - Repeatedly sends the same packets to all players in range. See Particles.</li> <li><code>createSideConfig()</code>, <code>createExclusiveSideConfig()</code> - See Holders.</li> <li><code>getBlockFrontRegion()</code>, <code>getFrontRegion()</code>, <code>getSurroundingRegion()</code> - See Region</li> <li><code>createStaticRegion()</code>, <code>getDynamicRegion()</code>, <code>getUpgradableRegion()</code> - See Reloadable Region</li> <li><code>playSoundEffect()</code> - Plays a sound effect to all TileEntity viewers.</li> <li><code>getViewers()</code> - Returns a list of all players that the TileEntity is visible to.</li> </ul>"},{"location":"addon/blocks/tileentity/config/","title":"Simple TileEntity Config","text":"<p>To start off, let's make a simple config file for our Solar Panel:</p> resources/configs/solar_panel.yml<pre><code>capacity: 10000\nenergy_per_tick: 40\n</code></pre> <p>We can then load these config values in top level declarations of our Solar Panel:</p> <pre><code>private val MAX_ENERGY = configReloadable { NovaConfig[SOLAR_PANEL].getLong(\"capacity\") }\nprivate val ENERGY_PER_TICK = configReloadable { NovaConfig[SOLAR_PANEL].getLong(\"energy_per_tick\") }\n\nclass SolarPanel(blockState: NovaTileEntityState) : NetworkedTileEntity(blockState) {\n    // ...\n}\n</code></pre> <p>By wrapping them in <code>configReloadable</code>, they'll be automatically updated when the config is reloaded via <code>/nova reload configs</code>. Now let's make our Solar Panel actually work.</p>"},{"location":"addon/blocks/tileentity/data/","title":"TileEntity Data","text":"<p>Make sure to check out the CBF documentation for more information.</p> <p> CBF Documentation</p> Default Nova Binary Adapters <ul> <li>Color</li> <li>Location</li> <li>NamespacedKey</li> <li>NamespacedId</li> <li>NetworkType</li> <li>VirtualInventory</li> <li>ItemFilter</li> <li>ItemStack</li> </ul> <p>All of Nova's binary data is handled via cbf. TileEntities have special functions to directly store/retrieve data. You can call <code>storeData</code> to store data and <code>retrieveData</code> or <code>retrieveDataOrNull</code> to retrieve data.</p>"},{"location":"addon/blocks/tileentity/data/#storing-retrieving-data-with-data-accessors","title":"Storing / retrieving data with data accessors","text":"<p>To define a property that is automatically saved when the TileEntity's data gets saved, you can use the <code>storedValue</code> function. It returns a <code>DataAcessor</code> object to which you can delegate:  </p> storedValue (not null)<pre><code>private val burnTime: Int by storedValue(\"burnTime\") { 0 }\n</code></pre> storedValue (nullable)<pre><code>private val itemFilter: ItemFilter? by storedValue(\"itemFilter\")\n</code></pre> <p>And that's it! When the TileEntity gets saved, those properties will be written to the TileEntity data. Unlike the manual approach, you will not need to add anything to the <code>saveData</code> function.</p>"},{"location":"addon/blocks/tileentity/data/#manually-storing-retrieving-data","title":"Manually storing / retrieving data","text":"<p>Unless it's not possible otherwise, we recommend against storing data manually.</p>"},{"location":"addon/blocks/tileentity/data/#storing-data-manually","title":"Storing data manually","text":"<p>If you're not using data accessors, store your data in the <code>saveData</code> function.</p> <p>Make sure to call the superclasses function!</p> MechanicalPress.kt<pre><code>override fun saveData() {\n    super.saveData()\n    storeData(\"pressType\", type)\n    storeData(\"pressTime\", timeLeft)\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/data/#retrieving-data-manually","title":"Retrieving data manually","text":"<p>You can then retrieve the data while initializing your TileEntity's properties.</p> MechanicalPress.kt<pre><code>private var type: PressType = retrieveData(\"pressType\") { PressType.PLATE }\nprivate var timeLeft: Int = retrieveData(\"pressTime\") { 0 }\n</code></pre> <p>or</p> MechanicalPress.kt<pre><code>private var type: PressType = retrieveDataOrNull(\"pressType\") ?: PressType.PLATE\nprivate var timeLeft: Int = retrieveDataOrNull(\"pressTime\") ?: 0\n</code></pre>"},{"location":"addon/blocks/tileentity/data/#custom-binaryadapters","title":"Custom <code>BinaryAdapters</code>","text":"<p>While registering custom <code>BinaryAdapters</code> for your own classes is encouraged, don't register them for anything else. If you need one for such a type, open an issue on Nova's GitHub page. Make sure to include the class name in the title as well.</p>"},{"location":"addon/blocks/tileentity/gui/","title":"TileEntity Menu","text":"<p>Check out the InvUI wiki</p> <p>If you're not familiar with the InvUI library, you'll have trouble understanding the following guide. You can check out the wiki here. Nova registers some default ingredients which can be used in the Gui Builder. You can check out the default ingredients here. Don't register your own global ingredients!</p>"},{"location":"addon/blocks/tileentity/gui/#creating-a-tileentitymenu","title":"Creating a TileEntityMenu","text":"<p>If you want your TileEntity to have a GUI, you'll have to create a TileEntityMenu class. You can do this by inheriting from either <code>GlobalTileEntityMenu</code> or <code>IndividiualTileEntityMenu</code>. The difference between the two is that the <code>GlobalTileEntityMenu</code> will only have one instance per tile-entity, while the <code>IndividualTileEntityMenu</code> will have one instance per player.</p> <p>To mark your menu class as a TileEntity menu, you'll have to annotate it with the <code>@TileEntityMenuClass</code> annotation. Nova will automatically instantiate your menu class when needed.</p> <p>Example GUIs</p> GlobalTileEntityMenuIndividualTileEntityMenu <pre><code>@TileEntityMenuClass\nprivate inner class SolarPanelMenu : GlobalTileEntityMenu() {\n\n    override val gui = Gui.normal()\n        .setStructure(\n            \"1 - - - - - - - 2\",\n            \"| u # # e # # # |\",\n            \"| # # # e # # # |\",\n            \"| # # # e # # # |\",\n            \"3 - - - - - - - 4\")\n        .addIngredient('u', OpenUpgradesItem(upgradeHolder))\n        .addIngredient('e', EnergyBar(3, energyHolder)) // (1)!\n        .build()\n\n}\n</code></pre> <ol> <li>The <code>energyHolder</code> will be explained in an upcoming section.</li> </ol> <p>For most cases, this is the menu class you'll want to extend.</p> <pre><code>@TileEntityMenuClass\nprivate inner class VacuumChestMenu(player: Player) : IndividualTileEntityMenu(player) {\n\n    override val gui = Gui.normal()\n        .setStructure(\n            \"1 - - - - - - - 2\",\n            \"| s u # i i i p |\",\n            \"| r # # i i i d |\",\n            \"| f # # i i i m |\",\n            \"3 - - - - - - - 4\")\n        /* ... */\n        .addIngredient('r', region.createVisualizeRegionItem(player)) // (1)!\n        /* ... */\n        .build()\n\n}\n</code></pre> <ol> <li>This is what we need the Player instance for. The visualize region button can be toggled by every player individually, which is why we need different <code>Gui</code> instances for each player.  If you're intrested in the <code>region</code> field, you can check out the Region section.</li> </ol> <p>Gui Textures</p> <p>If you want to use a <code>GuiTexture</code>, simply pass it to the <code>GlobalTileEntityMenu</code> / <code>IndividualTileEntityMenu</code> constructor.</p>"},{"location":"addon/blocks/tileentity/gui/#using-the-sideconfigmenu","title":"Using the SideConfigMenu","text":"<p>If you want to allow players to change the side configuration of your TileEntity through the Menu, you can use the built-in <code>SideConfigMenu</code>.</p> <pre><code>class SideConfigMenu(\n    endPoint: NetworkEndPoint, // (1)!\n    inventoryNames: List&lt;Pair&lt;NetworkedInventory, String&gt;&gt;? = null, // (2)!\n    fluidContainerNames: List&lt;Pair&lt;FluidContainer, String&gt;&gt;? = null, // (3)!\n    openPrevious: (Player) -&gt; Unit // (4)!\n) \n</code></pre> <ol> <li>Your TileEntity</li> <li>A list of <code>NetworkedInventory</code> to inventory name (localized) pairs. The <code>NetworkedInventory</code> instance can be obtained     from the <code>VirtualInventory</code> by calling <code>NovaItemHolder#getNetworkedInventory</code></li> <li>A list of <code>FluidContainer</code> to container name (localized) pairs.</li> <li>A method to open the previous GUI. In a <code>TileEntityGui</code>, this can reference <code>::openWindow</code></li> </ol> <p>Depending on the network types of your TileEntity, the SideConfigMenu will adjust accordingly.</p> <p>The UI item for opening the side config menu is called <code>OpenSideConfigItem</code> and just takes the <code>SideConfigMenu</code> as parameter:</p> <pre><code>@TileEntityMenuClass\nprivate inner class SolarPanelMenu : GlobalTileEntityMenu() {\n\n    private val sideConfigGui = SideConfigGui(\n        this@SolarPanel,\n        ::openWindow\n    )\n\n    override val gui = Gui.normal()\n        .setStructure(\n            \"1 - - - - - - - 2\",\n            \"| u # # e # # # |\",\n            \"| # # # e # # # |\",\n            \"| # # # e # # # |\",\n            \"3 - - - - - - - 4\")\n        .addIngredient('e', EnergyBar(3, energyHolder))\n        .addIngredient('s', OpenSideConfigItem(sideConfigGui))\n        .build()\n\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/holders/","title":"Holders","text":"<p>Holders are used to store/handle specific data like energy amount or side config data and provide an interface for networks. Every <code>NetworkedTileEntity</code> has an <code>energyHolder</code>, an <code>itemHolder</code> and a <code>fluidHolder</code> property. To make them functional, you need to override them in your TileEntity implementation. All 3 holders have a common property: The <code>connectionConfig</code>  which is used to determine what <code>NetworkConnectionType</code> each <code>BlockFace</code> has. The connection types <code>NONE</code>, <code>INSERT</code>, <code>EXTRACT</code> and <code>BUFFER</code> are available. The <code>BUFFER</code> connection type is used for faces that have both an insert and  extract connection. All holder constructors take a lambda to configure the default connection/side config.</p>"},{"location":"addon/blocks/tileentity/holders/#energyholder","title":"EnergyHolder","text":"<p>Before overriding the <code>energyHolder</code> property, you need to choose the best implementation for your TileEntity.</p> <ul> <li>ConsumerEnergyHolder: Used for TileEntities that need and consume energy to operate.</li> <li>ProviderEnergyHolder: Used for TileEntities that generate energy.</li> <li>BufferEnergyHolder: Used for TileEntities that store energy and transfer it to other tileEntities when needed. E.g. power cells.</li> </ul> <p>These all have different constructors. You can open the example box below to see how each one is implemented.</p> EnergyHolder implementations ConsumerEnergyHolderProviderEnergyHolderBufferEnergyHolder ConsumerEnergyHolder<pre><code>override val energyHolder = ConsumerEnergyHolder(\n    this, // (1)!\n    MAX_ENERGY, // (2)!\n    ENERGY_PER_TICK, // (3)!\n    null, // (4)!\n    upgradeHolder // (5)!\n) { createSideConfig(NetworkConnectionType.INSERT, BlockSide.FRONT) } // (6)!\n</code></pre> <ol> <li>The parent TileEntity that the holder is attached to.</li> <li>A config reloadable value of the maximum amount of energy that can be stored (See Config for more info). The    actual maximum amount is calculated with upgrades.</li> <li>(optional) Another config reloadable value that stores the amount of energy that is consumed per tick. While this value is not    required, it is still recommended to set it since it will automatically calculate the actual energy consumption with upgrades.</li> <li>(optional) A second energy consumption rate if needed.</li> <li>(optional) A <code>UpgradeHolder</code> instance. See UpgradeHolder for more info.</li> <li>A lambda that creates a default side config for the holder. You can use <code>createSideConfig</code> or <code>createExclusiveSideConfig</code> if    you have a simple default config. In this case, a config with insert on all sides except the front will be created.</li> </ol> ProviderEnergyHolder<pre><code>override val energyHolder = ProviderEnergyHolder(\n    this, // (1)!\n    MAX_ENERGY, // (2)!\n    ENERGY_PER_TICK, // (3)!\n    upgradeHolder // (4)!\n) { createSideConfig(NetworkConnectionType.EXTRACT, FRONT) } // (5)!\n</code></pre> <ol> <li>The parent TileEntity that the holder is attached to.</li> <li>A config reloadable value that stores the maximum amount of energy that can be stored (See Config for more info). The    actual maximum amount is calculated with upgrades.</li> <li>(optional) Another config reloadable value that stores the amount of energy that is generated per tick. While this value is not    required, it is still recommended to set it since it will automatically calculate the actual energy generation with upgrades.</li> <li>(optional) A <code>UpgradeHolder</code> instance. See UpgradeHolder for more info.</li> <li>A lambda that creates a default side config for the holder. You can use <code>createSideConfig</code> or <code>createExclusiveSideConfig</code> if    you have a simple default config. In this case, a config with extract on all sides except the front will be created.</li> </ol> BufferEnergyHolder<pre><code>override val energyHolder = BufferEnergyHolder(\n    this, // (1)!\n    MAX_ENERGY, // (2)!\n    false // (3)!\n) { createSideConfig(BUFFER) } // (4)!\n</code></pre> <ol> <li>The parent TileEntity that the holder is attached to.</li> <li>A config reloadable value that stores the maximum amount of energy that can be stored (See Config for more info). The    actual maximum amount is calculated with upgrades.</li> <li>(optional) A boolean value that determines if the holder should provide an infinite amount of energy. Can be used    for creative blocks (E.g. a creative power cell).</li> <li>A lambda that creates a default side config for the holder. You can use <code>createSideConfig</code> or <code>createExclusiveSideConfig</code> if    you have a simple default config. In this case, a config with buffer on all sides will be created.</li> </ol>"},{"location":"addon/blocks/tileentity/holders/#itemholder","title":"ItemHolder","text":"<p>VirtualInventory</p> <p>Make sure to read the VirtualInventory page on the InvUI wiki before proceeding!</p> <p><code>ItemHolders</code> are used to provide an interface for networks to interact with your TileEntity's inventories. Depending on what your TileEntity does, you may need more than one inventory (For example, a pulverizer with an input and output inventory). Unlike <code>EnergyHolders</code>, <code>ItemHolders</code> only have one default implementation called <code>NovaItemHolder</code>. To create a  <code>VirtualInventory</code> use the <code>getInventory</code> functions. For this example, let's create an input and output inventory.</p> <pre><code>private val inputInv = getInventory(\"input\", 1)\nprivate val outputInv = getInventory(\"output\", 2)\n</code></pre> <p>If you want to handle inventory changes, you can pass a lambda or method reference to the <code>getInventory</code> function.</p> <pre><code>private val inputInv = getInventory(\"input\", 1, ::handleInputUpdate)\n// ...\nprivate fun handleInputUpdate(event: ItemUpdateEvent) {\n    // ...\n}\n</code></pre> <p>Now we can override the <code>itemHolder</code> property.</p> <pre><code>override val itemHolder = NovaItemHolder(\n    this, // (1)!\n    inputInv to NetworkConnectionType.BUFFER, // (2)!\n    outputInv to NetworkConnectionType.EXTRACT // (3)!\n) { createSideConfig(NetworkConnectionType.INSERT, BlockSide.FRONT) } // (4)!\n</code></pre> <ol> <li>The parent TileEntity that the holder is attached to.</li> <li>The default inventory. A pair of <code>VirtualInventory</code> and <code>NetworkConnectionType</code>. The first element is the input    inventory and the second element is the default connection type.</li> <li>Vararg of additional inventories.</li> <li>A lambda that creates a default side config for the holder. You can use <code>createSideConfig</code> or <code>createExclusiveSideConfig</code> if    you have a simple default config. In this case, a config with insert on all sides except the front will be created.</li> </ol>"},{"location":"addon/blocks/tileentity/holders/#fluidholder","title":"FluidHolder","text":"<p>Similar to <code>ItemHolders</code>, <code>FluidHolders</code> are used provide an interface for networks to interact with your TileEntity's tanks. But instead of <code>VirtualInventories</code>, they use <code>FluidContainers</code> which you can get from the <code>getFluidContainer</code> function:</p> <pre><code>private val waterTank = getFluidContainer(\n    \"water\", // (1)!\n    setOf(FluidType.WATER), // (2)!\n    WATER_CAPACITY, // (3)!\n    0 // (4)!\n)\n</code></pre> <ol> <li>The name of the tank.</li> <li>The fluid types that can be stored in the tank.</li> <li>A config reloadable value that stores the maximum amount of fluid that can be stored (See Config for more info).</li> <li>(optional) The amount of fluid that is initially stored in the tank. Defaults to 0 if omitted.</li> </ol> <p>Again, you can handle changes in the container by passing a lambda or method reference to the <code>getFluidContainer</code> function. Additionally, you can also pass an <code>UpgradeHolder</code> and the <code>UpgradeType</code> that should affect your container's capacity to the <code>getFluidContainer</code> function.</p> <pre><code>private val waterTank = getFluidContainer(\n    \"water\",\n    setOf(FluidType.WATER),\n    WATER_CAPACITY,\n    0,\n    ::updateWaterLevel\n)\n\nprivate fun updateWaterLevel() {\n    /* ... */\n}\n</code></pre> <p>Now we can override the <code>fluidHolder</code> property.</p> <pre><code>override val fluidHolder = NovaFluidHolder(\n    this, // (1)!\n    waterTank to NetworkConnectionType.BUFFER// (2)!\n    // You can add additional tanks containers // (3) !\n) { createSideConfig(NetworkConnectionType.INSERT, BlockSide.FRONT) } // (4)!\n</code></pre> <ol> <li>The parent TileEntity that the holder is attached to.</li> <li>The default tank. A pair of <code>FluidTank</code> and <code>NetworkConnectionType</code>. The first element is the input tank and the second element is the default connection type.</li> <li>Vararg of additional tanks.</li> <li>A lambda that creates a default side config for the holder. You can use <code>createSideConfig</code> or <code>createExclusiveSideConfig</code> if    you have a simple default config. In this case, a config with insert on all sides except the front will be created.</li> </ol>"},{"location":"addon/blocks/tileentity/particles/","title":"TileEntity Particles","text":"<p>To continuously spawn particles for your TileEntity, you can use the <code>createPacketTask</code> function and save the task in a field. The function expects a list of packets and a tick interval. To get the particle packets you can use the <code>ParticleBuilder</code> obtained by the top-level function <code>particle</code>. For example, for the FurnaceGenerator we have the following setup:</p> <pre><code>private val particleTask = createPacketTask(listOf(\n    particle(ParticleTypes.SMOKE) {\n        location(centerLocation.advance(getFace(FRONT), 0.6).apply { y += 0.8 })\n        offset(getFace(BlockSide.RIGHT).axis, 0.15f)\n        offsetY(0.1f)\n        speed(0f)\n        amount(5)\n    }\n), 1)\n</code></pre> <p>You can then call <code>particleTask.start()</code> and <code>particleTask.stop()</code> depending on whether you want to start or stop displaying the particles.</p>"},{"location":"addon/blocks/tileentity/region/","title":"Region","text":"<p>Generally, a region is an area between a <code>min</code> and a <code>max</code> Location.  </p> <pre><code>val region = Region(min, max)\n</code></pre> <p>If your region is related to a <code>TileEntity</code>, you can also use the tile-entity functions <code>getBlockFrontRegion()</code>, <code>getFrontRegion()</code> and <code>getSurroundingRegion()</code> which create a region relative to the TileEntity.</p>"},{"location":"addon/blocks/tileentity/region/#visual-region","title":"Visual Region","text":"<p>To display the outline of this region with particles, you can use the <code>VisualRegion</code> object:  </p> <pre><code>// to show the region:\nVisualRegion.showRegion(player, regionUUID, region)\n// to hide the region\nVisualRegion.hideRegion(player, regionUUID)\n// to toggle on / off\nVisualRegion.toggleView(player, regionUUID, region)\n</code></pre> <p>If you want a \"Visualize Region\" button in your GUI, you can use the <code>VisualRegionItem</code>:</p> <pre><code>VisualizeRegionItem(regionUUID) { region }\n</code></pre>"},{"location":"addon/blocks/tileentity/region/#reloadableregion","title":"ReloadableRegion","text":"<p>In some cases, you might want your region's size to be adjustable through player input, upgrades or with the config. For those cases, we recommend using a <code>ReloadableRegion</code>.</p> <p>There are three different <code>ReloadableRegion</code> implementations available:</p> <p>ReloadableRegion implementations</p> StaticRegionDynamicRegionUpgradableRegion <p>This is the simplest implementation. It accepts a <code>ValueReloadable&lt;Int&gt;</code> for retrieving the size and a lambda for creating a <code>Region</code> with that size:</p> <pre><code>val region = getStaticRegion(size) { getSurroundingRegion(it) }\n</code></pre> <p>The dynamic region allows user-modified sizes. You'll need to set a min, max, and default size as well as a lambda for creating a <code>Region</code> with that size:</p> <pre><code>val region = getDynamicRegion(minSize, maxSize, defaultSize) { getSurroundingRegion(it) }\n</code></pre> <p>You can then change the size of the region using <code>region.size</code> or place the <code>region.displaySizeItem</code>, <code>region.increaseSizeItem</code> and <code>region.decreaseSizeItem</code> in your TileEntity's GUI to make the size adjustable by players.</p> <p>The upgradable region is a subclass of <code>DynamicRegion</code> which additionally allows size modification using upgrades. You'll only need to specify which <code>UpgradeType</code> affects the maximum possible size of your region - everything else is handled automatically.</p> <pre><code>val region = getUpgradableRegion(UpgradeType.RANGE, minRange, maxRange, defaultRange) { getSurroundingRegion(it) }\n</code></pre> <p>Note</p> <p><code>ReloadableRegion</code> and its implementations are specifically designed to be used with TileEntities. Therefore, they can only be created using the above mentioned TileEntity functions.</p> <p>Every <code>ReloadableRegion</code> also provides an instance of a <code>VisualRegionItem</code> (<code>region.visualizeRegionItem</code>). You can use this as a show / hide region button in your GUI.</p>"},{"location":"addon/blocks/tileentity/upgrades/","title":"Upgrades","text":""},{"location":"addon/blocks/tileentity/upgrades/#making-your-tileentity-upgradeable","title":"Making your TileEntity upgradeable","text":"<p>In order to make your TileEntity upgradeable, you'll need to implement the <code>Upgradeable</code> interface. Then, create a <code>UpgradeHolder</code> via <code>getUpgradeHolder</code> and set the allowed upgrade types. After that, you can pass on that upgrade holder to the different energy holders, if you have one.</p>"},{"location":"addon/blocks/tileentity/upgrades/#calculating-upgraded-values","title":"Calculating upgraded values","text":"<p>While the energy holder automatically changes it's <code>maxEnergy</code> or <code>energyConsumption</code> values, you might want to implement your own logic that is called whenever upgrades change. To do this, you can either:</p> <ul> <li>Override the <code>reload</code> method in your TileEntity (make sure to keep the super call) and retrieve the current upgrade modifier   for a certain upgrade type by calling <code>UpgradeHolder#getValue(UpgradeType)</code>. (The reload method is called whenever an   upgrades were added or removed and when reloading configs.)</li> <li>Use <code>UpgradeHolder.getValueProvider(UpgradeType)</code> to get a provider that will automatically update whenever the upgrade modifier   changes.</li> </ul> Example Using reload function<pre><code>override fun reload() {\n    super.reload()\n    maxIdleTime = (IDLE_TIME / upgradeHolder.getValue(UpgradeType.SPEED)).toInt()\n}\n</code></pre> Using value provider<pre><code>val maxIdleTime by upgradeHolder.getValueProvider(UpgradeType.SPEED) { (IDLE_TIME / it).toInt() }\n</code></pre>"},{"location":"addon/blocks/tileentity/upgrades/#using-the-upgradesgui","title":"Using the UpgradesGui","text":"<p>The <code>UpgradesGui</code> can easily be added to your <code>TileEntityGui</code> by creating an <code>OpenUpgradesItem</code> with your <code>upgradeHolder</code>.</p> <pre><code>inner class SolarPanelGui : TileEntityGui() {\n\n    override val gui = Gui.normal()\n        .setStructure(\n            \"1 - - - - - - - 2\",\n            \"| u # # e # # # |\",\n            \"| # # # e # # # |\",\n            \"| # # # e # # # |\",\n            \"3 - - - - - - - 4\")\n        .addIngredient('e', EnergyBar(3, energyHolder))\n        .addIngredient('u', OpenUpgradesItem(upgradeHolder))\n        .build()\n\n}\n</code></pre>"},{"location":"addon/blocks/tileentity/upgrades/#creating-a-custom-upgrade-type","title":"Creating a custom Upgrade Type","text":""},{"location":"addon/blocks/tileentity/upgrades/#creating-an-upgrade-type-registry","title":"Creating an Upgrade Type Registry","text":"<p>Create an <code>UpgradeTypeRegistry</code> singleton object and annotate it with <code>@Init</code> to have it loaded during addon initialization.</p> <pre><code>@Init(stage = InitStage.PRE_PACK) // (1)!\nobject UpgradeTypes : UpgradeTypesRegistry by ExampleAddon.registry {\n\n    // (2)!\n\n}\n</code></pre> <ol> <li>Nova will load this class during addon initialization, causing your upgrade types to be registered.</li> <li>Register your upgrade types here</li> </ol> <p>Now, lets actually register an upgrade type. For that we'll need two <code>NovaItems</code>: One for the actual item that is used by players and one for the icon in the GUI, which needs to have an inventory background.</p> <p>Assuming you have these two items, you can now register your upgrade type:</p> <pre><code>@Init(stage = InitStage.PRE_PACK)\nobject UpgradeTypes {\n\n    val MY_UPGRADE_TYPE = registerUpgradeType&lt;Double&gt;(ExampleAddon, \"example_upgrade\", Items.EXAMPLE_UPGRADE, Items.GUI_EXAMPLE_UPGRADE)\n\n}\n</code></pre> <p>Info</p> <p>In the example above, the generic type <code>Double</code> specifies the type that this upgrade provides. Internally, the UpgradeType just casts the configured value from <code>YamlConfiguration#get</code>. This means that your upgrade values could also be of type 'Int', 'String' or any 'ConfigurationSerializable`.</p> <p>Now that you've registered your upgrade type, you will also need to set default values for it. For that, create a file called <code>upgrade_values.yml</code> in your <code>configs/</code> directory. Then add your upgrade values to it:</p> upgrade_values.json<pre><code>example_upgrade: [ 1.0, 1.9, 2.8, 3.7, 4.6, 5.5, 6.4, 7.3, 8.2, 9.1, 10.0 ]\n</code></pre> <p>For more information about the <code>upgrade_values.json</code> format, check out Configuration - Upgrade Values.</p>"},{"location":"addon/fonts/actionbar/","title":"Action Bar Overlay","text":"<p>Overlays follow the same concept of using fonts to render images as GUI Textures, but are a bit more difficult to implement for addon developers, as you need to create the font file yourself.</p> <p>Font files are stored under <code>assets/fonts/</code> and have this format. You might also want to take a look at our font for the jetpack energy bar overlay.</p>"},{"location":"addon/fonts/actionbar/#actionbaroverlay","title":"ActionBarOverlay","text":"<p>After creating your font, implement the <code>ActionbarOverlay</code> interface. There you'll need to provide the component to be displayed in the action bar. To improve performance, you can also override the <code>getWidth</code> function which should return the width of the overlay in pixels. Otherwise, this width will be calculated at runtime.</p> Example: JetpackOverlay <pre><code>class JetpackOverlay : ActionbarOverlay {\n\noverride var component: Component = getCurrentComponent()\n    private set\n\nvar percentage: Double = 0.0\n    set(value) {\n        require(value in 0.0..1.0)\n        if (field == value)\n            return\n\n        field = value\n        component = getCurrentComponent()\n    }\n\nprivate fun getCurrentComponent(): Component {\n    val stage = (percentage * 38).toInt()\n\n    return Component.text()\n        .move(95) // moves the cursor position to the right by 95 pixels\n        .append(Component.text(('\\uF000'.code + stage).toChar().toString()).font(\"jetpacks:energy_bar\"))\n        .build()\n}\n</code></pre> <p>The overlay can now be displayed through the <code>ActionbarOverlayManager</code>:</p> <pre><code>ActionbarOverlayManager.registerOverlay(player, overlay)\n</code></pre> <p>Info</p> <p>Nova intercepts action bar packets and appends the action bar overlay to it. This means that normal action bar text can still be displayed, even if one or more action bar overlays are active.</p>"},{"location":"addon/fonts/bossbar/","title":"Boss Bar Overlay","text":"<p>Boss bar overlays are generally similar to action bar overlays, with the difference that they're rendered at boss bar position, can be moved vertically, and have a built-in way to dynamically position themselves above/below other overlays.</p>"},{"location":"addon/fonts/bossbar/#vertically-moved-fonts","title":"Vertically Moved Fonts","text":"<p>Boss bars in Minecraft generally have a fixed spacing of 19px. However, we need to be able to move overlays at 1px increments, which is why Nova gets rid of all vanilla boss bars and re-renders them using custom characters that have a boss bar texture. Additionally, we also create what we call \"vertically moved fonts\", which are variations of a font that are moved on the vertical axis.</p> <p>When creating a custom font for a boss bar overlay, you will also need to create those vertically moved font variations.</p> <p>Vertically moved fonts for <code>minecraft:default</code> will be automatically generated if the boss bar overlay is enabled in main config.</p> <p>After you've created your vertically moved fonts, you can start implementing the boss bar overlay in code. For that, you'll need to create a <code>BossBarOverlayCompound</code> consisting of at least one <code>BossBarOverlay</code>.</p>"},{"location":"addon/fonts/bossbar/#bossbaroverlay","title":"BossBarOverlay","text":"<p>Each <code>BossBarOverlay</code> defines a <code>Component</code> to be rendered at one specific vertical position.</p> property description offset The vertical offset of this <code>BossBarOverlay</code> inside the <code>BossBarOverlayCompound</code>. centerX The x coordinate at which the component should be centered at, with 0 being the middle of the screen. Can be null if no centering logic should be applied. component The component to display. <p>Similar to action bar overlays, you can override the <code>getWidth</code> and also the <code>getVerticalRange</code> methods to improve performance.</p>"},{"location":"addon/fonts/bossbar/#bossbaroverlaycompound","title":"BossBarOverlayCompound","text":"<p>A <code>BossBarOverlayCompound</code> is a collection of <code>BossBarOverlays</code>. The overlays in this compound will never be seperated.</p> property description overlays The list of <code>BossBarOverlays</code> that are part of the <code>BossBarOverlayCompound</code>. positioning The <code>BarPositioning</code> that specifies at which position the <code>BossBarOverlayCompound</code> should be rendered. hasChanged Whether any component of the included overlays have been changed and should be re-rendered. If you set this boolean to true, the <code>BossBarOverlayManager</code> will update your overlay and set the boolean to false again. <p>The <code>BossBarOverlayCompound</code> can then be registered: <pre><code>BossBarOverlayManager.registerOverlay(player, compound)\nBossBarOverlayManager.unregisterOverlay(player, compound)\n</code></pre></p>"},{"location":"addon/fonts/bossbar/#barpositioning","title":"BarPositioning","text":"<p>The <code>BarPositioning</code> determines where your overlay should be rendered. You can choose between <code>BarPositioning.Fixed</code> and <code>BarPositioning.Dynamic</code>, where the latter will automatically move your overlay to prevent it from overlapping with other overlays or vanilla boss bars. Both types of positioning also allow you to define <code>BarMatchers</code>, which are used to determine whether your overlay should be placed above or below another overlay. <code>BarMatchers</code> can be both hard-coded or deserialized from a yaml configuration using <code>ConfigurationSection.getDeserialized&lt;BarMatcher&gt;(path)</code>. See Configuration - WAILA Positioning for a more detailed explanation.</p>"},{"location":"addon/fonts/fonts/","title":"Fonts","text":""},{"location":"addon/fonts/fonts/#importance-of-custom-fonts","title":"Importance of custom fonts","text":"<p>Custom fonts play an important role in server-side modding, because they allow you to display your textures basically anywhere on the screen. They allow you to create custom hud elements, gui textures, and much more.</p>"},{"location":"addon/fonts/fonts/#font-format","title":"Font format","text":"<p>To properly use features based on custom fonts, it's important to understand fonts in Minecraft work.  </p> <p>In vanilla Minecraft, you can create custom fonts with resource packs. Those fonts are json files located under <code>assets/&lt;namespace&gt;/font/</code> with the following structure:</p> assets/namespace/font/my_font.json<pre><code>{\n  \"providers\": [ // (1)!\n    {\n      \"type\": \"\" // (2)!\n      ... // (3)!\n    },\n    ... // (4)!\n  ]\n}\n</code></pre> <ol> <li>An array of providers. The amount of font providers a font can have is unlimited.    A provider itself can provide as many characters as you want it to.</li> <li>The type of the font provider. Possible options: <code>bitmap</code>, <code>unihex</code>, <code>ttf</code>, <code>space</code> (see below)</li> <li>Additional keys to configure the font provider</li> <li>Additional providers</li> </ol> Provider type Description Importance Usage (in Nova and addons) <code>bitmap</code> Characters are read from a <code>png</code> file. High Allows you to create custom hud elements and gui textures like described above. <code>space</code> Defines space widths. High Allows negative spaces<sup>1</sup> and sub-gui-scale movements<sup>2</sup> of characters. <code>unihex</code> Characters are stored in a text-based format, where each line is a hexadecimal string representing a binary black and white texture. Low Unimportant for addon developers <code>ttf</code> Reads characters from a <code>ttf</code> or <code>otf</code> file. Unsupported<sup>3</sup> None <p>More information about the font file format can be found on the Minecraft wiki.</p>"},{"location":"addon/fonts/fonts/#custom-fonts-in-nova","title":"Custom fonts in Nova","text":""},{"location":"addon/fonts/fonts/#creating-custom-fonts","title":"Creating custom fonts","text":"<p>In Nova, you can either:</p> <ul> <li>Add font files to your asset pack under <code>fonts/</code> using the vanilla font format.</li> <li>Generate font files during resource pack generation using FontContent.</li> </ul>"},{"location":"addon/fonts/fonts/#using-custom-fonts","title":"Using custom fonts","text":"<p>Using adventure components, you can easily change the font of any text:</p> <pre><code>Component.text(\"A\").font(\"my_font\")\n</code></pre>"},{"location":"addon/fonts/fonts/#horizontal-movement","title":"Horizontal movement","text":"<p>Nova also has built-in (negative) spaces in the <code>minecraft:default</code> font, so you will not have to implement those yourself. To generate a movement string, you can use <code>MoveCharacters.getMovingString(distance)</code> or directly get a  component using <code>MoveCharacters.getMovingComponent(distance)</code>.</p> <p>To calculate the width of a component, use <code>CharSizes.calculateComponentWidth(component, lang)</code> or get even more information using <code>CharSizes.calculateComponentSize(component, lang)</code>.</p> <p>Nova also provides some useful extension functions to make all of this easier:</p> Extension function Description <code>ComponentBuilder.move(distance)</code> Appends move characters of the given distance. <code>ComponentBuilder.moveToStart(lang)</code> Appends move characters that match the negative width of the current text, essentially moving the \"cursor\" back to where it started. <code>ComponentBuilder.moveToCenter(lang)</code> Appends move characters that match half of the negative width of the current text, essentially moving the \"cursor\" to the middle of the text. <code>ComponentBuilder.moveTo(afterStart, lang)</code> Appends move characters that match the negative width of the current text plus the <code>afterStart</code> value, essentially moving the \"cursor\" by the given distance after the point where it originally started."},{"location":"addon/fonts/fonts/#vertical-movement","title":"Vertical movement","text":"<p>Moving text along the vertical axis is a bit more difficult to achieve. Currently, the only way to do this in Nova is to generate vertically moved variations of a font. To do that, request those variations during the resource pack build process using MovedFontContent.</p> <pre><code>builder.getHolder&lt;MovedFontContent&gt;().requestMovedFonts(ResourcePath(\"namespace\", \"name\"), 0..19)\n</code></pre> <p>During runtime, you can then create a vertically moved component using <code>MovedFonts.moveVertically(component, distance)</code>.</p> <p>How are vertically moved fonts generated?</p> <p>The <code>bitmap</code> provider has an <code>ascent</code> property. The generated variations will add to this property, so a font that is moved down by 1px will add -1 to the existing ascent value. The new fonts are named <code>&lt;original_namespace&gt;/&lt;original_name&gt;/&lt;offset&gt;</code>, so for example <code>minecraft:default/1</code> or <code>example_addon:my_font/2</code>. Unihex providers do not have such a property, so they're converted to bitmap providers first.</p> <ol> <li> <p>Negative spaces are required to move the \"cursor\" to the left before/after drawing a custom character. They allow you to draw over previous characters, which makes it possible to have, for example, a background behind text or generally more complex hud elements. They're also often required to move the texture you're trying to draw to its correct position.\u00a0\u21a9</p> </li> <li> <p>Minecraft fonts are pixel-based. On gui-scale 1, one pixel in your character corresponds to one pixel rendered on the screen. On higher gui scales, the characters are scaled accordingly. (gui-scale 2: 2x2, gui-scale 3: 3x3, etc.) Obviously, spaces need to scale accordingly. However, this creates the issue that one could only move textures at 2px intervals on gui-scale 2, or 3px intervals on gui-scale 3, etc. But with the <code>space</code> provider, it is possible to define spaces as floats like <code>0.5</code> or <code>0.25</code>, which allows a more precise positioning of your custom textures.\u00a0\u21a9</p> </li> <li> <p>This provider is not used by Mojang and is not supported by any of Nova's features such as char size calculation, bitmap font generation, or in-code generated fonts.\u00a0\u21a9</p> </li> </ol>"},{"location":"addon/fonts/guitextures/","title":"GUI Textures","text":"<p>The GUITextures registered previously can simply be accessed by calling <pre><code>val EXAMPLE_GUI = GuiTexture.of(ExampleAddon, \"example_gui\")\n</code></pre> you might then want to store them in a singleton object <code>GuiTexture</code>, similar to blocks and items.  </p> <p>In order to use a gui texture, call the <code>getTitle</code> method on it, and use the resulting title for a Gui. If you're making a <code>TileEntityGui</code>, the <code>GuiTexture</code> can be directly set in its constructor.</p>"},{"location":"addon/items/enchantments/","title":"Enchantments","text":""},{"location":"addon/items/enchantments/#enchantable-items","title":"Enchantable Items","text":"<p>To make a <code>NovaItem</code> enchantable, add the <code>Enchantable</code> item behavior.</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Enchantable)\n</code></pre> configs/example_item.yml<pre><code># The enchantment value\nenchantment_value: 10 # (1)!\n# The enchantment categories\nenchantment_categories: [\"weapon\", \"breakable\"] # (2)!\n</code></pre> <ol> <li>The enchantment value of the item. This value defines how enchantable an item is.    A higher enchantment value means more secondary and higher-level enchantments.    Vanilla enchantment values: wood: <code>15</code>, stone: <code>5</code>, iron: <code>14</code>, diamond: <code>10</code>, gold: <code>22</code>, netherite: <code>15</code></li> <li>The enchantment categories of the item. This defines which enchantments can be applied to this item.</li> </ol>"},{"location":"addon/items/enchantments/#working-with-enchantable-items","title":"Working with enchantable items","text":"<p>Utility functions to work with enchantable items can be found in the companion object of <code>Enchantable</code>. Those utility functions can be used for both vanilla and custom items and both vanilla and custom enchantments.</p> <p>Use Nova's <code>Enchantment</code> class</p> <p>Since Nova provides wrappers for vanilla enchantments, you will not need to use <code>org.bukkit.enchantment.Enchantment</code> or <code>net.minecraft.world.item.enchantment.Enchantment</code> but should always use  <code>xyz.xenondevs.nova.item.enchantment.Enchantment</code> and the utility functions from the <code>Enchantable</code> companion object.</p>"},{"location":"addon/items/enchantments/#enchantments_1","title":"Enchantments","text":""},{"location":"addon/items/enchantments/#vanilla-enchantments","title":"Vanilla Enchantments","text":"<p>This is a list of all vanilla enchantments and which category they belong to. They can be obtained in code from <code>VanillaEnchantments</code>.</p> List of Vanilla Enchantments Name In Nova Category <code>minecraft:protection</code> <code>VanillaEnchantments.PROTECTION</code> <code>minecraft:armor</code> <code>minecraft:fire_protection</code> <code>VanillaEnchantments.FIRE_PROTECTION</code> <code>minecraft:armor</code> <code>minecraft:feather_falling</code> <code>VanillaEnchantments.FEATHER_FALLING</code> <code>minecraft:armor</code> <code>minecraft:blast_protection</code> <code>VanillaEnchantments.BLAST_PROTECTION</code> <code>minecraft:armor</code> <code>minecraft:projectile_protection</code> <code>VanillaEnchantments.PROJECTILE_PROTECTION</code> <code>minecraft:armor</code> <code>minecraft:respiration</code> <code>VanillaEnchantments.RESPIRATION</code> <code>minecraft:armor_head</code> <code>minecraft:aqua_affinity</code> <code>VanillaEnchantments.AQUA_AFFINITY</code> <code>minecraft:armor_head</code> <code>minecraft:thorns</code> <code>VanillaEnchantments.THORNS</code> <code>minecraft:armor_chest</code> <code>minecraft:swift_sneak</code> <code>VanillaEnchantments.SWIFT_SNEAK</code> <code>minecraft:armor_legs</code> <code>minecraft:depth_strider</code> <code>VanillaEnchantments.DEPTH_STRIDER</code> <code>minecraft:armor_feet</code> <code>minecraft:frost_walker</code> <code>VanillaEnchantments.FROST_WALKER</code> <code>minecraft:armor_feet</code> <code>minecraft:soul_speed</code> <code>VanillaEnchantments.SOUL_SPEED</code> <code>minecraft:armor_feet</code> <code>minecraft:binding_curse</code> <code>VanillaEnchantments.BINDING_CURSE</code> <code>minecraft:wearable</code> <code>minecraft:sharpness</code> <code>VanillaEnchantments.SHARPNESS</code> <code>minecraft:weapon</code> <code>minecraft:smite</code> <code>VanillaEnchantments.SMITE</code> <code>minecraft:weapon</code> <code>minecraft:bane_of_arthropods</code> <code>VanillaEnchantments.BANE_OF_ARTHROPODS</code> <code>minecraft:weapon</code> <code>minecraft:knockback</code> <code>VanillaEnchantments.KNOCKBACK</code> <code>minecraft:weapon</code> <code>minecraft:fire_aspect</code> <code>VanillaEnchantments.FIRE_ASPECT</code> <code>minecraft:weapon</code> <code>minecraft:looting</code> <code>VanillaEnchantments.LOOTING</code> <code>minecraft:weapon</code> <code>minecraft:sweeping</code> <code>VanillaEnchantments.SWEEPING</code> <code>minecraft:weapon</code> <code>minecraft:efficiency</code> <code>VanillaEnchantments.EFFICIENCY</code> <code>minecraft:digger</code> <code>minecraft:silk_touch</code> <code>VanillaEnchantments.SILK_TOUCH</code> <code>minecraft:digger</code> <code>minecraft:fortune</code> <code>VanillaEnchantments.FORTUNE</code> <code>minecraft:digger</code> <code>minecraft:power</code> <code>VanillaEnchantments.POWER</code> <code>minecraft:bow</code> <code>minecraft:punch</code> <code>VanillaEnchantments.PUNCH</code> <code>minecraft:bow</code> <code>minecraft:flame</code> <code>VanillaEnchantments.FLAME</code> <code>minecraft:bow</code> <code>minecraft:infinity</code> <code>VanillaEnchantments.INFINITY</code> <code>minecraft:bow</code> <code>minecraft:multishot</code> <code>VanillaEnchantments.MULTISHOT</code> <code>minecraft:crossbow</code> <code>minecraft:quick_charge</code> <code>VanillaEnchantments.QUICK_CHARGE</code> <code>minecraft:crossbow</code> <code>minecraft:piercing</code> <code>VanillaEnchantments.PIERCING</code> <code>minecraft:crossbow</code> <code>minecraft:unbreaking</code> <code>VanillaEnchantments.UNBREAKING</code> <code>minecraft:breakable</code> <code>minecraft:mending</code> <code>VanillaEnchantments.MENDING</code> <code>minecraft:breakable</code> <code>minecraft:luck_of_the_sea</code> <code>VanillaEnchantments.LUCK_OF_THE_SEA</code> <code>minecraft:fishing_rod</code> <code>minecraft:lure</code> <code>VanillaEnchantments.LURE</code> <code>minecraft:fishing_rod</code> <code>minecraft:loyalty</code> <code>VanillaEnchantments.LOYALTY</code> <code>minecraft:trident</code> <code>minecraft:impaling</code> <code>VanillaEnchantments.IMPALING</code> <code>minecraft:trident</code> <code>minecraft:riptide</code> <code>VanillaEnchantments.RIPTIDE</code> <code>minecraft:trident</code> <code>minecraft:channeling</code> <code>VanillaEnchantments.CHANNELING</code> <code>minecraft:trident</code> <code>minecraft:vanishing_curse</code> <code>VanillaEnchantments.VANISHING_CURSE</code> <code>minecraft:vanishing</code>"},{"location":"addon/items/enchantments/#custom-enchantments","title":"Custom Enchantments","text":"<p>To create a custom enchantment, you'll need to create an <code>EnchantmentRegistry</code>:</p> Enchantments.kt<pre><code>@Init(stage = InitStage.PRE_PACK) // (1)!\nobject Enchantments : EnchantmentRegistry by ExampleAddon.registry {\n\n    val EXAMPLE_ENCHANTMENT = enchantment(\"curse_of_gigantism\")\n        .categories(/*...*/) // (2)!\n        .maxLevel(/*...*/) // (3)!\n        .tableDiscoverable(/*...*/) // (4)!\n        .tableLevelRequirement(/*...*/) // (5)!\n        .rarity(/*...*/) // (6)!\n        .curse(/*...*/) // (7)!\n        .incompatibleWith(/*...*/) // (8)!\n\n        // Without functionality (not yet implemented):\n        .treasure(/*...*/) // (9)!\n        .tradeable(/*...*/) // (10)!\n\n        .register()\n\n}\n</code></pre> <ol> <li>Nova will load this class during addon initialization, causing your enchantment categories to be registered.</li> <li>The categories that this enchantment belongs to. Can be one or multiple. Can be custom or vanilla.</li> <li>The maximum level of this enchantment. Defaults to <code>1</code>.</li> <li>Whether this enchantment can be found in the enchantment table.</li> <li>The level requirement range of this enchantment in the enchantment table.    This defines whether an enchantment can be displayed in an enchantment table slot of a certain level.    You either specify an <code>IntRange</code>, or a lambda that accepts the enchantment level and returns an <code>IntRange</code>.    Defaults to <code>{ val min = 1 + it * 10; min..(min + 5) }</code> (vanilla behavior).</li> <li>A weight value used to determine how likely this enchantment is to be found in the enchantment table.    Common: <code>10</code>, Uncommon: <code>5</code>, Rare: <code>2</code>, Very Rare: <code>1</code>. Defaults to <code>10</code>.</li> <li>Whether this enchantment is a curse. Defaults to <code>false</code>.</li> <li>Enchantments that this enchantment is incompatible with. Alternatively, you can also specify a list of enchantments    that this enchantment is compatibly with, or set a lambda that accepts an enchantment and returns whether it is compatible.</li> <li>Whether this enchantment is a treasure enchantment. Defaults to <code>false</code>.    Note: There is currently no built-in way to make treasure enchantments spawn in the world</li> <li>Whether this enchantment is tradeable. Defaults to <code>false</code>.     Note: Not yet implemented</li> </ol>"},{"location":"addon/items/enchantments/#enchantment-categories","title":"Enchantment Categories","text":"<p>Enchantment categories are groups of enchantments for certain types of items. In vanilla, the enchantment categories themselves define which item types they apply to, but in Nova, the item itself chooses which enchantment categories it wants to be in via the <code>Enchantable</code> item behavior.</p>"},{"location":"addon/items/enchantments/#vanilla-enchantment-categories","title":"Vanilla Enchantment Categories","text":"<p>This is a list of all vanilla enchantment categories and the enchantments they contain. They can be obtained in code from <code>VanillaEnchantmentCategories</code> or referenced in, for example, the <code>enchantment_categories</code> config entry using their namespaced name.</p> List of Vanilla Enchantment Categories Name In Nova Description Enchantments <code>minecraft:armor</code> <code>VanillaEnchantmentCategories.ARMOR</code> Enchantments for all armor. <code>minecraft:protection</code>, <code>minecraft:fire_protection</code>, <code>minecraft:blast_protection</code>, <code>minecraft:projectile_protection</code> <code>minecraft:armor_feet</code> <code>VanillaEnchantmentCategories.ARMOR_FEET</code> Enchantments for boots. <code>minecraft:feather_falling</code>, <code>minecraft:depth_strider</code>, <code>minecraft:frost_walker</code>, <code>minecraft:soul_speed</code> <code>minecraft:armor_legs</code> <code>VanillaEnchantmentCategories.ARMOR_LEGS</code> Enchantments for leggings. <code>minecraft:swift_sneak</code> <code>minecraft:armor_chest</code> <code>VanillaEnchantmentCategories.ARMOR_CHEST</code> Enchantments for chestplates. <code>minecraft:thorns</code> <code>minecraft:armor_head</code> <code>VanillaEnchantmentCategories.ARMOR_HEAD</code> Enchantments for helmets. <code>minecraft:respiration</code>, <code>minecraft:aqua_affinity</code> <code>minecraft:weapon</code> <code>VanillaEnchantmentCategories.WEAPON</code> Enchantments for swords. <code>minecraft:sharpness</code>, <code>minecraft:smite</code>, <code>minecraft:bane_of_arthropods</code>, <code>minecraft:knockback</code>, <code>minecraft:fire_aspect</code>, <code>minecraft:looting</code>, <code>minecraft:sweeping</code> <code>minecraft:digger</code> <code>VanillaEnchantmentCategories.DIGGER</code> Enchantments for tools axes, hoes, pickaxes and shovels. <code>minecraft:efficiency</code>, <code>minecraft:silk_touch</code>, <code>minecraft:fortune</code> <code>minecraft:fishing_rod</code> <code>VanillaEnchantmentCategories.FISHING_ROD</code> Enchantments for the fishing rod. <code>minecraft:luck_of_the_sea</code>, <code>minecraft:lure</code> <code>minecraft:trident</code> <code>VanillaEnchantmentCategories.TRIDENT</code> Enchantments for the trident. <code>minecraft:loyalty</code>, <code>minecraft:impaling</code>, <code>minecraft:riptide</code>, <code>minecraft:channeling</code> <code>minecraft:breakable</code> <code>VanillaEnchantmentCategories.BREAKABLE</code> Enchantments for items with durability. <code>minecraft:unbreaking</code>, <code>minecraft:mending</code> <code>minecraft:BOW</code> <code>VanillaEnchantmentCategories.BOW</code> Enchantments for the bow. <code>minecraft:power</code>, <code>minecraft:punch</code>, <code>minecraft:flame</code>, <code>minecraft:infinity</code> <code>minecraft:WEARABLE</code> <code>VanillaEnchantmentCategories.WEARABLE</code> Enchantments for all equipable items, including armor. <code>minecraft:binding_curse</code> <code>minecraft:CROSSBOW</code> <code>VanillaEnchantmentCategories.CROSSBOW</code> Enchantments for the crossbow. <code>minecraft:multishot</code>, <code>minecraft:quick_charge</code>, <code>minecraft:piercing</code> <code>minecraft:VANISHABLE</code> <code>VanillaEnchantmentCategories.VANISHABLE</code> Enchantments for vanishable items<sup>1</sup>. <code>minecraft:vanishing_curse</code>"},{"location":"addon/items/enchantments/#custom-enchantment-categories","title":"Custom Enchantment Categories","text":"<p>Of course, you can also create your own enchantment categories. To do this, you will need to create an <code>EnchantmentCategory</code> registry:  EnchantmentCategories.kt<pre><code>@Init(stage = InitStage.PRE_PACK) // (1)! \nobject EnchantmentCategories EnchantmentCategoryRegistry by ExampleAddon.registry {\n\n    val EXAMPLE_CATEGORY = registerEnchantmentCategory(\"example_category\")\n\n}\n</code></pre></p> <ol> <li>Nova will load this class during addon initialization, causing your enchantment categories to be registered.</li> </ol> <p>For flexibility reasons, enchantments add themselves to categories and not the other way around.</p> <p>To apply your enchantment category to an item, you'll need to use the <code>Enchantable</code> item behavior. (see above) configs/example_item.yml<pre><code>enchantment_categories: [\"example_addon:example_category\"]\n</code></pre></p> Applying a custom category to vanilla items <p>If you want your new category to apply to vanilla items, you'll need to define that in the category itself:</p> <pre><code>@Init(stage = InitStage.PRE_PACK)\nobject Items EnchantmentCategoryRegistry by ExampleAddon.registry {\n\n    val EXAMPLE_CATEGORY = enchantmentCategory(\"example_category\")\n        .enchants(Material.DIRT) // (1)!\n        .enchants(Tag.LEAVES) // (2)!\n        .register()\n\n}\n</code></pre> <ol> <li>Makes the custom category apply to dirt.</li> <li>Makes the custom category apply to all leaves.</li> </ol> <ol> <li> <p>All items or items of blocks that implement the <code>Vanishable</code> interface, which is all tools and equipment.   The <code>VANISHABLE</code> enchantment category also affects all items that are affected by the <code>BREAKABLE</code> category.\u00a0\u21a9</p> </li> </ol>"},{"location":"addon/items/item-behaviors/","title":"Item Behaviors","text":"<p>Item behaviors are used to add functionality to items. There are some default implementations, but you can also create your own.</p>"},{"location":"addon/items/item-behaviors/#default-item-behaviors","title":"Default Item Behaviors","text":"Default Item Behaviors <p>These are the default item behaviors that Nova provides:</p> ConsumableWearableToolDamageableEnchantableStrippingFlatteningExtinguishingTillingFuelFireResistantChargeable <p>Allows you to make a custom consumable item. Example:</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Consumable)\n</code></pre> configs/example_item.yml<pre><code># The type of food (normal, fast, always_eatable).\nfood_type: normal\n# The time it takes for the food to be consumed, in ticks.\nconsume_time: 40\n# The nutrition value this food provides.\nnutrition: 4\n# The saturation modifier this food provides.\nsaturation_modifier: 0.3\n# The amount of health to be restored immediately.\ninstant_health: 5\n# A list of effects to apply to the player when this food is consumed.\neffects: []\n</code></pre> Saturation &amp; Nutrition <p>This is how the <code>saturation_modifier</code> and <code>nutrition</code> value affects your player's food level and saturation: foodLevel<pre><code>min(player.foodLevel + options.nutrition, 20)\n</code></pre> saturation<pre><code>min(saturation + nutrition * saturationModifier * 2.0f, foodLevel)\n</code></pre></p> <p>You can find the <code>nutrition</code> and <code>saturationModifier</code> for vanilla items by decompiling the mojang-mapped class <code>net.minecraft.world.food.Foods</code>.</p> Example Effect <pre><code>effects:\n# A level 1 speed effect that lasts 10 seconds.\n- type: speed # (1)!\n  duration: 200 # (2)!\n  amplifier: 0 # (3)!\n  ambient: true # (4)!\n  particles: true # (5)!\n  icon: true # (6)!\n</code></pre> <ol> <li>The type of the effect.    A list of all effect types can be found here.</li> <li>The duration of the effect in ticks.</li> <li>The amplifier of the effect. An amplifier of 0 is a level 1 effect.</li> <li>Whether the effect is ambient or not.    Default value: <code>true</code></li> <li>Whether the effect has particles or not.    Default value: <code>true</code></li> <li>Whether the effect has an icon or not.    Default value: <code>true</code></li> </ol> <p>Allows you to make an item that can be equipped in a players armor slots.</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Wearable(ArmorType.CHESTPLATE, Sound.ITEM_ARMOR_EQUIP_DIAMOND))\n</code></pre> configs/example_item.yml<pre><code>armor: 8.0\narmor_toughness: 3.0\nknockback_resistance: 2.0\n</code></pre> <p>If you need some examples for the <code>armor</code>, <code>armorToughness</code> and <code>knockback_resistance</code> values, you can check out the Minecraft wiki.</p> <p>See Tools.</p> <p>Makes an item damageable.</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Damageable)\n</code></pre> configs/example_item.yml<pre><code># The maximum durability of the item.\nmax_durability: 200\n# The damage the item takes when it is used to attack an entity.\nitem_damage_on_attack_entity: 1\n# The damage the item takes when it is used to break a block.\nitem_damage_on_break_block: 2\n# The repair ingredient that can be used in anvils.\nrepair_ingredient: \"minecraft:paper\"\n</code></pre> <p>See Enchantments.</p> <p>Gives your item the ability to strip wood, logs, oxidization layers and wax.</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Stripping)\n</code></pre> <p>Gives your item the ability to create dirt paths.</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Flattening)\n</code></pre> <p>Gives your item the ability to extinguish campfires.</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Extinguishing)\n</code></pre> <p>Gives your item the ability to till dirt.</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Tilling)\n</code></pre> <p>Allows your item to be used as fuel in furnaces.</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Fuel)\n</code></pre> configs/example_item.yml<pre><code>burn_time: 20 # (1)!\n</code></pre> <ol> <li>The burn time of the item in ticks.</li> </ol> <p>Makes your item fire resistant.</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", FireResistant)\n</code></pre> <p>Allows you to make an item that stores energy. This should mostly be used with other custom item behaviors, since there is no default implementation for consuming energy.</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Chargeable)\n</code></pre> <p>The above example uses the durability bar to display the item's charge. If you don't want this, you can disable this behavior:</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Chargeable(false))\n</code></pre> <p>The energy capacity can then be configured in the material config file:</p> configs/example_item.yml<pre><code>max_energy: 100000\n</code></pre> Using hardcoded material options (not recommended) <p>If you don't want your material options to be configurable or your specific use-case does not work well with configurable values, you can using the factory functions named after the material options interfaces. For example, this is how you would create hardcoded <code>ToolOptions</code>:</p> Hardcoded ToolOptions<pre><code>@OptIn(HardcodedMaterialOptions::class)\nval toolOptions = ToolOptions(\n    ToolLevel.STONE,\n    ToolCategory.PICKAXE,\n    breakSpeed = 12.0,\n    attackDamage = 4.0,\n    attackSpeed = 1.0,\n    canSweepAttack = false,\n    canBreakBlocksInCreative = false\n)\n</code></pre> <p>Since hardcoding those values is strongly discouraged, you need to opt-in via the <code>@OptIn(HardcodedMaterialOptions::class)</code> annotation.</p>"},{"location":"addon/items/item-behaviors/#custom-item-behaviors","title":"Custom Item Behaviors","text":"<p>There are of course a lot of cases that don't fit into any of the default item behaviors which is why you can easily make your own. Just create a new class and implement the <code>ItemBehavior</code> interface. Instead of registering event handlers, you can override the <code>handle...()</code> functions, which are invoked when something is done with an <code>ItemStack</code> of a <code>NovaItem</code> with that behavior.</p>"},{"location":"addon/items/item-behaviors/#fun-getvanillamaterialproperties","title":"<code>fun getVanillaMaterialProperties</code>","text":"<p>Gets a list of <code>VanillaMaterialProperty</code>s. Vanilla material properties define what properties the item should have client-side. Based on the given properties, a corresponding vanilla material will be used. Nova will always try to find a vanilla material with the exact same properties as requested. If there is no such material, Nova might also choose a vanilla material with more vanilla material properties. If there is no material that has all requested properties, properties of low importance will be ignored.</p> <p>These are the available vanilla material properties:</p> Property Name Effect <code>DAMAGEABLE</code> The item has a durability bar. <code>FIRE_RESISTANT</code> The item will not catch on fire. <code>CREATIVE_NON_BLOCK_BREAKING</code> The item cannot break blocks in creative mode. <code>CONSUMABLE_NORMAL</code> The item can be consumed normally. <code>CONSUMABLE_ALWAYS</code> The item can always be consumed. <code>CONSUMABLE_FAST</code> The item can be consumed fast, the eating process start without a delay. <code>HELMET</code> The item can render a custom helmet texture. <code>CHESTPLATE</code> The item can render a custom chestplate texture. <code>LEGGINGS</code> The item can render a custom leggings texture. <code>BOOTS</code> The item can render a custom boots texture."},{"location":"addon/items/item-behaviors/#fun-getattributemodifiers","title":"<code>fun getAttributeModifiers</code>","text":"<p>Gets a list of <code>AttributeModifiers</code>.</p> Example Attribute Modifiers<pre><code>override fun getAttributeModifiers(): List&lt;AttributeModifier&gt; =\n    listOf(AttributeModifier(\n        name = \"Example Attribute Modifier (${novaMaterial.id}})\", // (1)!\n        attribute = Attributes.MOVEMENT_SPEED, // (2)!\n        operation = Operation.MULTIPLY_TOTAL, // (3)!\n        value = 0.1, // (4)!\n        showInLore = true, // (5)!\n        EquipmentSlot.MAINHAND // (6)!\n    ))\n</code></pre> <ol> <li>The name of the attribute modifier. This is also used to create a <code>UUID</code> for your <code>AttributeModifier</code> to distinguish    it from other <code>AttributeModifiers</code>. It is important that different <code>AttributeModifier</code>s have different <code>UUID</code>s.</li> <li>The attribute that should be modified.</li> <li>The operation that should be done.</li> <li>The value that should be used for the operation. In this case, the movement speed will be increased by 10%.</li> <li>Whether the attribute modifier should be shown in the <code>ItemStack</code>'s lore.</li> <li>The equipment slot(s) that this attribute modifier should be applied to.</li> </ol>"},{"location":"addon/items/item-behaviors/#fun-getdefaultcompound","title":"<code>fun getDefaultCompound</code>","text":"<p>This function is used to specify default CBF data for all <code>ItemStacks</code> of <code>NovaItems</code> that use this <code>ItemBehavior</code>. All default compounds from all <code>ItemBehehaviors</code> are merged together and always applied to new <code>ItemStack</code> of that type.</p>"},{"location":"addon/items/item-behaviors/#fun-updatepacketitemdata","title":"<code>fun updatePacketItemData</code>","text":"<p>This method is called every time a packet that includes an <code>ItemStack</code> of a material with this <code>ItemBehavior</code> is sent to a player. Here, you can customize how the item is displayed for the player. Using the given <code>PacketItemData</code>, you can modify things like the display name, lore (normal and advanced tooltips), the durability bar and more.</p> <p>Confused? Take a look at Understanding Packet Items.</p>"},{"location":"addon/items/item-behaviors/#itembehaviorholder-and-itembehaviorfactory","title":"ItemBehaviorHolder and ItemBehaviorFactory","text":"<p><code>ItemBehaviorHolder</code> is a sealed interface with two implementations: <code>ItemBehavior</code> and <code>ItemBehaviorFactory</code>, where <code>ItemBehaviorFactory</code> creates <code>ItemBehavior</code> instances based on a <code>NovaItem</code> instance. This allows you to create factories for your <code>ItemBehaviors</code> that read from the item's config file.  </p> Example custom ItemBehavior with ItemBehaviorFactory<pre><code>class MyBehavior(value: Provider&lt;Int&gt;) : ItemBehavior {\n\n   private val value by value // (1)!\n\n   companion object : ItemBehaviorFactory&lt;MyBehavior&gt; {\n\n      override fun create(item: NovaItem): MyBehavior {\n         return MyBehavior(item.config.entry&lt;Int&gt;(\"value\"))\n      }\n\n   }\n\n}\n</code></pre> <ol> <li>Delegating to the obtained provider makes this property config-reloadable without any additional code.</li> </ol> <p>Now, you could, for example, assign the same <code>ItemBehaviorFactory</code> to multiple items, while still accessing different configs.</p> <pre><code>@Init(stage = InitStage.PRE_PACK) // (1)!\nobject Items : ItemRegistry by ExampleAddon.registry {\n\n    val EXAMPLE_ITEM_1 = registerItem(\"example_1\", MyBehavior) // configs/example_1.yml\n    val EXAMPLE_ITEM_2 = registerItem(\"example_2\", MyBehavior) // configs/example_2.yml\n    val EXAMPLE_ITEM_3 = registerItem(\"example_3\", MyBehavior) // configs/example_3.yml\n\n\n}\n</code></pre> <ol> <li>Nova will load this class during addon initialization, causing the item fields to be initialized and your items to be registered.</li> </ol>"},{"location":"addon/items/item-behaviors/#item-data","title":"Item Data","text":"<p>Data for Nova's ItemStacks is stored in a <code>NamespacedCompound</code>, which serializes data using CBF. You can retrieve the <code>NamespacedCompound</code> of an <code>ItemStack</code> by calling <code>ItemStack.novaCompound</code>.</p> <p>NamespacedCompound</p> <p>Unlike <code>ItemStack.itemMeta</code>, this <code>NamespacedCompound</code> is not a copy, so any changes you make to it will be reflected in the <code>ItemStack</code>. However, the <code>NamespacedCompound</code> inside the <code>ItemStack</code> might be copied during normal tick logic, so you should not rely on the same (NMS) <code>ItemStack</code> to always contain the same <code>NamespacedCompound</code> instance. For example, while modifying the <code>ItemStack</code> retrieved during an <code>PlayerInteractEvent</code> a few ticks later will still change the <code>ItemStack</code> in the world, modifying the <code>NamespacedCompound</code> you've retrieved during the event will not affect the <code>ItemStack</code>. Instead, you'll need to retreive the <code>NovaCompound</code> again.</p> <p>Alternatively, you can also read and write data using <code>ItemStack.storeData</code> and <code>ItemStack.retrieveData</code>, which write data to the <code>NamespacedCompound</code> for you.</p> <p>Inspecting Item Data</p> <p>You can also run the command <code>/nova debug itemData</code> to take a look at the data of the item stack in your hand. Some of this data might be of an unknown type and will be displayed in binary format. The type will be known after <code>NamespacedCompound.get</code> and <code>NamespacedCompound.set</code> calls.</p>"},{"location":"addon/items/registering-items/","title":"Registering Items","text":""},{"location":"addon/items/registering-items/#creating-an-item-registry","title":"Creating an Item Registry","text":"<p>After creating the item asset, they need to be registered in code. To do this, you will need to create a registry for your items. This can be done by creating a singleton object that implements <code>ItemRegistry</code>. In order to not need to implement the <code>getAddon</code> method, you can delegate to <code>ExampleAddon.registry</code>. All items need to be registered during initialization, so you can either load the class from the <code>init</code> block of your addon or annotate your registry with <code>@Init</code>.</p> <p>Your singleton object might then look like this: <pre><code>@Init(stage = InitStage.PRE_PACK) // (1)! \nobject Items ItemRegistry by ExampleAddon.registry {\n\n    // (2)!\n\n}\n</code></pre></p> <ol> <li>Nova will load this class during addon initialization, causing your items to be registered.</li> <li>Register your items here</li> </ol>"},{"location":"addon/items/registering-items/#registering-items","title":"Registering Items","text":"<p>Using the existing methods in <code>ItemRegistry</code>, you can now register your items. For that, you can choose between the builder pattern accessed via <code>item(id)</code> or use the <code>register...</code> methods.</p> <p>If you don't want your item to have a name, you can use the <code>registerUnnamedItem</code> method. If you don't want it to pop up in <code>/nova give</code>, register it with <code>registerUnnamedHiddenItem</code>. This can be useful when registering GUI items.</p> <p>When using the builder pattern, you will need to call <code>register</code> at the end of your chain.</p> <p>Registering our ruby from before, your <code>Items</code> registry would look like this: <pre><code>@Init(stage = InitStage.PRE_PACK) // (1)!\nobject Items : ItemRegistry by ExampleAddon.registry {\n\n    val RUBY = registerItem(\"ruby\")\n\n}\n</code></pre></p> <ol> <li>Nova will load this class during addon initialization, causing the <code>RUBY</code> field to be initialized and your item to be registered.</li> </ol>"},{"location":"addon/items/registering-items/#item-categories","title":"Item Categories","text":"<p>In order for your items to appear in the <code>/nova items</code>, they need to be in the <code>item_categories.yml</code> file in your addon resources. The structure of that file is as follows:</p> <pre><code>example_category: # (1)!\n  icon: example_addon:example_item # (2)!\n  name: \"menu.example_addon.items.category.example_category\" # (3)!\n  priority: 0 # (4)!\n  items: # (5)!\n    - example_addon:example_item\n    - example_addon:other_item\n</code></pre> <ol> <li>The id of the category. This can be useful if you want to add items to an existing category, such as <code>misc</code> from Nova    or <code>machines</code>, <code>power</code> or <code>crafting</code> from Machines.</li> <li>The tab icon in the <code>/nova items</code> GUI.</li> <li>The tab name in the <code>/nova items</code> GUI.</li> <li>Tabs of categories with a lower priority will be to the left of tabs of categories with a higher priority.</li> <li>The items that will be listed under that category in the <code>/nova items</code> GUI.</li> </ol> <p>You can register as many item categories as you want.</p> <p>Adding items to existing categories</p> <p>To add items to existing categories, just use the same category id. When multiple addons define the same category, the addon loaded first chooses the icon, name and priority.</p>"},{"location":"addon/items/tools/","title":"Tools","text":""},{"location":"addon/items/tools/#creating-tools","title":"Creating Tools","text":"<p>To create a custom tool, apply the <code>Tool</code> item behavior:</p> <pre><code>val EXAMPLE_ITEM = registerItem(\"example_item\", Tool)\n</code></pre> configs/example_item.yml<pre><code># The tool level\ntool_level: minecraft:iron\n# The tool category\ntool_category: minecraft:sword\n# The block breaking speed\nbreak_speed: 1.5\n# The attack damage\nattack_damage: 6\n# The attack speed\nattack_speed: 2.0\n# The knockback bonus\nknockback_bonus: 1\n# If sweep attacks can be performed with this tool\ncan_sweep_attack: true\n# If this tool can break blocks in creative\ncan_break_blocks_in_creative: false\n</code></pre>"},{"location":"addon/items/tools/#tool-tiers","title":"Tool Tiers","text":"<p>Each tool tier maps to a numerical tool level. Those tool levels are then used to determine whether a tool tier is good enough to break a block.</p> Tool Type Level ToolTier (Nova) No Tool 0 <code>null</code> Wooden 0 <code>VanillaToolTiers.WOOD</code> Golden 0 <code>VanillaToolTiers.GOLD</code> Stone 1 <code>VanillaToolTiers.STONE</code> Iron 2 <code>VanillaToolTiers.IRON</code> Diamond 3 <code>VanillaToolTiers.DIAMOND</code> Netherite 3 <code>VanillaToolTiers.NETHERITE</code> <p>The numerical level values are assigned to the tool tiers in the <code>tool_levels.yml</code> config file:</p> tool_levels.yml<pre><code>wood: 0\ngold: 0\nstone: 1\niron: 2\ndiamond: 3\n</code></pre>"},{"location":"addon/items/tools/#registering-a-custom-tool-tier","title":"Registering a custom tool tier","text":"<p>To register custom tool tiers, create a new <code>ToolTierRegistry</code> and annotate it with <code>@Init</code> to load it during addon initialization:</p> <pre><code>@Init(stage = InitStage.PRE_PACK) // (1)!\nobject ToolTiers : ToolTierRegistry by ExampleAddon.registry {\n\n    val EXAMPLE_TIER = registerToolTier(\"example_tier\")\n\n}\n</code></pre> <ol> <li>Nova will load this class during addon initialization, causing your tool levels to be registered.</li> </ol> <p>Then, assign a numerical tool level value to your registered tier in the <code>tool_levels.yml</code> config file:</p> tool_levels.yml<pre><code>example_tier: 4\n</code></pre> <p>The specified level of <code>4</code> would give your custom tool the ability to break all blocks that <code>DIAMOND</code> or <code>NETHERITE</code> tools could break and would also be able to break custom blocks that have a tool tier configured which resolves to a tool level of <code>4</code>. This way, your tool can even break blocks that require a custom tool tier of another addon, as long as your tool level is high enough.</p>"},{"location":"addon/items/tools/#tool-categories","title":"Tool Categories","text":"<p>Tool Categories define what type of tool your item is. They determine which blocks can be broken with which item. By default, there are six tool categories available:</p> Tool Type ToolCategory (Nova) Sword <code>VanillaToolCategories.SWORD</code> Pickaxe <code>VanillaToolCategories.PICKAXE</code> Axe <code>VanillaToolCategories.AXE</code> Shovel <code>VanillaToolCategories.SHOVEL</code> Hoe <code>VanillaToolCategories.HOE</code> Shears <code>VanillaToolCategories.SHEARS</code>"},{"location":"addon/items/tools/#registering-a-custom-tool-category","title":"Registering a custom tool category","text":"<p>To register custom tool categories, create a new <code>ToolCategoryRegistry</code> and annotate it with <code>@Init</code> to load it during addon initialization:</p> <pre><code>@Init(stage = InitStage.PRE_PACK) // (1)!\nobject ToolCategories : ToolCategoryRegistry by ExampleAddon.registry {\n\n    val EXAMPLE_CATEGORY = registerToolCategory(\"example_category\")\n\n}\n</code></pre> <ol> <li>Nova will load this class during addon initialization, causing your tool categories to be registered.</li> </ol> <p>You can then use your new tool category in the <code>BlockOptions</code> of your custom block to make those blocks only breakable with a tool of that category.</p>"},{"location":"addon/items/using-nova-item/","title":"Using NovaItem","text":""},{"location":"addon/items/using-nova-item/#getting-an-itemstack","title":"Getting an ItemStack","text":"<p>To get an ItemStack from a NovaItem, you can either call <code>createItemBuilder().get()</code> or <code>createItemStack(amount)</code>.</p>"},{"location":"addon/items/using-nova-item/#getting-itembehaviors","title":"Getting ItemBehaviors","text":"<p>Using the function <code>hasItemBehavior&lt;T&gt;()</code> and <code>getItemBehavior&lt;T&gt;()</code> you can check for and get an ItemBehavior of a certain type.</p>"},{"location":"addon/items/using-nova-item/#itemproviders","title":"ItemProviders","text":"<p>ItemProviders are just wrappers for ItemStacks, so that they can be used in InvUI GUIs. There are two different providers arrays available:</p> Name Description basicClientsideProviders The client-side providers without lore or nbt data clientsideProviders The client-side providers with lore and nbt data <p>The elements in the arrays represent the different models specified in the materials.json.</p> <p>You can also use <code>basicClientsideProvider</code> and <code>clientsideProvider</code>, which are both the first element of their array.</p>"},{"location":"addon/items/using-nova-item/#understanding-packet-items","title":"Understanding Packet Items","text":"<p>To understand the difference between a normal (server-side) and a client-side item, you first need to understand how custom items are handled in Nova. In order to be extremely flexible when it comes to changing custom model data, the underlying vanilla item type, the lore format of the item or its display name, Nova's ItemStacks do not store this information at all. All of these values are actually only applied on packet level, this can be observed by running the command <code>/data get entity @p SelectedItem</code> while holding an item from Nova: its item type will always be <code>shulker_shell</code> and it won't have any custom model data, display name or lore, even though it has one for your game. Coming back to client-side providers: These are wrappers for the ItemStacks that the client actually sees. They should only be used in cases where the ItemStack isn't actually stored anywhere, for example as a button in a GUI or as the head of a <code>FakeArmorStand</code>.  </p> <p>Info</p> <p>Generally, you should use <code>clientsideProviders</code> or <code>basicClientsideProviders</code> when working with GUIs and <code>createItemStack(amount)</code> if you need an item to give to a player.</p>"},{"location":"addon/migration-guide/0.11-0.12/","title":"Migration Guide 0.11 \u279d 0.12","text":""},{"location":"addon/migration-guide/0.11-0.12/#building","title":"Building","text":"<p>You will now need to set the kotlin compiler jvm target to <code>17</code>: build.gradle.kts<pre><code>tasks {\n    withType&lt;KotlinCompile&gt; {\n        kotlinOptions {\n            jvmTarget = \"17\"\n        }\n    }\n}\n</code></pre></p>"},{"location":"addon/migration-guide/0.11-0.12/#blockoptions","title":"BlockOptions","text":"<p>The <code>BlockOptions</code> constructor has changed. You will now need to set a list of <code>ToolCategories</code> and a <code>SoundGroup</code> instead of individual sounds. Refer to BlockOptions for more information.</p>"},{"location":"addon/migration-guide/0.11-0.12/#itembehavior","title":"ItemBehavior","text":"<p>All configurable <code>ItemBehaviors</code> have been reworked to load their data from configs using the new <code>MaterialOptions</code>. In most cases, you'll no longer need to instantiate them, but rather just use their companion object in the <code>NovaItem</code> constructor and configure them in the material-specific config file. Those properties can now be accessed in code using <code>&lt;someItemBehavior&gt;.options.&lt;someProperty&gt;</code> instead of <code>&lt;somItemBehavior&gt;.&lt;someProperty&gt;</code>. Refer to ItemBehaviors for more information.</p> <p>The <code>getLore</code> and <code>getName</code> methods have been replaced by <code>updatePacketItemData</code> which combines those two methods and adds more options.</p>"},{"location":"addon/migration-guide/0.11-0.12/#overlays","title":"Overlays","text":"<p>The <code>width</code> (BossBarOverlay, ActionBarOverlay) and <code>endY</code> (BossBarOverlay) were removed. You can still set them by overwriting the <code>getWidth</code> and <code>getEndY</code> methods, but this is no longer mandatory.</p>"},{"location":"addon/migration-guide/0.11-0.12/#misc","title":"Misc","text":"<ul> <li>Some NovaMaterialRegistry functions have been slightly changed to include the new <code>maxStackSize</code> parameter</li> <li>The <code>ToolUtils.damgeTool</code> functions have been moved to <code>DamageableUtils.damageItem</code></li> <li><code>SoundEffect</code> has been removed</li> <li><code>ValueReloadable</code> has been replaced by <code>Provider</code>.</li> <li>General refactoring: You might need to change some imports regarding item (behaviors), tools, etc.</li> </ul>"},{"location":"addon/migration-guide/0.12-0.13/","title":"Migration Guide 0.12 \u279d 0.13","text":""},{"location":"addon/migration-guide/0.12-0.13/#initialization","title":"Initialization","text":"<p>With 0.13, we bring a new way to initialize your registries and other classes. Simple annotate a class with  <code>@Init</code> and it will be loaded during the initialization phase. We recommend annotating your registry classes with it. More info</p>"},{"location":"addon/migration-guide/0.12-0.13/#the-end-of-novamaterial","title":"The end of <code>NovaMaterial</code>","text":"<p>We've decided to split <code>NovaMaterial</code> into <code>NovaItem</code> and <code>NovaBlock</code>. This allows for more flexibility, as you can now have a block that is not an item. Currently, the <code>materials.json</code> file is still used to register items and blocks, but this might be changed in the future.</p> <p>All extension functions / properties and the like have be renamed as you'd expect, i.e. <code>ItemStack.novaMaterial</code> is now <code>ItemStack.novaItem</code>, <code>Block.novaMaterial</code> is now <code>Block.novaBlock</code>, etc. Please let us know if we've missed anything.</p>"},{"location":"addon/migration-guide/0.12-0.13/#related-changes","title":"Related changes","text":"<ul> <li><code>NovaBlock</code> has been renamed to <code>BlockBehavior</code></li> <li>The <code>vanillaMaterialProperties</code> and <code>attributeModifiers</code> fields in <code>ItemBehavior</code> have been changed to getter functions</li> </ul>"},{"location":"addon/migration-guide/0.12-0.13/#registries","title":"Registries","text":"<p>We've switched all \"registry-like\" classes to Minecraft's built-in <code>Registry</code> system. We've also added builders for <code>NovaItem</code> and <code>NovaBlock</code> to make it easier to register them and to reduce future breaking changes when adding new properties.\u2122</p> <p>Therefore, we've also deprecated <code>NamespacedId</code> in favor of Mojang's <code>ResourceLocation</code>.</p> <p>Check out the registering items, registering blocks sections again.</p>"},{"location":"addon/migration-guide/0.12-0.13/#related-changes_1","title":"Related changes","text":"<ul> <li>With the new registry system, all default entries are now in separate classes. If they're related to vanilla minecraft,   the classes are prefixed with <code>Vanilla</code> (such as <code>VanillaToolCategories</code>, <code>VanillaToolTiers</code>, etc.). Nova's content is   prefixed with <code>Default</code> (such as <code>DefaultGuiMaterials</code>, <code>DefaultGuiTextures</code>, <code>DefaultItems</code>, etc.).</li> </ul>"},{"location":"addon/migration-guide/0.12-0.13/#itemstack-data","title":"ItemStack data","text":"<p>We've changed how data is stored in <code>ItemStacks</code>. Previously, this used Bukkit's <code>PersistentDataContainer</code>, but we've  changed this to use our custom <code>CBFCompoundTag</code>. Using <code>ItemStack.novaCompound</code>, you can now retrieve a <code>NamespacedCompound</code> to store data in. This should generally improve performance, as we won't need to (de)serialize data every time it's accessed, as the data is now cached in our new NBT tag type.</p> <p>You can still use the <code>ItemStack.retrieveData</code> and <code>ItemStack.storeData</code> extension functions. They will automatically move your data from the old <code>PersistentDataContainer</code> to the new <code>CBFCompoundTag</code>.</p>"},{"location":"addon/migration-guide/0.12-0.13/#tileentity-guis","title":"TileEntity GUIs","text":"<p>We've reworked how TileEntity GUIs work. There is no longer a lazy <code>gui</code> property in <code>TileEntity</code>, instead the GUI class is now retrieved using reflection and needs to be annotated with <code>@IndividualTileEntityGui</code> or <code>@GlobalTileEntityGui</code>. This makes TileEntity GUI's more flexible as you now have the option to have one GUI instance per player. More Info</p>"},{"location":"addon/migration-guide/0.12-0.13/#related-changes_2","title":"Related changes","text":"<ul> <li>If you've used the <code>VisualizeRegionItem</code>, you will now need to provide a <code>Player</code> for which the region should be visualized.   This also requires you to use an <code>IndividualTileEntityGui</code> instead of a <code>GlobalTileEntityGui</code>.</li> </ul>"},{"location":"addon/migration-guide/0.12-0.13/#tool-levels-tool-tiers","title":"Tool Levels -&gt; Tool Tiers","text":"<p><code>ToolLevel</code> is now <code>ToolTier</code> and allows for better customization of tool tiers that have the same mining level. More info</p>"},{"location":"addon/migration-guide/0.12-0.13/#switch-to-kyori-adventure-api-chat-components","title":"Switch to kyori adventure api (chat components)","text":"<p>We've completely switched to kyori adventure components. Boss- and action bar overlays now use the <code>Component</code> class instead of md_5's <code>Array&lt;out BaseComponent&gt;</code>. This also includes <code>CharSizes</code>, <code>MovedFonts</code>, <code>MoveCharacters</code>, <code>FontChar</code> and everything else. We've removed related utility functions for the bungee component api.</p>"},{"location":"addon/migration-guide/0.12-0.13/#reworked-bossbaroverlay","title":"Reworked BossBarOverlay","text":"<p>Boss bar overlays have been completely reworked. More info</p>"},{"location":"addon/migration-guide/0.12-0.13/#new-hitbox-system","title":"New Hitbox System","text":"<p>With Mojang adding interaction entities in 1.19.4, we've reworked our hitbox system to support them. More Info</p>"},{"location":"addon/migration-guide/0.12-0.13/#new-multimodel-system","title":"New MultiModel System","text":"<p>With Mojang adding display entities in 1.19.4, we've reworked our <code>Model</code> and <code>MultiModel</code> system to use those instead of armor stands. This feature is not yet documented here, but you can use <code>MovableMultiModel</code> and <code>FixedMultiModel</code> to deal with a larger amount of display entities that are supposed to display models from an item stack.</p>"},{"location":"addon/migration-guide/0.12-0.13/#removal-of-default-upgrade-types","title":"Removal of default upgrade types","text":"<p>If you've previously used any of the upgrade types that came with Nova, these have been moved to the <code>simple_upgrades</code> addon.</p> build.gradle.kts dependencies { }<pre><code>implementation(\"xyz.xenondevs:simple-upgrades:1.0-SNAPSHOT\")\n</code></pre> build.gradle.kts addon { }<pre><code>depend.add(\"simple_upgrades\") // (1)!\n</code></pre> <ol> <li>Create a hard dependency on the <code>simple_upgrades</code> addon!</li> </ol> <p>The SimpleUpgrades addon also provides several top level functions for creating holders so that you won't have to change much in your code. See: UpgradeFunctions.kt</p>"},{"location":"addon/migration-guide/0.12-0.13/#removal-of-nova-api-from-transitive-dependencies","title":"Removal of <code>nova-api</code> from transitive dependencies","text":"<p>We've seen that some people accidentally used classes from the <code>nova-api</code> module in their addons. This module is intended for third party plugin developers and provides a very limited api. To avoid confusion and accidental imports of the wrong class, we've removed <code>nova-api</code> from the transitive dependencies of the <code>nova</code> module.</p> <p>This means that you can no longer instantiate the Plugin API events (it's really just one). Instead, we now offer the <code>NovaEventFactory</code> class which provides methods to create and call those events, without the need of having the event class in your compile time classpath.</p> <p>Since <code>nova-api</code> is still in the runtime classpath, you can add the <code>nova-api</code> module back to your compile time dependencies if you really want to, but we generally discourage this.</p>"},{"location":"addon/migration-guide/0.12-0.13/#invui-10","title":"InvUI 1.0","text":"<p>InvUI has been updated to <code>1.0</code>. This includes a lot of api-breaking changes, so please check out the InvUI Docs.</p>"},{"location":"addon/migration-guide/0.12-0.13/#general-refactoring","title":"General Refactoring","text":"<ul> <li>A lot of classes have been moved around or renamed.</li> <li>We've moved a lot of utility stuff to the <code>xenondevs-commons</code> project (specifically: providers, json utilities,   collection utilities and some reflection utilities). This means that you might need to change some   imports of extension functions and the like. Using IntelliJ's \"Optimize Imports\" feature should fix most of these issues.</li> <li>We've renamed all classes containing <code>GUI</code> to their proper upper camel case name <code>Gui</code>.</li> <li>A lot of classes and functions that should've been internal have been made internal. This probably won't affect you.</li> </ul>"},{"location":"addon/migration-guide/0.13-0.14/","title":"Migration Guide 0.13 \u279d 0.14","text":"<p>This release is mainly just the update to 1.20, but there are a few changes that you should be aware of.</p>"},{"location":"addon/migration-guide/0.13-0.14/#removed-spigotresourceid-from-the-addon-description-and-the-related-gradle-task","title":"Removed <code>spigotResourceId</code> from the addon description and the related gradle task","text":"<p>Instead, you can now set a list of <code>ProjectDistributors</code> in code, which will be used to check for updates:</p> MyAddon.kt<pre><code>object MyAddon : Addon() {\n\n    override val projectDistributors = listOf(\n        ProjectDistributor.hangar(/*project id*/), //(1)!\n        ProjectDistributor.spigotmc(/*project id*/), //(2)!\n        ProjectDistributor.modrinth(/*project id*/), //(3)!\n        ProjectDistributor.github(/*project id*/) //(4)!\n    )\n\n}\n</code></pre> <ol> <li>Example: <code>ProjectDistributor.hangar(\"xenondevs/Machines\")</code></li> <li>Example: <code>ProjectDistributor.spigotmc(\"102712\")</code></li> <li>Example: <code>ProjectDistributor.modrinth(\"nova-framework\")</code></li> <li>Example: <code>ProjectDistributor.github(\"Nova-Addons/Machines\")</code></li> </ol>"},{"location":"addon/migration-guide/0.13-0.14/#changed-novarecipekey-namspacedkey-to-novarecipeid-resourcelocation","title":"Changed <code>NovaRecipe.key: NamspacedKey</code> to <code>NovaRecipe.id: ResourceLocation</code>","text":"<p>In the effort to convert everything from <code>NamespacedId</code> / <code>NamespacedKey</code> to <code>ResourceLocation</code>, the <code>NovaRecipe</code> class has now also been updated to use <code>ResourceLocation</code>. If you've created a custom recipe deserializer, you'll probably now also need to switch to <code>RecipeDeserializer#getRecipeId(File)</code>.</p>"},{"location":"addon/migration-guide/0.13-0.14/#smithing-recipes","title":"Smithing Recipes","text":"<p>Since Mojang has changed smithing, the <code>SMITHING_TRANSFORM</code> and recipe files now also need to be in a <code>smithing_transform</code> directory. You'll also now need to specify a <code>template</code> ingredient. There is currently no support for smithing trim recipes.</p>"},{"location":"addon/migration-guide/0.14-0.15/","title":"0.14 \u279d 0.15","text":""},{"location":"addon/migration-guide/0.14-0.15/#paper-migration","title":"Paper migration","text":"<p>Nova has migrated to Paper. This includes significant changes to the build environment, so check out the Nova-Addon-Template on GitHub for an up-to-date example. This also means that you'll no longer need to run BuildTools. It's also no longer possible to reload the server, even if you're in dev mode with <code>-DNovaDev</code>, but this didn't work properly before anyway.</p>"},{"location":"addon/migration-guide/0.14-0.15/#init-annotation","title":"Init annotation","text":"<p>The <code>@Init</code> annotation now requires a <code>stage</code> parameter. More info</p>"},{"location":"addon/migration-guide/0.14-0.15/#configs","title":"Configs","text":"<p>Nova now uses a fork of SpongePowered/Configurate, <code>configReloadable</code> has been deprecated and nova items- and blocks now properly have a config associated with them.</p> old<pre><code>val A: Long by configReloadble { NovaConfig[Items.EXAMPLE_ITEM].getLong(\"some.value\") }\nval B: Long by configReloadable { NovaConfig[\"namespace:name\"].getLong(\"some.value\") }\n</code></pre> new<pre><code>val A: Long by Items.EXAMPLE_ITEM.config.entry&lt;Long&gt;(\"some\", \"value\")\nval B: Long by Configs[\"namespace:name\"].entry&lt;Long&gt;(\"some\", \"value\")\n</code></pre> <p>More Info</p>"},{"location":"addon/migration-guide/0.14-0.15/#itembehavior","title":"ItemBehavior","text":"<ul> <li><code>ItemBehavior</code> is now an interface.</li> <li>The same <code>ItemBehavior</code> instance can now be used for multiple <code>NovaItem</code>s.</li> <li>The <code>modifyItemBuilder</code> function has been deprecated in favor of a new <code>getDefaultCompound</code> function.</li> <li>Many default item behaviors such as <code>Damageable</code> are now also interfaces.   This allows you to (for example) implement your own damaging logic (such as using energy).</li> <li>All item behavior <code>*Options</code> classes (such as <code>FoodOptions</code>, <code>ToolOptions</code>, etc.) have been removed as   the properties have been moved to the new item behavior interfaces.</li> <li><code>NovaItem#getBehavior</code> now asserts non-null by default. Added <code>NovaItem#getBehaviorOrNull</code> for nullable access.</li> <li><code>ItemBehavior#handleInteract</code> now accepts <code>WrappedPlayerInteractEvent</code> instead of <code>PlayerInteractEvent</code>. This wrapping    class has an additional parameter called <code>actionPerformed</code>, which is used to signal whether a custom action has been run.    Additionally, <code>handleInteract</code> is now always called, even if an action (such as a tile-entity gui being opened) has    already been performed.</li> </ul> <p>More Info</p>"},{"location":"addon/migration-guide/0.14-0.15/#utility-functions","title":"Utility functions","text":"<p>ItemBehavior-related utility function such as those in <code>DamageableUtils</code> have been moved to the companion object of  their respective <code>ItemBehavior</code>.</p>"},{"location":"addon/migration-guide/0.14-0.15/#packet-event-listeners","title":"Packet Event Listeners","text":"<p>Packet Event listeners now need a <code>PacketListener</code> interface. More Info</p>"},{"location":"addon/migration-guide/0.14-0.15/#advancements","title":"Advancements","text":"<p>The advancement dsl builder has been removed. You can still register advancements via <code>AdvancementLoader</code>, but you'll need to use Mojang's internal advancement builders. The built-in utility functions for creating advancements about obtaining Nova items (<code>obtainNovaItemAdvancement</code>, <code>obtainNovaItemsAdvancement</code>) are still available.</p>"},{"location":"addon/misc/events/","title":"Events","text":""},{"location":"addon/misc/events/#working-with-bukkit-events","title":"Working with Bukkit Events","text":"<p>Of course, you can also use Bukkit's events. To register an event listener, use the <code>Listener.registerEvents()</code> extension function.</p>"},{"location":"addon/misc/events/#working-with-packet-events","title":"Working with Packet Events","text":"<p>You can also listen to incoming and outgoing packets. To do so, implement the <code>PacketListener</code> interface and register your listener using the <code>PacketListener.registerPacketHandler()</code> extension function. Then, you can use the <code>@PacketHandler</code> annotation to mark event methods.</p> <p>Packet Event Types</p> <p>The packet event system is part of NMS-Utilities. A list of all possible event types can be found here. Please note that this currently does not include all possible packets, as the system is still in development. Feel free to open an issue or a pull request if you need another packet type.</p>"},{"location":"addon/misc/events/#calling-events-from-novas-plugin-api","title":"Calling events from Nova's Plugin API","text":"<p>You might've noticed that the <code>nova-api</code> module is not in your classpath. This module is explicitly for developers of third party plugins and provides a stable API for Nova. To prevent addon developers from accidentally using those classes, <code>nova-api</code> is not a transitive dependency of <code>nova</code>.</p> <p>To still call events from Nova's Plugin API, use the <code>NovaEventFactory</code>:</p> <pre><code>// obtain drops from the block\nval drops: MutableList&lt;ItemStack&gt; = block.getAllDrops().toMutableList()\n// call the event (might mutate drops list)\nNovaEventFactory.callTileEntityBlockBreakEvent(this, block, drops)\n</code></pre>"},{"location":"addon/misc/initialization/","title":"Initialization","text":"<p>Simply annotate your class with <code>@Init</code> and Nova will load it during the specified initialization stage.</p>"},{"location":"addon/misc/initialization/#initialization-stages","title":"Initialization Stages","text":"<p>These are the available initialization stages:</p> Stage Description <code>InitStage.PRE_WORLD</code> Before the world is loaded. <code>InitStage.PRE_PACK</code> Before the resource pack generation starts. <code>InitStage.POST_PACK_PRE_WORLD</code> After the first stage of resource pack generation (\"pre-world\") has finished. Lookup registries are now loaded. <code>InitStage.POST_WORLD</code> After the world has been loaded. <code>InitStage.POST_WORLD_ASYNC</code> After the world has been loaded, in an async thread. <code>InitStage.POST_PACK</code> After the second (and last) stage of resource pack generation (\"post-world\") has finished. <code>InitStage.POST_PACK_ASYNC</code> After the second (and last) stage of resource pack generation (\"post-world\") has finished, in an async thread. Example initializable class<pre><code>@Init(stage = InitStage.PRE_PACK)\nclass ExampleClass\n</code></pre>"},{"location":"addon/misc/initialization/#initialization-dependencies","title":"Initialization Dependencies","text":"<p>If the pre-defined initialization stages are not enough for you, you can also configure which classes that should be initialized before (<code>runAfter</code>) or after (<code>runBefore</code>) your class:</p> Example initializable class with dependencies<pre><code>@Init(\n    stage = InitStage.PRE_PACK,\n    runAfter = [ClassA::class], // This class will be initialized after ClassA\n    runBefore = [ClassB::class] // This class will be initialized before ClassB\n)\nclass ExampleClass\n</code></pre>"},{"location":"addon/misc/initialization/#functions","title":"Functions","text":"<p>If your class is annotated with <code>@Init</code>, you can also annotate your functions with <code>@InitFun</code> and <code>@DisableFun</code>:</p> <ul> <li><code>@InitFun</code>: Specify one or more functions that should be called during initialization.</li> <li><code>@DisableFun</code> Specify one or more functions that should be called when your addon is disabled. These   functions are called in reverse dependency order.</li> </ul> Example initializable class with functions<pre><code>@Init(stage = InitStage.PRE_PACK)\nclass ExampleClass {\n\n    @InitFun\n    private fun init() {\n        //Run during PRE_PACK init stage\n    }\n\n    @DisableFun\n    private fun disable() {\n        // Run when the addon is disabled\n    }\n\n}\n</code></pre>"},{"location":"addon/misc/project-distributors/","title":"Configuring project distributors for update notifications","text":"<p>To set up update notifications, simply override the <code>projectDistributors</code> list in your addon object:</p> MyAddon.kt<pre><code>object MyAddon : Addon() {\n\n    override val projectDistributors = listOf(/*your distributors*/)\n\n}\n</code></pre> <p>By default, there are four different distributors available:</p> Distributor Code SpigotMC <code>ProjectDistributor.spigotmc(/*project id*/)</code> Hangar <code>ProjectDistributor.hangar(/*project id*/)</code> Modrinth <code>ProjectDistributor.modrinth(/*project id*/)</code> GitHub <code>ProjectDistributor.github(/*project id*/)</code> <p>You can also create your own distributor by implementing the <code>ProjectDistributor</code> interface.</p> <p>Order of update checks</p> <p>When checking for updates, all registered distributors are checked in the order they are specified in the list. This means that if you want users to download your updates from a specific distributor, you should put it at the top of the list.</p> <p>Pre-release versions</p> <p>Users will only be notified of pre-release versions if they themselves are using a pre-release version.</p>"},{"location":"addon/resourcepack/build-logic/","title":"Custom resource pack build logic","text":"<p>To run code during the resource pack build process, you'll need to register a <code>PackTask</code>. Pack tasks are functions annotated with <code>@PackTask</code> and need to be located in a class that implements the <code>PackTaskHolder</code> interface. Those holders then need to be registered with <code>ResourcePackBuilder.registerTaskHolders</code>.</p> <pre><code>object ExampleAddon : Addon() {\n\n    override fun init() {\n        ResourcePackBuilder.registerTaskHolders(::CustomTaskHolder)\n    }\n\n}\n\nclass CustomTaskHolder(private val builder: ResourcePackBuilder) : PackTaskHolder {\n\n    @PackTask\n    fun customTask() {\n        // Do something\n    }\n\n}\n</code></pre>"},{"location":"addon/resourcepack/build-logic/#packtask","title":"PackTask","text":"<p>The <code>@PackTask</code> annotation has three optional parameters: <code>stage: BuildStage</code>, <code>runAfter: Array&lt;String&gt;</code> and <code>runBefore: Array&lt;String&gt;</code>.</p>"},{"location":"addon/resourcepack/build-logic/#build-stages","title":"Build Stages","text":"<p>There are two build stages: <code>PRE_WORLD</code> and <code>POST_WORLD</code>. This is because some logic needs to be done before the world has been loaded (such as assigning block states to nova block types) but some other logic might need to interact with other plugins that are only loaded after the world has been loaded (for example rendering the WAILA textures for blocks of custom item services). By default, the stage is <code>BuildStage.AUTOMATIC</code>, which means that the build stage will be determined based on the given <code>runAfter</code> and <code>runBefore</code> dependencies. If there are no dependencies, the stage will be <code>PRE_WORLD</code>.</p>"},{"location":"addon/resourcepack/build-logic/#dependencies","title":"Dependencies","text":"<p>You can define which tasks should be run before or after your task using the <code>runAfter</code> and <code>runBefore</code> parameters. This is quite similar to the Initialization dependencies, with the exception that you don't define classes but task names. Tasks are named after their simple class- and function name, separated by a <code>#</code>. So if you have a class <code>CustomTaskHolder</code> with the function <code>customTask</code>, the task name would be <code>CustomTaskHolder#customTask</code>. The benefit of using strings instead of class references is that you can configure dependencies to specific tasks instead of the whole task holder class.</p> <p>As an example, Nova's <code>EnchantmentContent#write</code> task requires language files to be loaded, certain font characters to have been created and char sizes to be calculated, but it also writes to the language files, which means that it needs to run before the <code>LanguageContent#write</code> task. This is how it's configured:</p> <pre><code>@PackTask(\n    runAfter = [\"LanguageContent#loadLangFiles\", \"EnchantmentContent#createBackgroundChars\", \"CharSizeCalculator#calculateCharSizes\"],\n    runBefore = [\"LanguageContent#write\"]\n)\nprivate fun write() {\n    // ...\n}\n</code></pre>"},{"location":"addon/resourcepack/build-logic/#resourcepackbuilder","title":"ResourcePackBuilder","text":"<p>As shown in the example above, you'll register a task holder constructor that accepts a <code>ResourcePackBuilder</code> instance as parameter. This builder instance organizes the build process and provides you with access to other task holders.</p>"},{"location":"addon/resourcepack/build-logic/#accessing-files","title":"Accessing files","text":"<p>Resource pack building might take place entirely in memory or on disk in the <code>plugins/Nova/resource_pack/.build/</code> directory, depending on the server configuration. In-memory resource pack generation is implemented using JIMFS and is the reason why all file access runs over <code>java.nio.Path</code> instead of <code>java.io.File</code>. You can find the most important directories as properties in the companion object of <code>ResourcePackBuilder</code>, such as <code>RESOURCE_PACK_BUILD_DIR</code> and <code>ASSETS_DIR</code>. These paths will always point to the correct file system, so you don't need to worry about whether the resource pack is being built in memory or on disk.</p>"},{"location":"addon/resourcepack/build-logic/#retrieving-packtaskholder-instances","title":"Retrieving <code>PackTaskHolder</code> instances","text":"<p>When creating a custom task, you might want to interact with existing task holders from your own addon, Nova, or other addons. To retrieve a task holder instance, call <code>resourcePackBuilder.getHolder&lt;HolderType&gt;()</code> with the holder class as type parameter.</p> <pre><code>class CustomTaskHolder(private val builder: ResourcePackBuilder) : PackTaskHolder {\n\n    @PackTask\n    fun customTask() {\n        val languageContent = builder.getHolder&lt;LanguageContent&gt;()\n        languageContent.setTranslation(\"en_us\", \"translation.key\", \"Hello World\")\n    }\n\n}\n</code></pre>"},{"location":"addon/resourcepack/build-logic/#retrieving-resource-filters","title":"Retrieving resource filters","text":"<p>Resource filters are used to filter out resources that should not be included in the resource pack. They can be configured by server admins and addon developers using <code>ResourcePackBuilder.registerResourceFilter</code>. During the build process, you can retrieve the filters using <code>resourcePackBuilder.getResourceFilters(stage)</code>. If writes additional files, you should check whether are configured to be excluded.</p>"},{"location":"addon/resourcepack/build-logic/#important-built-in-task-holders","title":"Important built-in task holders","text":"<p>The following are the most important built-in task holders, which you might need to interact with in code. You should prefer using these instead of direct file access, because they would probably overwrite your changes and are generally more convenient and performant to use.</p> <p>All other pack tasks</p> <p>A list of all pack tasks and their execution order will be shown in the console every time the resource pack is built.</p>"},{"location":"addon/resourcepack/build-logic/#languagecontent","title":"LanguageContent","text":"<p>Provides you with access to language files.</p> <pre><code>@PackTask\nfun task() {\n    val languageContent = builder.getHolder&lt;LanguageContent&gt;()\n    languageContent.setTranslation(\"en_us\", \"translation.key\", \"Hello World\")\n}\n</code></pre>"},{"location":"addon/resourcepack/build-logic/#fontcontent","title":"FontContent","text":"<p>Provides you with access to fonts.</p>"},{"location":"addon/resourcepack/build-logic/#vanillafonts","title":"<code>vanillaFonts</code>","text":"<p>This map shows the fonts that are part of the base game assets. These fonts are not included in Nova's resource pack.</p>"},{"location":"addon/resourcepack/build-logic/#customfonts","title":"<code>customFonts</code>","text":"<p>This map stores custom fonts and custom overrides to existing fonts from base packs, Nova, and addons. You can get and create custom fonts using <code>fontContent.get</code>, <code>fontContent.getOrCreate</code>, <code>fontContent.add</code>, etc.</p>"},{"location":"addon/resourcepack/build-logic/#mergedfonts","title":"<code>mergedFonts</code>","text":"<p>This map shows both <code>vanillaFonts</code> and <code>customFonts</code> merged together in the same way they'd be merged for the client. This might be useful if you want to add custom characters to the <code>minecraft:default</code> font without overriding existing characters. Using <code>Font.findFirstUnoccupied</code> or <code>Font.findFirstUnoccupiedRange</code> you could then search for an unoccupied range of code points.</p> <p>Resource-intensive operation</p> <p>Because <code>customFonts</code> might change at any time, retrieving the <code>mergedFonts</code> map will always merge the <code>vanillaFonts</code> and <code>customFonts</code> map again, which is a relatively resource-intesive operation.</p>"},{"location":"addon/resourcepack/build-logic/#movedfontcontent","title":"MovedFontContent","text":"<p>Allows you to request vertically moved fonts.</p> <pre><code>@PackTask\nfun task() {\n    val movedFontContent = builder.getHolder&lt;MovedFontContent&gt;()\n    movedFontContent.requestMovedFonts(ResourcePath(\"namespace\", \"name\"), 0..19)\n}\n</code></pre>"},{"location":"addon/resourcepack/build-logic/#textureiconcontent","title":"TextureIconContent","text":"<p>Allows you to request textures for Nova's texture-icon font.</p> <pre><code>@PackTask\nfun task() {\n    val textureIconContent = builder.getHolder&lt;TextureIconContent&gt;()\n    textureIconContent.addIcons(\"minecraft:item/diamond\", \"minecraft:item/emerald\")\n}\n</code></pre> <p>They can then be retrieved from the <code>TEXTURE_ICON_LOOKUP</code>:</p> <pre><code>val component: Component = ResourceLookups.TEXTURE_ICON_LOOKUP[ResourceLocation(\"minecraft:item/diamond\")].component\n</code></pre>"},{"location":"addon/worldgen/biome/","title":"Biomes","text":"<p>Warning</p> <p>This worldgen page is still a work in progress. Some Json formats/code examples/features might be missing and will be added in the future. Custom biomes also aren't fully supported yet. Injecting them into <code>LevelStems</code> has to be done manually for now.</p> <p>Biomes are regions in the world with distinct features, carvers, climate, effects and much more. This page only covers the <code>BiomeBuilder</code> for now. If you're looking for the Json format, check out the Minecraft Wiki.</p> <p>First, let's get into more detail on the individual components of a biome.</p>"},{"location":"addon/worldgen/biome/#climate","title":"Climate","text":"<p>As the name suggests, <code>ClimateSettings</code> determine the climate of a biome. I.e. the weather, snow behavior and temperature. The <code>BiomeClimateSettingsBuilder</code> class provides a fluent API for creating <code>ClimateSettings</code>.</p>"},{"location":"addon/worldgen/biome/#special-effects","title":"Special effects","text":"<p>The <code>BiomeSpecialEffects</code> determine the general look of a biome, including its fog, foliage, water and sky color or even ambient particles. These effects also include the ambient sounds of the biome. Check out The <code>BiomeSpecialEffectsBuilder</code> kdoc for more information.</p>"},{"location":"addon/worldgen/biome/#mob-spawn-settings","title":"Mob spawn settings","text":"<p>The <code>MobSpawnSettings</code> determine the mobs and their spawn conditions of a biome. Check out the <code>MobSpawnSettingsBuilder</code> kdoc for more information.</p>"},{"location":"addon/worldgen/biome/#example","title":"Example","text":"Biomes.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject Biomes : BiomeRegistry by ExampleAddon.registry {\n\n    private val MISC_ORES = listOf(OrePlacements.ORE_DIRT, OrePlacements.ORE_GRAVEL, OrePlacements.ORE_GRANITE_UPPER, OrePlacements.ORE_GRANITE_LOWER, OrePlacements.ORE_DIORITE_UPPER, OrePlacements.ORE_DIORITE_LOWER, OrePlacements.ORE_ANDESITE_UPPER, OrePlacements.ORE_ANDESITE_LOWER, OrePlacements.ORE_TUFF)\n    private val MINERAL_ORES = listOf(OrePlacements.ORE_COAL_UPPER, OrePlacements.ORE_COAL_LOWER, OrePlacements.ORE_IRON_UPPER, OrePlacements.ORE_IRON_MIDDLE, OrePlacements.ORE_IRON_SMALL, OrePlacements.ORE_GOLD, OrePlacements.ORE_GOLD_LOWER, OrePlacements.ORE_REDSTONE, OrePlacements.ORE_REDSTONE_LOWER, OrePlacements.ORE_DIAMOND, OrePlacements.ORE_DIAMOND_LARGE, OrePlacements.ORE_DIAMOND_BURIED, OrePlacements.ORE_LAPIS, OrePlacements.ORE_LAPIS_BURIED, OrePlacements.ORE_COPPER)\n    private val DECORATION_ORES = listOf(CavePlacements.UNDERWATER_MAGMA, MiscOverworldPlacements.DISK_SAND, MiscOverworldPlacements.DISK_CLAY, MiscOverworldPlacements.DISK_GRAVEL)\n\n    val PLAINS = biome(\"plains\")\n        .carvers(Carving.AIR, Carvers.CAVE, Carvers.CAVE_EXTRA_UNDERGROUND, Carvers.CANYON)\n        .features(Decoration.LAKES, MiscOverworldPlacements.LAKE_LAVA_SURFACE, MiscOverworldPlacements.LAKE_LAVA_UNDERGROUND)\n        .feature(Decoration.LOCAL_MODIFICATIONS, CavePlacements.AMETHYST_GEODE)\n        .features(Decoration.UNDERGROUND_STRUCTURES, CavePlacements.MONSTER_ROOM, CavePlacements.MONSTER_ROOM_DEEP)\n        .features(Decoration.UNDERGROUND_ORES, *(MISC_ORES + MINERAL_ORES + DECORATION_ORES).toTypedArray())\n        .features(Decoration.FLUID_SPRINGS, MiscOverworldPlacements.SPRING_LAVA, MiscOverworldPlacements.SPRING_WATER)\n        .features(Decoration.VEGETAL_DECORATION, CavePlacements.GLOW_LICHEN, VegetationPlacements.PATCH_TALL_GRASS_2, VegetationPlacements.TREES_PLAINS, VegetationPlacements.FLOWER_PLAINS, VegetationPlacements.PATCH_GRASS_PLAIN, VegetationPlacements.BROWN_MUSHROOM_NORMAL, VegetationPlacements.RED_MUSHROOM_NORMAL, VegetationPlacements.PATCH_SUGAR_CANE, VegetationPlacements.PATCH_PUMPKIN)\n        .feature(Decoration.TOP_LAYER_MODIFICATION, MiscOverworldPlacements.FREEZE_TOP_LAYER)\n        .climateSettings {\n            downfall(.4f)\n            hasPrecipitation(true)\n            temperature(.8f)\n        }\n        .specialEffects {\n            fogColor(0xC0D8FF)\n            skyColor(0x78A7FF)\n            waterColor(0x3F76E4)\n            waterFogColor(0x050533)\n            ambientMoodSound {\n                blockSearchExtent(8)\n                soundPositionOffset(2.0)\n                soundEvent(SoundEvents.AMBIENT_CAVE)\n                tickDelay(6000)\n            }\n        }\n        .mobSpawnSettings {\n            addSpawn(MobCategory.AMBIENT, EntityType.BAT, minGroupSize = 8, maxGroupSize = 8, weight = 10)\n\n            addSpawn(MobCategory.CREATURE, EntityType.SHEEP, minGroupSize = 4, maxGroupSize = 4, weight = 12)\n            addSpawn(MobCategory.CREATURE, EntityType.PIG, minGroupSize = 4, maxGroupSize = 4, weight = 10)\n            addSpawn(MobCategory.CREATURE, EntityType.CHICKEN, minGroupSize = 4, maxGroupSize = 4, weight = 10)\n            addSpawn(MobCategory.CREATURE, EntityType.COW, minGroupSize = 4, maxGroupSize = 4, weight = 8)\n            addSpawn(MobCategory.CREATURE, EntityType.HORSE, minGroupSize = 2, maxGroupSize = 6, weight = 5)\n            addSpawn(MobCategory.CREATURE, EntityType.DONKEY, minGroupSize = 1, maxGroupSize = 3, weight = 1)\n\n            addSpawn(MobCategory.MONSTER, EntityType.SPIDER, minGroupSize = 4, maxGroupSize = 4, weight = 100)\n            addSpawn(MobCategory.MONSTER, EntityType.ZOMBIE, minGroupSize = 4, maxGroupSize = 4, weight = 95)\n            addSpawn(MobCategory.MONSTER, EntityType.ZOMBIE_VILLAGER, minGroupSize = 1, maxGroupSize = 1, weight = 5)\n            addSpawn(MobCategory.MONSTER, EntityType.SKELETON, minGroupSize = 4, maxGroupSize = 4, weight = 100)\n            addSpawn(MobCategory.MONSTER, EntityType.CREEPER, minGroupSize = 4, maxGroupSize = 4, weight = 100)\n            addSpawn(MobCategory.MONSTER, EntityType.SLIME, minGroupSize = 4, maxGroupSize = 4, weight = 100)\n            addSpawn(MobCategory.MONSTER, EntityType.ENDERMAN, minGroupSize = 1, maxGroupSize = 4, weight = 10)\n            addSpawn(MobCategory.MONSTER, EntityType.WITCH, minGroupSize = 1, maxGroupSize = 1, weight = 5)\n\n            addSpawn(MobCategory.WATER_CREATURE, EntityType.GLOW_SQUID, minGroupSize = 4, maxGroupSize = 6, weight = 10)\n        }\n        .register()\n\n}\n</code></pre>"},{"location":"addon/worldgen/carver/","title":"Carvers","text":"<p>Warning</p> <p>This worldgen page is still a work in progress. Some Json formats/code examples/features might be missing and will be added in the future.</p> <p>TODO - Check out the Minecraft Wiki in the meantime.</p>"},{"location":"addon/worldgen/codec/","title":"Codecs","text":"<p><code>Codecs</code> are Mojang's way of serializing and deserializing objects via Json and NBT. They are relevant in world generation because they are used to deserialize pretty much every aspect of datapack-supported world generation. In simpler terms, a <code>Codec</code> is pretty much just a <code>Encoder</code> and <code>Decoder</code> combined defining how to serialize and deserialize an object into primitive types. (1) So here's a quick overview on how to use them.</p> <ol> <li>Minecraft also includes a ton of other default <code>Codecs</code> in the <code>ExtraCodecs</code> class. Make sure to check it out as well!</li> </ol>"},{"location":"addon/worldgen/codec/#dataresults","title":"DataResults","text":"<p>Before getting into <code>Codecs</code>, we need to take a look at <code>DataResults</code>. A <code>DataResult</code> is pretty much just a fancier version of Kotlin's <code>Result</code> type. They either contain a value or an error. The difference is that <code>DataResult's</code> can contain a so called <code>PartialResult</code> (which often is just the input value or a partially deserialized value). <code>Codecs</code> can be adapted to serialize/deserialize using <code>DataResults</code> using the following functions:</p> <ul> <li><code>Codec.comapFlatMap</code> - Deserialize into a <code>DataResult</code> but serialize normally.</li> <li><code>Codec.flatComapMap</code> - Serialize into a <code>DataResult</code> but deserialize normally.</li> <li><code>Codec.flatXmap</code> - Serialize and deserialize into a <code>DataResult</code>.</li> </ul> <p>Keep these functions in mind for the following examples.</p> <p>Tip</p> <p>Nova also has a <code>Result&lt;R&gt;.asDataResult()</code> extension function to convert Kotlin's <code>Result</code> into a <code>DataResult</code>. So for a convenient way to safely deserialize a value and return a <code>DataResult</code>, you can run <code>runCatching { /* ... */ }.asDataResult()</code></p>"},{"location":"addon/worldgen/codec/#dynamicops","title":"DynamicOps","text":"<p><code>DynamicOps</code> are Mojang's way of abstracting away the difference between different serialization formats. DFU includes <code>JsonOps</code> by default. Minecraft adds <code>NbtOps</code> and <code>RegistryOps</code>. <code>DynamicOps</code> are used to define the format in which primitive types are serialized and deserialized. All other types are built on top of these primitive types.</p> Number types implementation in <code>JsonOps</code> <p>For example, to serialize/deserialize numbers, <code>DynamicOps</code> defines the <code>createNumeric</code>  and <code>getNumberValue</code> functions. <code>JsonOps</code> implements these functions like this:</p> JsonOps.java<pre><code>public JsonElement createNumeric(Number i) {\n    return new JsonPrimitive(i);\n}\n\npublic DataResult&lt;Number&gt; getNumberValue(JsonElement input) {\n    if (input instanceof JsonPrimitive) {\n        if (input.getAsJsonPrimitive().isNumber()) {\n            return DataResult.success(input.getAsNumber());\n        }\n\n        if (input.getAsJsonPrimitive().isBoolean()) {\n            return DataResult.success(input.getAsBoolean() ? 1 : 0);\n        }\n\n        if (this.compressed &amp;&amp; input.getAsJsonPrimitive().isString()) {\n            try {\n                return DataResult.success(Integer.parseInt(input.getAsString()));\n            } catch (NumberFormatException var3) {\n                return DataResult.error(\"Not a number: \" + var3 + \" \" + input);\n            }\n        }\n    }\n\n    return input instanceof JsonPrimitive &amp;&amp; input.getAsJsonPrimitive().isBoolean() ? DataResult.success(input.getAsJsonPrimitive().getAsBoolean() ? 1 : 0) : DataResult.error(\"Not a number: \" + input);\n}\n</code></pre>"},{"location":"addon/worldgen/codec/#codecs-for-simple-types","title":"Codecs for simple types.","text":"<p>For classes that can be defined as a single type, a preexisting <code>PrimitveCodec</code> should be used to define the <code>Codec</code> for that type. A simple example would be a <code>Codec</code> for Minecraft's <code>ResourceLocation</code>. Since a <code>ResourceLocation</code> can be  constructed from a single <code>String</code>, we can use the preexisting <code>Codec.String</code> to define our <code>Codec</code>.</p> ResourceLocation implementation used for this example <p>To simplify, here's a more basic implementation of <code>ResourceLocation</code>:</p> ResourceLocation.kt<pre><code>data class ResourceLocation(\n    val namespace: String,\n    val location: String\n) {\n\n    override fun toString(): String {\n        return \"$namespace:$location\"\n    }\n\n    companion object {\n\n        /**\n         * Matches any lowercase alphanumeric (and `_`) string that starts with a lowercase letter\n         */\n        val PART_PATTERN = Regex(\"\"\"^[a-z][a-z\\d_]*$\"\"\")\n\n        /**\n         * Matches the Pattern [PART_PATTERN] twice separated by a colon\n         */\n        val COMPLETE_PATTERN = Regex(\"\"\"^[a-z][a-z\\d_]*:[a-z][a-z\\d_]*$\"\"\")\n\n        fun read(id: String): DataResult&lt;ResourceLocation&gt; {\n            val namespace: String\n            val location: String\n\n            if (id.matches(COMPLETE_PATTERN)) {\n                val parts = id.split(':')\n                namespace = parts[0]\n                location = parts[1]\n            } else if (id.matches(PART_PATTERN)) {\n                namespace = \"minecraft\"\n                location = id\n            } else {\n                return DataResult.error { \"ResourceLocation \\\"$id\\\" does neither match pattern $COMPLETE_PATTERN nor $PART_PATTERN\" }\n            }\n\n            return DataResult.success(ResourceLocation(namespace, location))\n        }\n\n    }\n\n}\n</code></pre> ResourceLocation.kt<pre><code>val CODEC: Codec&lt;ResourceLocation&gt; =\n    Codec.STRING // (1)!\n        .comapFlatMap(ResourceLocation::read, ResourceLocation::toString) // (2)!\n        .stable() // (3)!\n</code></pre> <ol> <li>As mentioned above, we can use the preexisting <code>Codec.String</code> to define our <code>Codec</code> since we only need a single string to parse the <code>ResourceLocation</code>.</li> <li>We use <code>comapFlatMap</code> to deserialize into a <code>DataResult</code> and serialize normally (Calling <code>toString</code> shouldn't fail).    Also use <code>read</code> to deserialize the <code>ResourceLocation</code> from the provided <code>String</code>.</li> <li>Specify that the <code>Codec</code> is stable.</li> </ol> <p>So in other words, we're now just telling the serializer how to serialize and deserialize our <code>ResourceLocation</code> type  to/from a <code>String</code>.</p>"},{"location":"addon/worldgen/codec/#codecs-for-more-nested-types","title":"Codecs for more nested types","text":"<p>In the previous example, we just mapped a preexisting <code>Codec</code> to our type. But what if we want to define a <code>Codec</code> for a more complex type with multiple fields? For this, we can use <code>RecordCodecBuilder</code> to define a <code>Codec</code> for our type. Here's the <code>data class</code> we want to define a <code>Codec</code> for:</p> <pre><code>data class Example(\n    val id: ResourceLocation,\n    val ints: List&lt;Int&gt;,\n    val defaultString: String\n)\n</code></pre> <p>So let's break this type down into its parts. We can see that <code>Example</code> has three fields: <code>id</code>, <code>ints</code> and <code>defaultString</code>.  </p> <code>id</code> <p><code>id</code> is a <code>ResourceLocation</code> which we already know how to serialize/deserialize. So we can just use our previously  defined Codec` again:</p> <pre><code>ResourceLocation.CODEC // (1)!\n    .fieldOf(\"id\") // (2)!\n    .forGetter(Example::id) // (3)!\n</code></pre> <ol> <li>Use the previously defined <code>Codec</code> for <code>ResourceLocation</code>.</li> <li>Specify the name of the field in the serialized format.</li> <li>Specify how to get the value of the field from the <code>Example</code> instance.</li> </ol> <code>ints</code> <p><code>ints</code> is a <code>List&lt;Int&gt;</code> which is just a list of the primitive type <code>Int</code>. So we can just call <code>Codec.INT.listOf()</code> to define a <code>Codec</code> for <code>List&lt;Int&gt;</code>:</p> <pre><code>Codec.INT.listOf() // (1)!\n    .fieldOf(\"ints\") // (2)!\n    .forGetter(Example::ints) // (3)!\n</code></pre> <ol> <li>Use the <code>listOf</code> function on <code>Codec.INT</code> to define a <code>Codec</code> for <code>List&lt;Int&gt;</code>.</li> <li>Specify the name of the field in the serialized format.</li> <li>Specify how to get the value of the field from the <code>Example</code> instance.</li> </ol> <code>defaultString</code> <p><code>defaultString</code> is a <code>String</code> which is a primitive type. But we want to make it optional with a default value of <code>\"default\"</code>. So we can use <code>Codec.STRING.optionalFieldOf</code> to define a <code>Codec</code> for <code>String</code> with a default value:</p> <pre><code>Codec.STRING // (1)!\n    .optionalFieldOf(\"defaultString\", \"default\") // (2)!\n    .forGetter(Example::defaultString) // (3)!\n</code></pre> <ol> <li>Use the existing <code>Codec.STRING</code> for <code>String</code>.</li> <li>Specify the name of the field in the serialized format and the default value.    To specifiy a default-value for a non <code>MapCodec</code> use <code>Codec.String.orElse(\"default\")</code>.</li> <li>Specify how to get the value of the field from the <code>Example</code> instance.</li> </ol> <p>Putting all these together, we can now define a <code>Codec</code> for our <code>Example</code> type:</p> <pre><code>val CODEC: Codec&lt;Example&gt; = RecordCodecBuilder.create { instance -&gt;\n   instance.group(\n           ResourceLocation.CODEC.fieldOf(\"id\").forGetter(Example::id),\n           Codec.INT.listOf().fieldOf(\"ints\").forGetter(Example::ints),\n           Codec.STRING\n              .optionalFieldOf(\"defaultString\", \"default\")\n              .forGetter(Example::defaultString)\n   ).apply(instance, ::Example)\n}\n</code></pre> <ol> <li>List all the fields of the <code>Example</code> type.</li> <li>Apply the fields to the <code>RecordCodecBuilder</code> instance and use the <code>::Example</code> constructor reference to specify how to    construct an <code>Example</code> instance from the defined fields.</li> </ol> <p>So let's test it out by serializing and deserializing an <code>Example</code> instance:</p> <pre><code>val testId = ResourceLocation(\"minecraft\", \"stone\")\nval test = Example(testId, listOf(1, 2, 3), \"hello\")\n</code></pre> <p>Using our <code>Codec</code> and <code>JsonOps</code>:</p> <pre><code>{\n  \"id\": \"minecraft:stone\",\n  \"ints\": [1, 2, 3],\n  \"defaultString\": \"hello\"\n}\n</code></pre> <p>And now let's deserialize the same json, but without the <code>defaultString</code> field. And the result is:</p> <pre><code>Example(id=minecraft:stone, ints=[1, 2, 3], defaultString=default)\n</code></pre>"},{"location":"addon/worldgen/codec/#registry-codecs","title":"Registry Codecs","text":""},{"location":"addon/worldgen/codec/#minecraftnova-registries","title":"Minecraft/Nova registries","text":"<p>If you want to retrieve an instance of a type that is registered in one of Minecraft's/Nova's registries, you can use the <code>Registry.byNameCodec</code> function. This will automatically build a <code>Codec</code> that will serialize/deserialize a <code>ResourceLocation</code> and then use that <code>ResourceLocation</code> to retrieve the instance from the <code>Registry</code>. (<code>holderByNameCodec</code> also exists if you need a <code>Holder</code> instead of an instance).</p> <p>If you also want to allow the <code>Codec</code> to serialize/deserialize inline, you can use the <code>RegistryFileCodec</code> class. For example, the <code>ConfiguredFeature</code> class has both a <code>DIRECT_CODEC</code>, which only deserializes inline and a <code>CODEC</code>, which also checks the <code>Registry</code> if the deserialized type is a <code>ResourceLocation</code>:</p> <pre><code>public static final Codec&lt;ConfiguredFeature&lt;?, ?&gt;&gt; DIRECT_CODEC = BuiltInRegistries.FEATURE.byNameCodec().dispatch((config) -&gt; { // (1)!\n    return config.feature;\n}, Feature::configuredCodec);\n\npublic static final Codec&lt;Holder&lt;ConfiguredFeature&lt;?, ?&gt;&gt;&gt; CODEC = RegistryFileCodec.create(Registries.CONFIGURED_FEATURE, DIRECT_CODEC);\n</code></pre> <ol> <li>Checks the individual <code>ConfiguredFeature</code> <code>Codecs</code> of each <code>Feature</code>.</li> </ol>"},{"location":"addon/worldgen/codec/#custom-registry-like-types","title":"Custom registry-like types","text":"<p>If you want to define a <code>Codec</code> for a custom type that is registered in a custom registry-like type, you can use the <code>ExtraCodecs.stringResolverCodec</code> and <code>ExtraCodecs.idResolverCodec</code> functions. These functions take 2 mapping <code>Functions</code> as parameters: one for element to id and one for id to element (since primitives aren't nullable in Java, the <code>idResolverCodec</code> function also takes a <code>int</code> that represent the id of non-existing elements).</p> <p>For example, let's say we have a custom <code>Registry</code> that maps <code>String</code> to a generic <code>T</code>:</p> <pre><code>class SimpleRegistry&lt;T : Any&gt; {\n\n    private val byId: MutableMap&lt;String, T&gt; = mutableMapOf()\n    private val byValue: MutableMap&lt;T, String&gt; = mutableMapOf()\n\n    fun register(id: String, value: T) {\n        byId[id] = value\n        byValue[value] = id\n    }\n\n}\n</code></pre> <p>We can define a <code>codec</code> function:</p> <pre><code>fun codec(): Codec&lt;T&gt; {\n    return ExtraCodecs.stringResolverCodec(byValue::get, byId::get)\n}\n</code></pre>"},{"location":"addon/worldgen/codec/#enums","title":"Enums","text":"<p>Minecraft also provides a built-in way of serializing/deserializing enums. Just implement the <code>StringRepresentable</code> interface and implement the <code>getSerializedName</code> function:</p> <pre><code>enum class ExampleEnum: StringRepresentable {\n    A, B, C;\n\n    override fun getSerializedName() = this.name\n\n    companion object {\n        val VALUES = values()\n    }\n}\n</code></pre> <p>Now we can call <code>StringRepresentable.fromEnum</code> to get a <code>Codec</code> for our enum:</p> <pre><code>companion object {\n    val VALUES = values()\n\n    val CODEC = StringRepresentable.fromEnum(::VALUES)\n}\n</code></pre>"},{"location":"addon/worldgen/codec/#more-utilities","title":"More utilities","text":"<p>Note</p> <p>This section isn't required to properly use <code>Codecs</code>, but it contains a lot of useful utilities that might save you some time in the future.</p>"},{"location":"addon/worldgen/codec/#eitherxor","title":"Either/Xor","text":"<p>If your <code>Codec</code> should be able to serialize/deserialize 2 different types, you can use the <code>Codec.either</code> function  (or <code>EitherCodec</code> class) to define a <code>Codec</code> that can serialize/deserialize both types. One common use case is accepting both a <code>ResourceLocation</code> and a <code>TagKey</code>:</p> <p>Already built into Nova</p> <p>Nova already provides a <code>ResourceLocationOrTagKey</code> class that wraps an <code>Either&lt;ResourceLocation, TagKey&lt;T&gt;&gt;</code> and provides a <code>Codec</code> via the <code>codec</code> function.</p> <pre><code>val CODEC: Codec&lt;Either&lt;ResourceLocation, TagKey&lt;Biome&gt;&gt;&gt; = Codec.either(\n    ResourceLocation.CODEC,\n    TagKey.hashedCodec(Registries.BIOME)\n)\n</code></pre> <p>If you only want to allow one of the types (sometimes both types could be deserialized and lead to confusion), you can use the <code>ExtraCodecs.xor</code> function:</p> <pre><code>val CODEC: Codec&lt;Either&lt;ResourceLocation, TagKey&lt;Biome&gt;&gt;&gt; = ExtraCodecs.xor( // (1)!\n    ResourceLocation.CODEC,\n    TagKey.hashedCodec(Registries.BIOME)\n)\n</code></pre> <ol> <li>Please note that this is redundant here since <code>TagKey</code> needs to start with <code>#</code> and <code>ResourceLocation</code> can't start     with <code>#</code>. But it can be useful for other types.</li> </ol>"},{"location":"addon/worldgen/codec/#number-codecs-within-a-range","title":"Number codecs within a range","text":"<p>If you want to serialize/deserialize a number but only within a certain range, you can use the <code>Codec.intRange</code>, <code>Codec.floatRange</code> and <code>Codec.doubleRange</code> functions:</p> <pre><code>val CHANCE_CODEC: Codec&lt;Float&gt; = Codec.floatRange(0.0f, 1.0f)\n</code></pre>"},{"location":"addon/worldgen/codec/#pair-like-types","title":"Pair like types","text":"<p>Some types might usually need a <code>RecordCodecBuilder</code> to be serialized/deserialized, but if they only have 2 fields of the same type, you can use the <code>ExtraCodecs.intervalCodec</code> function:</p> IntRange Codec<pre><code>val INT_RANGE_CODEC: Codec&lt;IntRange&gt; = ExtraCodecs.intervalCodec(\n    Codec.INT,\n    \"min_inclusive\",\n    \"max_inclusive\",\n    { min, max -&gt; runCatching { IntRange(min, max) }.asDataResult() },\n    IntRange::start,\n    IntRange::endInclusive\n)\n</code></pre>"},{"location":"addon/worldgen/codec/#catching-exceptions","title":"Catching Exceptions","text":"<p>If you don't want to deal with <code>DataResults</code> while decoding and just want to throw exceptions instead, you can wrap your <code>Codec</code> via the <code>ExtraCodecs.catchDecoderException</code> function:</p> <pre><code>val CODEC: Codec&lt;Example&gt; = ExtraCodecs.catchDecoderException(Example.CODEC)\n</code></pre> <p>this will catch any <code>Exceptions</code> thrown while decoding and turn them into <code>DataResult</code> errors.</p>"},{"location":"addon/worldgen/worldgen/","title":"World Generation Overview","text":"<p>Nova's worldgen is completely based on Minecraft's custom worldgen format with some additions. However, you can also register everything worldgen-related in code if you don't want to use Json. If you  do decide to use Json files, make sure to create a <code>data/worldgen</code> directory in your addon's resources folder before you  start. This is where all your worldgen files will be stored.</p> <p>Below you'll find a quick overview of the format how to use it. Check the sidebar for more detailed information.</p>"},{"location":"addon/worldgen/worldgen/#structures","title":"Structures","text":"<p>Structures are used to generate structures or connected structures in the world (e.g. jungle temple, villages, etc.). Currently not fully supported.</p>"},{"location":"addon/worldgen/worldgen/#features","title":"Features","text":"<p>Check out the <code>Features</code> Overview page for more information.</p> <p>Features (sometimes also called decorators) are used to add additional decorations to the world (e.g. trees, ores, etc.).</p>"},{"location":"addon/worldgen/worldgen/#carvers","title":"Carvers","text":"<p>Check out the <code>Carvers</code> Overview page for more information.</p> <p>Carvers are used to carve out caves and ravines in the world.</p>"},{"location":"addon/worldgen/worldgen/#noise","title":"Noise","text":"<p>Noise setting are responsible for generating the terrain of worlds and determines which blocks to use. Because Nova's region file format is currently pretty inefficient, these settings aren't currently supported.</p>"},{"location":"addon/worldgen/worldgen/#biomes","title":"Biomes","text":"<p>Check out the <code>Biomes</code> and <code>BiomeInjections</code> page for more information.</p> <p>Biomes are regions in the world with distinct features, carvers,  climate, effects and much more.</p> <p>If you want to add <code>PlacedFeatures</code> to an already existing biome, check out the <code>BiomeInjections</code> page.</p>"},{"location":"addon/worldgen/worldgen/#custom-dimensions","title":"Custom Dimensions","text":"<p>TODO</p>"},{"location":"addon/worldgen/features/custom-feature/","title":"Custom Features","text":"<p>Check out the <code>Codecs</code> page</p> <p>Make sure to check out the Codecs page before creating a custom feature.</p>"},{"location":"addon/worldgen/features/custom-feature/#1-empty-feature","title":"1. Empty Feature","text":"<p>To create a custom feature, you'll need to create a new object and extend Nova's <code>FeatureType</code> class. This class needs a <code>Codec</code> for your feature configuration in the constructor, but you can just leave a <code>TODO()</code> call there  for now. You'll also need a <code>FeatureConfiguration</code> class (unless a pre-existing one fits your needs).</p> <p>So let's keep everything empty for now:</p> ExampleFeature.kt<pre><code>object ExampleFeature : FeatureType&lt;ExampleFeatureConfig&gt;(TODO()) {\n\n    override fun place(ctx: FeaturePlaceContext&lt;ExampleFeatureConfig&gt;): Boolean {\n        TODO()\n    }\n\n}\n\nclass ExampleConfiguration : FeatureConfiguration\n</code></pre>"},{"location":"addon/worldgen/features/custom-feature/#2-configuration","title":"2. Configuration","text":"<p>For this example, we'll create a feature that generates a cuboid of blocks. We'll make the height, width and block of the cuboid configurable. Let's also change our configuration class to a <code>data class</code>.</p> ExampleFeature.kt<pre><code>data class ExampleConfiguration(\n    val blockState: BlockStateProvider,\n    val height: IntProvider,\n    val width: IntProvider\n) : FeatureConfiguration\n</code></pre>"},{"location":"addon/worldgen/features/custom-feature/#3-codec","title":"3. Codec","text":"<p>Now we just need to add a <code>Codec</code> to tell Minecraft how to deserialize our configuration.</p> ExampleFeature.kt<pre><code>data class ExampleConfiguration(\n    val blockState: BlockStateProvider,\n    val height: IntProvider,\n    val width: IntProvider\n) : FeatureConfiguration {\n\n    companion object {\n\n        @JvmField\n        val CODEC: Codec&lt;ExampleConfiguration&gt; = RecordCodecBuilder.create { instance -&gt;\n            instance.group(\n                BlockStateProvider.CODEC.fieldOf(\"state\").forGetter(ExampleConfiguration::blockState), // (1)!\n                IntProvider.codec(1, 16).fieldOf(\"height\").forGetter(ExampleConfiguration::height), // (2)!\n                IntProvider.codec(1, 16).fieldOf(\"width\").forGetter(ExampleConfiguration::width)\n            ).apply(instance, ::ExampleConfiguration)\n        }\n\n    }\n\n}\n</code></pre> <ol> <li>Use the <code>BlockStateProvider</code> <code>Codec</code> to deserialize the <code>blockState</code> field.    If you only want to support Nova's <code>BlockNovaMaterial</code>, you can use <code>BlockNovaMaterial.CODEC</code> instead.</li> <li>Use the <code>Codec</code> of <code>IntProvider</code> to deserialize the <code>height</code> and <code>width</code> fields. The <code>codec</code> method takes a minimum     and maximum value, which will be used to clamp the value if it's outside the range (Only enforced for deserialized     IntProviders!).</li> </ol> <p>Now we can pass the <code>CODEC</code> field to the <code>FeatureType</code> constructor.</p> ExampleFeature.kt<pre><code>object ExampleFeature : FeatureType&lt;ExampleConfiguration&gt;(ExampleConfiguration.CODEC) { /* ... */ }\n</code></pre>"},{"location":"addon/worldgen/features/custom-feature/#4-place-function","title":"4. Place function","text":"<p>Finally, we can implement the <code>place</code> function. This function is called for each position returned by the  <code>PlacementModifiers</code>defined in the outer <code>PlacedFeature</code>. The <code>FeaturePlaceContext</code> contains, as the name suggests, the context of the feature placement. This includes the  <code>origin</code> (the position of the feature), the <code>level</code>, a <code>random</code> instance and the <code>config</code> (our configuration). If the feature is used in another feature (For example, the <code>minecraft:random_selector</code> feature), that feature can also be accessed through the <code>topFeature</code> method.</p> <p>Random usage</p> <p>To ensure consistency for the same seed across worlds, you should only use the <code>random</code> instance provided by the <code>FeaturePlaceContext</code>. Do not use <code>Random</code> or <code>ThreadLocalRandom</code> directly.</p> <p>If you have a <code>BlockNovaMaterial</code> or Bukkit <code>Material</code> you want to place, you can use the <code>setBlock</code> method of the <code>FeatureType</code> class.</p> ExampleFeature.kt<pre><code>object ExampleFeature : FeatureType&lt;ExampleConfiguration&gt;(ExampleConfiguration.CODEC) {\n\n   override fun place(ctx: FeaturePlaceContext&lt;ExampleConfiguration&gt;): Boolean {\n      val config = ctx.config()\n      val random = ctx.random()\n      val level = ctx.level()\n      val pos = ctx.origin().mutable()\n\n      val width = config.width.sample(random)\n      val height = config.height.sample(random)\n      val stateProvider = config.blockState\n\n      for (x in -width / 2 until width / 2 + (width % 2)) {\n         for (y in -height / 2 until height / 2 + (height % 2)) {\n            for (z in -width / 2 until width / 2 + (width % 2)) {\n               val state = stateProvider.getState(random, pos)\n               pos.setWithOffset(ctx.origin(), x, y, z)\n               setBlock(level, pos, state)\n            }\n         }\n      }\n\n      return true // (1)!\n   }\n\n}\n</code></pre> <ol> <li>Feature was placed successfully.</li> </ol>"},{"location":"addon/worldgen/features/custom-feature/#5-registering-the-feature","title":"5. Registering the feature","text":"<p>Now we can register the feature type using Nova's <code>FeatureRegistry</code>.</p> FeatureTypes.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject FeatureTypes : FeatureRegistry by ExampleAddon.registry {\n\n    val EXAMPLE = registerFeatureType(\"example\", ExampleFeature)\n\n}\n</code></pre> <ol> <li>Make sure to call this function in your addon's <code>init</code> function to ensure all fields are initialized.</li> </ol>"},{"location":"addon/worldgen/features/custom-feature/#6-using-the-feature","title":"6. Using the feature","text":"<p>We can now properly use our newly defined feature.</p> KotlinJson <p>First, let's create our <code>ConfiguredFeature</code> using the previously defined <code>ExampleConfiguration</code>:</p> ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val EXAMPLE = registerConfiguredFeature(\n        \"example\",\n        FeatureTypes.EXAMPLE,\n        ExampleConfiguration( // (1)!\n            BlockStateProvider.simple(WrapperBlock(Blocks.STAR_SHARDS_ORE)),\n            height = UniformInt.of(1, 3),\n            width = UniformInt.of(1, 3)\n        )\n    )\n\n}\n</code></pre> <ol> <li>A cuboid of star shards ore with a random height and width between 1 and 3.</li> </ol> <p>And now just register our <code>PlacedFeature</code>:</p> <pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val EXAMPLE = placedFeature(\"example\", ConfiguredFeatures.EXAMPLE)\n        .rarityFilter(10)\n        .moveToWorldSurface()\n        .randomVerticalOffset(10)\n        .biomeFilter()\n        .register()\n\n}\n</code></pre> <p>Finally, we can add our <code>PlacedFeature</code> to a biome. For this example, let's add it to all overworld biomes using <code>BiomeInjections</code>:</p> <pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject BiomeInjections : BiomeRegistry by ExampleAddon.registry {\n\n    val OVERWORLD_INJECTIONS = biomeInjection(\"overworld_injections\")\n        .biomes(BiomeTags.IS_OVERWORLD)\n        .feature(GenerationStep.Decoration.VEGETAL_DECORATION, PlacedFeatures.EXAMPLE)\n        .register()\n\n}\n</code></pre> <p>First, let's create our <code>ConfiguredFeature</code>:</p> configured_Feature/example.json<pre><code>{\n  \"type\": \"machines:example\",\n  \"config\": { // (1)!\n    \"state\": {\n      \"Name\": \"machines:star_shards_ore\"\n    },\n    \"height\": {\n      \"type\": \"minecraft:uniform\",\n      \"min_inclusive\": 1,\n      \"max_inclusive\": 3\n    },\n    \"width\": {\n      \"type\": \"minecraft:uniform\",\n      \"min_inclusive\": 1,\n      \"max_inclusive\": 3\n    }\n  }\n}\n</code></pre> <ol> <li>A cuboid of star shards ore with a random height and width between 1 and 3.</li> </ol> <p>And now just register our <code>PlacedFeature</code>:</p> placed_feature/example.json<pre><code>{\n   \"feature\": \"machines:example\",\n   \"placement\": [\n      {\n         \"type\": \"minecraft:rarity_filter\",\n         \"chance\": 10\n      },\n      {\n         \"type\": \"minecraft:heightmap\",\n         \"heightmap\": \"WORLD_SURFACE_WG\"\n      },\n      {\n         \"type\": \"minecraft:random_offset\",\n         \"xz_spread\": 0,\n         \"y_spread\": 10\n      }\n   ]\n}\n</code></pre> <p>Finally, we can add our <code>PlacedFeature</code> to a biome. For this example, let's add it to all overworld biomes using <code>BiomeInjections</code>:</p> <pre><code>{\n  \"biomes\": \"#minecraft:is_overworld\",\n  \"features\": [\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [\n       \"machines:example\"\n    ],\n    []\n  ]\n}\n</code></pre>"},{"location":"addon/worldgen/features/custom-feature/#7-result","title":"7. Result","text":"<p>And that's it! We now have a fully functional feature that's generated in the overworld.</p> <p></p>"},{"location":"addon/worldgen/features/features/","title":"Features Overview","text":"<p>Features (sometimes also called decorators) are used to add additional decorations to the world (e.g. trees, ores, etc.). Most features are registered in 3 \"steps\":</p>"},{"location":"addon/worldgen/features/features/#1-feature-type","title":"1. Feature Type","text":"<p>The feature type is the logic behind the feature. It's the only part that needs to be written in code. Minecraft already has a ton of default feature types (Although they're just called <code>Feature</code> in NMS). Check out the Minecraft Wiki for an up-to-date list of all feature types.</p>"},{"location":"addon/worldgen/features/features/#2-configured-feature","title":"2. Configured Feature","text":"<p>Some feature types require additional configuration which determines what the feature will generate. For example, the  <code>minecraft:ore</code> feature type requires a <code>minecraft:ore_configuration</code> to be defined. This configuration will determine  stuff like: what block the ore will be placed in, how large the ore vein will be, etc. For more details on a specific  configuration, check out its corresponding page in the sidebar. You can create configured feature files in the  <code>data/worldgen/configured_feature</code> directory.</p>"},{"location":"addon/worldgen/features/features/#3-placed-feature","title":"3. Placed Feature","text":"<p>A placed feature determines where and how a configured feature will be placed. You can create placed feature files in the <code>data/worldgen/placed_feature</code> directory. You can find more information on the Placed Feature page.</p>"},{"location":"addon/worldgen/features/features/#using-features","title":"Using Features","text":"<p>To register a new feature, you'll always need a placed feature. When creating a new biome or adding it to an existing one, you'll quickly notice that <code>features</code> is a 2d <code>JsonArray</code> instead of a 1-dimensional one. This is because Minecraft generates different feature categories in a specific order. Below you'll find a list of all feature categories in the order they're generated.</p> <ul> <li>raw_generation  (e.g. end islands) </li> <li>lakes  (e.g. lava lakes) </li> <li>local_modifications  (e.g. amethyst geodes) </li> <li>underground_structures  (e.g. dungeons) </li> <li>surface_structures  (e.g. villages) </li> <li>strongholds  (not used anymore) </li> <li>underground_ores</li> <li>underground_decoration  (e.g. sculk, also used for nether ores for some reason) </li> <li>fluid_springs  (e.g. water springs) </li> <li>vegetal_decoration  (e.g. trees, flowers) </li> <li>top_layer_modification  (used for post-generation modifications, e.g. snow) </li> </ul> <p>Make sure to add your feature to the correct category, or it might not generate at all/get destroyed by another feature.</p> Example: Vanilla birch forest <p>As an example, here's the features <code>JsonArray</code> of the vanilla birch forest biome:</p> <pre><code>\"features\": [\n    [],\n    [\n      \"minecraft:lake_lava_underground\",\n      \"minecraft:lake_lava_surface\"\n    ],\n    [\n      \"minecraft:amethyst_geode\"\n    ],\n    [\n      \"minecraft:monster_room\",\n      \"minecraft:monster_room_deep\"\n    ],\n    [],\n    [],\n    [\n      \"minecraft:ore_dirt\",\n      \"minecraft:ore_gravel\",\n      \"minecraft:ore_granite_upper\",\n      \"minecraft:ore_granite_lower\",\n      \"minecraft:ore_diorite_upper\",\n      \"minecraft:ore_diorite_lower\",\n      \"minecraft:ore_andesite_upper\",\n      \"minecraft:ore_andesite_lower\",\n      \"minecraft:ore_tuff\",\n      \"minecraft:ore_coal_upper\",\n      \"minecraft:ore_coal_lower\",\n      \"minecraft:ore_iron_upper\",\n      \"minecraft:ore_iron_middle\",\n      \"minecraft:ore_iron_small\",\n      \"minecraft:ore_gold\",\n      \"minecraft:ore_gold_lower\",\n      \"minecraft:ore_redstone\",\n      \"minecraft:ore_redstone_lower\",\n      \"minecraft:ore_diamond\",\n      \"minecraft:ore_diamond_large\",\n      \"minecraft:ore_diamond_buried\",\n      \"minecraft:ore_lapis\",\n      \"minecraft:ore_lapis_buried\",\n      \"minecraft:ore_copper\",\n      \"minecraft:underwater_magma\",\n      \"minecraft:disk_sand\",\n      \"minecraft:disk_clay\",\n      \"minecraft:disk_gravel\"\n    ],\n    [],\n    [\n      \"minecraft:spring_water\",\n      \"minecraft:spring_lava\"\n    ],\n    [\n      \"minecraft:glow_lichen\",\n      \"minecraft:forest_flowers\",\n      \"minecraft:trees_birch\",\n      \"minecraft:flower_default\",\n      \"minecraft:patch_grass_forest\",\n      \"minecraft:brown_mushroom_normal\",\n      \"minecraft:red_mushroom_normal\",\n      \"minecraft:patch_sugar_cane\",\n      \"minecraft:patch_pumpkin\"\n    ],\n    [\n      \"minecraft:freeze_top_layer\"\n    ]\n]\n</code></pre> <p>Check out the Biomes page for more information on how to create a new biome. If you want to add your feature to an existing biome, check out the Biome Injections page.</p>"},{"location":"addon/worldgen/features/placed-feature/","title":"Placed Features","text":"<p>A placed feature determines where and how a configured feature will be placed. Placed features work via placement modifiers  that can be applied to a configured feature. </p> <p>You can create placed feature files in the <code>data/worldgen/placed_feature</code> directory or register them in the <code>FeatureRegistry</code> in code.</p>"},{"location":"addon/worldgen/features/placed-feature/#structure","title":"Structure","text":"<code>feature</code> <p>The configured feature's id</p> <code>placement</code> <p>A list of placement modifiers. See Placement Modifiers for more information. </p> <p>Here's an example of Minecraft's large diamond ore placed feature: </p> KotlinJson <pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val ORE_DIAMOND_LARGE_PLACEMENT = placedFeature(\"ore_diamond_large\", OreFeatures.ORE_DIAMOND_LARGE) // (1)!\n        .rarityFilter(9) // (2)!\n        .inSquareSpread() // (3)!\n        .heightRangeTriangle(VerticalAnchor.aboveBottom(-80), VerticalAnchor.aboveBottom(80)) // (4)!\n        .biomeFilter() // (5)!\n        .register()\n\n}\n</code></pre> <ol> <li>The configured feature to place</li> <li>Only give the feature a chance of \\({{}^{1}\\!/_{9}}\\) to generate</li> <li>Adds a random integer in the range \\([0;15]\\) to the x- and z-coordinates of the initial position</li> <li>Sets the y-coordinate to a value provided by the trapezoid height provider. <code>triangle</code> is a shortcut for the trapezoid height provider with a plateau of width 0. This provider provides a y-coordinate in the range \\([-80;80]\\) below/above the bedrock layer via an isosceles trapezoidal distribution. Since blocks can't be placed under the bedrock layer, this again halves the chance of the feature generating.</li> <li>Only generates the feature in biomes that contain this feature (the <code>in_square</code> placement modifiers might have generated a position in a different biome).</li> </ol> ore_diamond_large.json<pre><code>{\n  \"feature\": \"minecraft:ore_diamond_large\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:rarity_filter\", // (1)!\n      \"chance\": 9\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:height_range\", // (3)!\n      \"height\": {\n        \"type\": \"minecraft:trapezoid\", // (4)!\n        \"max_inclusive\": {\n          \"above_bottom\": 80\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": -80\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\" // (5)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Only give the feature a chance of \\({{}^{1}\\!/_{9}}\\) to generate</li> <li>Adds a random integer in the range \\([0;15]\\) to the x- and z-coordinates of the initial position</li> <li>Sets the y-coordinate to a value provided by the trapezoid height provider</li> <li>Provides a y-coordinate in the range \\([-80;80]\\) below/above the bedrock layer via an isosceles trapezoidal distribution. Since blocks can't be placed under the bedrock layer, this again halves the chance of the feature generating.</li> <li>Only generates the feature in biomes that contain this feature (the <code>in_square</code> placement modifiers might have generated a position in a different biome).</li> </ol>"},{"location":"addon/worldgen/features/placed-feature/#placement-modifiers","title":"Placement Modifiers","text":"<p>A Placement modifier takes an initial position and returns empty, one or more block positions. These modifiers are chained, and pretty much act like a lot of <code>flatMap</code> calls. In fact, that's exactly what Minecraft does internally:</p> PlacedFeature.java<pre><code>private boolean placeWithContext(PlacementContext ctx, RandomSource random, BlockPos pos) {\n    Stream&lt;BlockPos&gt; stream = Stream.of(pos);\n\n    for (PlacementModifier placementmodifier : this.placement) {\n        stream = stream.flatMap((blockPos) -&gt; {\n            return placementmodifier.getPositions(ctx, random, blockPos);\n        });\n    }\n\n    // ...\n}\n</code></pre> <p>So you can also think of these positions as attempts to place the configured feature. A list of vanilla placement modifiers can be found below.</p>"},{"location":"addon/worldgen/features/placed-feature/#minecraftbiome","title":"<code>minecraft:biome</code>","text":"<p>Returns the position if the configured feature is registered in the biome's <code>feature</code> list at the given position. Empty otherwise.</p> KotlinJson Example<pre><code>BiomeFilter.biome()\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:biome\"\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftblock_predicate_filter","title":"<code>minecraft:block_predicate_filter</code>","text":"<p>Returns the position if the block predicate matches the block at the given position. Empty otherwise.</p> Name Description <code>predicate</code> The <code>BlockPredicate</code> KotlinJson Example<pre><code>BlockPredicateFilter.forPredicate(BlockPredicate.matchesTag(BlockTags.STONE_ORE_REPLACEABLES))\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:block_predicate_filter\",\n  \"predicate\": {\n    \"type\": \"minecraft:matching_block_tag\",\n    \"tag\": \"minecraft:stone_ore_replaceables\"\n  }\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftcarving_mask","title":"<code>minecraft:carving_mask</code>","text":"<p>Returns all positions in the given position's chunk that were carved out by a carver.</p> Name Description <code>step</code> The carver step. Can be <code>air</code> or <code>liquid</code> KotlinJson Example<pre><code>CarvingMaskPlacement.forStep(GenerationStep.Carving.AIR)\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:carving_mask\",\n  \"step\": \"air\"\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftcount","title":"<code>minecraft:count</code>","text":"<p>Returns the given position <code>count</code> times.</p> Name Description <code>count</code> An <code>IntProvider</code> (Range limit in Json is \\([0;256]\\)). The provided value is the number of times the position is returned KotlinJson Example - Simple<pre><code>CountPlacement.of(10)\n</code></pre> Example - Int Provider<pre><code>CountPlacement.of(UniformInt.of(1, 10))\n</code></pre> Example - Simple<pre><code>{\n  \"type\": \"minecraft:count\",\n  \"count\": 10\n}\n</code></pre> Example - Int Provider<pre><code>{\n  \"type\": \"minecraft:count\",\n  \"count\": {\n    \"type\": \"minecraft:uniform\",\n    \"min_inclusive\": 1,\n    \"max_inclusive\": 10\n  }\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftcount_on_every_layer","title":"<code>minecraft:count_on_every_layer</code>","text":"<p>Deprecated. For more information, check out the Minecraft Wiki</p>"},{"location":"addon/worldgen/features/placed-feature/#minecraftenvironment_scan","title":"<code>minecraft:environment_scan</code>","text":"<p>Scans for blocks matching the given block predicate up/down until it finds a matching block or the max number of steps is reached. If no matching block is found, empty is returned.</p> Name Description <code>direction_of_search</code> The direction of the scan. Can be <code>up</code> or <code>down</code> <code>target_condition</code> The <code>BlockPredicate</code> to match <code>allowed_search_condition</code> (optional) A <code>BlockPredicate</code> that each scanned block must match to allow further scanning. If not provided, no condition is applied. <code>max_steps</code> An <code>int</code> that determines the max number of steps. (Range limit in Json is \\([1;32]\\)) KotlinJson Example<pre><code>EnvironmentScanPlacement.scanningFor(\n    Direction.DOWN, // Search direction\n    BlockPredicate.solid(), // Target predicate\n    BlockPredicate.matchesBlocks(Blocks.AIR, Blocks.WATER), // Allowed search predicate\n    12 // Max steps\n)\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:environment_scan\",\n  \"direction_of_search\": \"down\",\n  \"max_steps\": 12,\n  \"target_condition\": {\n    \"type\": \"minecraft:solid\"\n  },\n  \"allowed_search_condition\": {\n    \"type\": \"minecraft:matching_blocks\",\n    \"blocks\": [\n      \"minecraft:air\",\n      \"minecraft:water\"\n    ]\n  }\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftheight_range","title":"<code>minecraft:height_range</code>","text":"<p>Takes the input position and sets the y coordinate to a value provided by the given height provider.</p> Name Description <code>height</code> The <code>HeightProvider</code> providing the y-coordinate KotlinJson Example<pre><code>HeightRangePlacement.triangle(VerticalAnchor.aboveBottom(-80), VerticalAnchor.aboveBottom(80))\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:height_range\",\n  \"height\": {\n    \"type\": \"minecraft:trapezoid\",\n    \"max_inclusive\": {\n      \"above_bottom\": 80\n    },\n    \"min_inclusive\": {\n      \"above_bottom\": -80\n    }\n  }\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftheightmap","title":"<code>minecraft:heightmap</code>","text":"<p>Takes the input position and sets the y coordinate to one block above the heightmap at the given position. Check out the heightmap gist page for image examples.</p> Name Description <code>heightmap</code> The heightmap type to use. Can be <code>WORLD_SURFACE_WG</code>, <code>WORLD_SURFACE</code>, <code>OCEAN_FLOOR_WG</code>, <code>OCEAN_FLOOR</code>, <code>MOTION_BLOCKING</code> or <code>MOTION_BLOCKING_NO_LEAVES</code>. KotlinJson Example<pre><code>HeightmapPlacement.onHeightmap(Heightmap.Types.WORLD_SURFACE_WG)\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:heightmap\",\n  \"heightmap\": \"WORLD_SURFACE_WG\"\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftin_square","title":"<code>minecraft:in_square</code>","text":"<p>Adds a random integer in the range \\([0;15]\\) to the x- and z-coordinates of the given position.</p> KotlinJson Example<pre><code>InSquarePlacement.spread()\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:in_square\"\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftnoise_based_count","title":"<code>minecraft:noise_based_count</code>","text":"<p>Gets the noise value at the given position and, if the value is positive, returns the given position multiple times. The amount of times the position is returned is determined by the following code: <pre><code>double noise = Biome.BIOME_INFO_NOISE.getValue((double)pos.getX() / noiseFactor, (double)pos.getZ() / noiseFactor, false);\nint count = (int)Math.ceil((noise + noiseOffset) * noiseToCountRatio);\n</code></pre></p> Name Description <code>noise_to_count_ratio</code> An <code>int</code> that defines the ratio of noise to count. <code>noise_factor</code> A <code>double</code> that scales the noise horizontally. The higher the value, the wider the peaks. <code>noise_offset</code> (optional in Json) A <code>double</code> that offsets the noise vertically. KotlinJson Example<pre><code>NoiseBasedCountPlacement.of(\n    160, // Noise to count ratio\n    80.0, // Noise factor\n    .3 // Noise offset\n)\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:noise_based_count\"\n  \"noise_factor\": 80.0,\n  \"noise_offset\": 0.3,\n  \"noise_to_count_ratio\": 160,\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftnoise_threshold_count","title":"<code>minecraft:noise_threshold_count</code>","text":"<p>Returns the given position multiple times. If the noise value at the given position is below the given threshold, the position is returned <code>below_noise</code> times. Otherwise, it is returned <code>above_noise</code> times. Or, in code:</p> <pre><code>if (noise &lt; threshold) {\n  return below_noise;\n} else { // noise &gt;= threshold\n  return above_noise;\n}\n</code></pre> Name Description <code>noise_level</code> A <code>double</code> value of the threshold that determines whether the position is returned <code>below_noise</code> or <code>above_noise</code> times. <code>below_noise</code> An <code>int</code> that determines how often the position is returned if the noise value is below the threshold. <code>above_noise</code> An <code>int</code> that determines how often the position is returned if the noise value is above/equal to the threshold. KotlinJson Example<pre><code>NoiseThresholdCountPlacement.of(\n    -0.8, // Noise level\n    5, // Below noise\n    10 // Above noise\n)\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:noise_threshold_count\",\n  \"noise_level\": -0.8\n  \"above_noise\": 10,\n  \"below_noise\": 5,\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftrandom_offset","title":"<code>minecraft:random_offset</code>","text":"<p>Offsets the given position by the provided <code>IntProvider's</code> values.</p> Name Description <code>xz_spread</code> An <code>IntProvider</code>. (Range limit in Json is \\([-16;16]\\)). x and z are sampled separately! <code>y_spread</code> An <code>IntProvider</code>. (Range limit in Json is \\([-16;16]\\)). KotlinJson Example<pre><code>RandomOffsetPlacement.of(ConstantInt.ZERO, UniformInt.of(3, 9))\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:random_offset\",\n  \"xz_spread\": 0,\n  \"y_spread\": {\n    \"type\": \"minecraft:uniform\",\n    \"value\": {\n      \"max_inclusive\": 9,\n      \"min_inclusive\": 3\n    }\n  }\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftrarity_filter","title":"<code>minecraft:rarity_filter</code>","text":"<p>Either returns the given position or empty. The chance of returning the position is determined by the given chance and calculated via <code>1 / chance</code>.</p> Name Description <code>chance</code> A positive <code>int</code> that determines the average amount of tries between a success. KotlinJson Example<pre><code>RarityFilter.onAverageOnceEvery(9)\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:rarity_filter\",\n  \"chance\": 9\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftsurface_relative_threshold_filter","title":"<code>minecraft:surface_relative_threshold_filter</code>","text":"<p>Returns the given position if the surface height at the given position is inside the specified range. Otherwise, returns empty. Check out the heightmap gist page for image examples.</p> Name Description <code>heightmap</code> The heightmap to use. Can be <code>WORLD_SURFACE_WG</code>, <code>WORLD_SURFACE</code>, <code>OCEAN_FLOOR_WG</code>, <code>OCEAN_FLOOR</code>, <code>MOTION_BLOCKING</code> or <code>MOTION_BLOCKING_NO_LEAVES</code>. <code>min_inclusive</code> (Optional in Json, defaults to \\(-2^{31}\\)) A <code>double</code> value that defines the minimum surface level. <code>max_inclusive</code> (Optional in Json, defaults to \\(2^{31} - 1\\)) A <code>double</code> value that defines the maximum surface level. KotlinJson Example<pre><code>SurfaceRelativeThresholdFilter.of(\n    Heightmap.Types.OCEAN_FLOOR_WG,\n    Int.MIN_VALUE, // min\n    -2 // max\n)\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:surface_relative_threshold_filter\",\n  \"heightmap\": \"OCEAN_FLOOR_WG\",\n  \"max_inclusive\": -2\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#minecraftsurface_water_depth_filter","title":"<code>minecraft:surface_water_depth_filter</code>","text":"<p>If the amount of motion-blocking blocks under the surface is less than/equal to <code>max_water_depth</code>, returns the given position. Otherwise, returns empty.</p> Name Description <code>max_water_depth</code> An <code>int</code> defining the maximum allowed depth. KotlinJson Example<pre><code>SurfaceWaterDepthFilter.forMaxDepth(2)\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:surface_water_depth_filter\",\n  \"max_water_depth\": 2\n}\n</code></pre>"},{"location":"addon/worldgen/features/placed-feature/#custom-placementmodifiers","title":"Custom <code>PlacementModifiers</code>","text":"<p>You can also implement your own custom <code>PlacementModifiers</code> by extending Minecraft's <code>PlacementModifier</code> class. You can then register your custom <code>PlacementModifier</code> via the <code>FeatureRegistry</code> either by creating a <code>PlacementModifierType</code> or by providing the <code>Codec</code> directly and thus creating an inline <code>PlacementModifierType</code>. Check out the Codecs page for more information on Mojang's serialization system. Here's how you'd implement the <code>minecraft:count</code> <code>PlacementModifier</code> as an example:</p> Inline PlacementModifierTypePlacementModifierType object PlacementModifiers.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacementModifiers : FeatureRegistry by ExampleAddon.registry {\n\n    val COUNT_PLACEMENT = registerPlacementModifierType(\"count\", CountPlacement.CODEC)\n\n}\n</code></pre> CountPlacement.kt<pre><code>class CountPlacement(val count: IntProvider) : PlacementModifier() {\n\n    override fun getPositions(ctx: PlacementContext, random: RandomSource, pos: BlockPos): Stream&lt;BlockPos&gt; =\n        Stream.generate { pos }.limit(count.sample(random).toLong())\n\n    override fun type(): PlacementModifierType&lt;*&gt; = PlacementModifiers.COUNT_PLACEMENT\n\n    companion object {\n\n        @JvmField // (1)!\n        val CODEC: Codec&lt;CountPlacement&gt; = IntProvider\n            .codec(0, 256)\n            .fieldOf(\"count\")\n            .xmap(::CountPlacement, CountPlacement::count)\n            .codec()\n\n        @JvmStatic\n        fun of(count: Int) = CountPlacement(ConstantInt.of(count))\n\n        @JvmStatic\n        fun of(count: IntProvider) = CountPlacement(count)\n\n    }\n\n}\n</code></pre> <ol> <li>This allows <code>CODEC</code> to be accessed as a field from Java code instead of having to call <code>getCODEC()</code></li> </ol> CountPlacement.kt<pre><code>object CountPlacementType : PlacementModifierType&lt;CountPlacement&gt; {\n\n    private val CODEC: Codec&lt;CountPlacement&gt; = IntProvider\n        .codec(0, 256)\n        .fieldOf(\"count\")\n        .xmap(::CountPlacement, CountPlacement::count)\n        .codec()\n\n    override fun codec() = CODEC\n\n}\n</code></pre> PlacementModifiers.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacementModifiers : FeatureRegistry by ExampleAddon.registry {\n\n    val COUNT_PLACEMENT = registerPlacementModifierType(\"count\", CountPlacementType)\n\n}\n</code></pre> CountPlacement.kt<pre><code>class CountPlacement(val count: IntProvider) : PlacementModifier() {\n\n    override fun getPositions(ctx: PlacementContext, random: RandomSource, pos: BlockPos): Stream&lt;BlockPos&gt; =\n        Stream.generate { pos }.limit(count.sample(random).toLong())\n\n    override fun type(): PlacementModifierType&lt;*&gt; = CountPlacementType\n\n    companion object {\n\n        @JvmStatic\n        fun of(count: Int) = CountPlacement(ConstantInt.of(count))\n\n        @JvmStatic\n        fun of(count: IntProvider) = CountPlacement(count)\n\n    }\n\n}\n</code></pre> <p>Minecraft also offers further abstraction via the <code>RepeatingPlacement</code> and <code>PlacementFilter</code> classes. They both override the <code>getPositions</code> method and provide the <code>count</code> and <code>shouldPlace</code> methods respectively.</p>"},{"location":"addon/worldgen/features/placed-feature/#inlined","title":"Inlined","text":"<p>Some placed features might not be worth registering in the <code>Registry</code> (e.g. <code>fill_layer</code> features for flat worlds). In such cases, <code>PlacementUtils.inlinePlaced</code> can be used to get a <code>Holder</code> that contains a <code>PlacedFeature</code> constructed from the <code>ConfiguredFeature</code> and <code>PlacementModifiers</code> provided.</p> <p>As an example, here's how <code>fill_layer</code> placed features are inlined in Minecraft's flat level generator:</p> FlatLevelGeneratorSettings.java<pre><code>/* ... */\n\nfor (layer = 0; layer &lt; layers.size(); ++layer) {\n    BlockState blockstate = layers.get(layer);\n\n    if (!Heightmap.Types.MOTION_BLOCKING.isOpaque().test(blockstate)) {\n        layers.set(layer, null);\n        builder.addFeature(GenerationStep.Decoration.TOP_LAYER_MODIFICATION, PlacementUtils.inlinePlaced(Feature.FILL_LAYER, new LayerConfiguration(layer, blockstate)));\n    }\n}\n\n/* ... */\n</code></pre>"},{"location":"addon/worldgen/features/configurations/bamboo/","title":"Bamboo feature","text":"<p>The <code>bamboo</code> feature is used to add bamboo to the world.</p>"},{"location":"addon/worldgen/features/configurations/bamboo/#configuration","title":"Configuration","text":"<p>Bamboo features can only be configured to have a specific probability of spawning a podzol disk under the bamboo.</p> Option Type Description <code>probability</code> A <code>float</code> in the range \\([0.0;1.0]\\). Determines the probability of spawning a podzol disk under the bamboo. <p>In code, the configuration is done via the <code>ProbabilityFeatureConfiguration</code> class.</p>"},{"location":"addon/worldgen/features/configurations/bamboo/#example","title":"Example","text":"<p>As an example, here's the configured and placed feature for the bamboo in the jungle.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val BAMBOO_SOME_PODZOL = registerConfiguredFeature(\n        \"bamboo_some_podzol\",\n        Feature.BAMBOO,\n        ProbabilityFeatureConfiguration(0.2f) // (1)!\n    )\n\n}\n</code></pre> <ol> <li>Gives a \\(20\\%\\) chance of spawning a podzol disk under the bamboo.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures: FeatureRegistry by ExampleAddon.registry {\n\n    val BAMBOO_SOME_PODZOL = placedFeature(\"bamboo_some_podzol\", ConfiguredFeatures.BAMBOO_SOME_PODZOL)\n        .noiseBasedCount(170, 80.0, 0.3) // (1)!\n        .inSquareSpread() // (2)!\n        .moveToWorldSurface() // (3)!\n        .biomeFilter() // (4)!\n        .register()\n\n}\n</code></pre> <ol> <li>Use noise to determine bamboo amount.     See Noise-based count placement for more information.</li> <li>Spread the tries in a square.</li> <li>Make sure to place the bamboo on the world surface. This call is equivalent to     <pre><code>HeightmapPlacement.onHeightmap(Heightmap.Types.WORLD_SURFACE_WG)\n</code></pre></li> <li>Only place the bamboo in biomes that have bamboo.</li> </ol> configured_feature/bamboo_some_podzol.json<pre><code>  \"type\": \"minecraft:bamboo\",\n  \"config\": {\n    \"probability\": 0.2 // (1)!\n  }\n</code></pre> <ol> <li>Gives a \\(20\\%\\) chance of spawning a podzol disk under the bamboo.</li> </ol> placed_feature/bamboo.json<pre><code>{\n  \"feature\": \"minecraft:bamboo_some_podzol\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:noise_based_count\", // (1)!\n      \"noise_factor\": 80.0,\n      \"noise_offset\": 0.3,\n      \"noise_to_count_ratio\": 160\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:heightmap\",\n      \"heightmap\": \"WORLD_SURFACE_WG\" // (3)!\n    },\n    {\n      \"type\": \"minecraft:biome\" // (4)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Use noise to determine bamboo amount.     See Noise-based count placement for more information.</li> <li>Spread the tries in a square.</li> <li>Make sure to place the bamboo on the world surface.</li> <li>Only place the bamboo in biomes that have bamboo.</li> </ol>"},{"location":"addon/worldgen/features/configurations/bamboo/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/basalt-columns/","title":"Basalt columns feature","text":"<p>The <code>basalt_columns</code> feature allows you to add basalt columns to the world.</p>"},{"location":"addon/worldgen/features/configurations/basalt-columns/#configuration","title":"Configuration","text":"<p>The <code>basalt_columns</code> feature has the following configuration options:</p> Option Type Description <code>reach</code> An <code>IntProvider</code>. (Range limit in Json is \\([0;3]\\)) Determines the maximum radius from the center of the current column cluster. <code>height</code> An <code>IntProvider</code>. (Range limit in Json is \\([1;10]\\)) Determines the maximum height of the current column cluster. (Actual height is \\(\\text{height} + 1\\) <p>In code, the configuration is done via the <code>ColumnFeatureConfiguration</code> class.</p>"},{"location":"addon/worldgen/features/configurations/basalt-columns/#example","title":"Example","text":"<p>As an example, here's the configured and placed feature for the large basalt columns in the nether.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val LARGE_BASALT_COLUMNS = registerConfiguredFeature(\n        \"large_basalt_columns\",\n        Feature.BASALT_COLUMNS,\n        ColumnFeatureConfiguration(UniformInt.of(2, 3), UniformInt.of(5, 10)) // (1)!\n    )\n\n}\n</code></pre> <ol> <li>Randomly chooses a radius between 2 and 3 and a height between 5 and 10.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures: FeatureRegistry by ExampleAddon.registry {\n\n    val LARGE_BASALT_COLUMNS = placedFeature(\"large_basalt_columns\", ConfiguredFeatures.LARGE_BASALT_COLUMNS)\n        .countOnEveryLayer(2) // (1)!\n        .biomeFilter() // (2)!\n        .register()\n\n}\n</code></pre> <ol> <li>Spreads the basalt columns to multiple layers.</li> <li>Only place the columns in biomes that have basalt.</li> </ol> configured_feature/large_basalt_columns.json<pre><code>{\n  \"type\": \"minecraft:basalt_columns\",\n  \"config\": {\n    \"reach\": { // (1)!\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 3,\n        \"min_inclusive\": 2\n      }\n    },\n    \"height\": { // (2)!\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 10,\n        \"min_inclusive\": 5\n      }\n    }\n  }\n}\n</code></pre> <ol> <li>Randomly chooses a radius between 2 and 3.</li> <li>Randomly chooses a height between 5 and 10.</li> </ol> placed_feature/large_basalt_columns.json<pre><code>{\n  \"feature\": \"minecraft:large_basalt_columns\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count_on_every_layer\", // (1)!\n      \"count\": 2\n    },\n    {\n      \"type\": \"minecraft:biome\" // (2)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Spreads the basalt columns to multiple layers.</li> <li>Only place the columns in biomes that have basalt.</li> </ol>"},{"location":"addon/worldgen/features/configurations/basalt-columns/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/block-column/","title":"Block column feature","text":"<p>The <code>block_column</code> feature allows you to add a column of blocks (e.g. sugar cane or cacti) to the world.</p>"},{"location":"addon/worldgen/features/configurations/block-column/#configuration","title":"Configuration","text":"<p>The following configuration options are available:</p> Option Type Description <code>layers</code> An array of <code>Layers</code>. See below for more information Defines which block states should be used at specific heights. <code>direction</code> <code>north</code>, <code>east</code>, <code>south</code>, <code>west</code>, <code>up</code> or <code>down</code> Determines the direction of the column. <code>allowed_placement</code> A BlockPredicate A predicate that has to match every block in the column before the block is placed. <code>prioritize_tip</code> A <code>boolean</code> When set to <code>true</code>, all underlying block will be removed if the current block doesn't match the provided BlockPredicate <p>In code, the <code>BlockColumnConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/block-column/#layer","title":"Layer","text":"<p>Layers have 2 options: <code>height</code>, an <code>IntProvider</code> that determines the height of this  layer, and <code>block</code>, a <code>BlockStateProvider</code> that determines the block state to use for this layer.</p>"},{"location":"addon/worldgen/features/configurations/block-column/#examples","title":"Examples","text":"<p>As an example, here's the configured feature used to place cacti in the desert. Please note that Minecraft uses the <code>random_patch</code> feature to actually spread cacti and sugar cane.</p>"},{"location":"addon/worldgen/features/configurations/block-column/#cactus","title":"Cactus","text":"KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val CACTUS = registerConfiguredFeature(\n        \"cactus\",\n        Feature.BLOCK_COLUMN,\n        BlockColumnConfiguration(\n            listOf(BlockColumnConfiguration.Layer(BiasedToBottomInt.of(1, 3), SimpleStateProvider.simple(Blocks.CACTUS))), // (1)!\n            Direction.UP, // (2)!\n            BlockPredicate.matchesBlocks(Blocks.AIR), // (3)!\n            false // (4)!\n        )\n    )\n\n}\n</code></pre> <ol> <li>The cactus only has a single layer of the <code>cactus</code> block which can be 1, 2 or 3 blocks high, biased towards a shorter height.</li> <li>The cactus grows upwards.</li> <li>Only place the cactus if the block above is air.</li> <li>Only the top of the cactus will be cut off if the block above is not air.</li> </ol> configured_feature/cactus.json<pre><code>{\n  \"type\": \"minecraft:block_column\",\n  \"config\": {\n    \"direction\": \"up\", // (1)!\n    \"allowed_placement\": {\n      \"type\": \"minecraft:matching_blocks\",\n      \"blocks\": \"minecraft:air\" // (2)!\n    },\n    \"prioritize_tip\": false, // (3)!\n    \"layers\": [\n      { // (4)!\n        \"height\": { // (5)!\n          \"type\": \"minecraft:biased_to_bottom\",\n          \"value\": {\n            \"max_inclusive\": 3,\n            \"min_inclusive\": 1\n          }\n        },\n        \"provider\": {\n          \"type\": \"minecraft:simple_state_provider\",\n          \"state\": {\n            \"Name\": \"minecraft:cactus\",\n            \"Properties\": {\n              \"age\": \"0\"\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre> <ol> <li>The cactus grows upwards.</li> <li>Only place the cactus if the block above is air.</li> <li>Only the top of the cactus will be cut off if the block above is not air.</li> <li>Since the cactus only needs the normal cactus block, we only need one layer.</li> <li>The cactus can be 1, 2 or 3 blocks high, biased towards a shorter height.</li> </ol>"},{"location":"addon/worldgen/features/configurations/block-column/#result","title":"Result","text":"AloneNaturally generated <p><p> </p></p> <p><p> </p></p>"},{"location":"addon/worldgen/features/configurations/block-column/#glow-berry-vines","title":"Glow berry vines","text":"<p>Or, as another example, here's the configured and placed feature for glow berries/cave vines.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val CAVE_VINE: ConfiguredFeature&lt;BlockColumnConfiguration, Feature&lt;BlockColumnConfiguration&gt;&gt;\n\n    init {\n        val upperStateProvider = WeightedStateProvider( // (1)!\n            SimpleWeightedRandomList.builder&lt;BlockState&gt;()\n                .add(Blocks.CAVE_VINES_PLANT.defaultBlockState(), 4)\n                .add(Blocks.CAVE_VINES_PLANT.defaultBlockState().setValue(CaveVines.BERRIES, true), 1)\n        )\n\n        val bottomStateProvider = RandomizedIntStateProvider(WeightedStateProvider( // (2)!\n            SimpleWeightedRandomList.builder&lt;BlockState&gt;()\n                .add(Blocks.CAVE_VINES.defaultBlockState(), 4)\n                .add(Blocks.CAVE_VINES.defaultBlockState().setValue(CaveVines.BERRIES, true), 1)\n        ), CaveVinesBlock.AGE, UniformInt.of(23, 25))\n\n        val config = BlockColumnConfiguration(\n            listOf( // (3)!\n                BlockColumnConfiguration.Layer(\n                    WeightedListInt( // (4)!\n                        SimpleWeightedRandomList.builder&lt;IntProvider&gt;()\n                            .add(UniformInt.of(0, 19), 2)\n                            .add(UniformInt.of(0, 2), 3)\n                            .add(UniformInt.of(0, 6), 10)\n                            .build()\n                    ),\n                    upperStateProvider // (5)!\n                ),\n                BlockColumnConfiguration.Layer(\n                    ConstantInt.of(1), // (6)!\n                    bottomStateProvider // (7)!\n                )\n            ),\n            Direction.DOWN, // (8)!\n            BlockPredicate.ONLY_IN_AIR_PREDICATE, // (9)!\n            true // (10)!\n        )\n\n        CAVE_VINE = registerConfiguredFeature(\"cave_vine\", Feature.BLOCK_COLUMN, config)\n    }\n\n}\n</code></pre> <ol> <li>Each block of the upper layer of the vine can either be a normal or a vine with berries (biased towards normal).</li> <li>The bottom layer of the vine can either be a normal or a vine with berries (biased towards normal), and the age of the vine is randomized between 23 and 25.</li> <li>The vine has two layers, the upper layer (<code>upperStateProvider</code>) and the bottom layer (<code>bottomStateProvider</code>).</li> <li>The upper layer can be 0 to 19 blocks high, biased towards a medium height.</li> <li>The upper layer can be either a normal or a vine with berries (biased towards normal).</li> <li>The bottom layer is always 1 block high.</li> <li>The bottom layer can be either a normal or a vine with berries (biased towards normal), and the age of the vine is randomized between 23 and 25.</li> <li>The vine grows downwards.</li> <li>Only place the vine if the block below is air.</li> <li>If the predicate fails, the entire vine will be removed.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures: FeatureRegistry by ExampleAddon.registry {\n\n    val CAVE_VINE = placedFeature(\"cave_vine\", ConfiguredFeatures.CAVE_VINE)\n        .count(188) // (1)!\n        .inSquareSpread() // (2)!\n        .heightRangeUniform(VerticalAnchor.BOTTOM, VerticalAnchor.absolute(256)) // (3)!\n        .environmentScan( // (4)!\n            Direction.UP,\n            BlockPredicate.hasSturdyFace(Direction.DOWN),\n            BlockPredicate.ONLY_IN_AIR_PREDICATE,\n            12\n        )\n        .randomVerticalOffset(-1) // (5)!\n        .biomeFilter() // (6)!\n        .register()\n\n}\n</code></pre> <ol> <li>188 tries per chunk.</li> <li>Spread the locations in a square.</li> <li>Only place the vines in the y-range of bottom to 256.</li> <li>Search for the first block that has a solid face downwards (max 12 blocks away).</li> <li>Offset the location by \\((0,-1,0)\\).</li> <li>Only place the vines if the current biome has cave vines.</li> </ol> configured_feature/cave_vine.json<pre><code>{\n  \"type\": \"minecraft:block_column\",\n  \"config\": {\n    \"direction\": \"down\", // (1)!\n    \"allowed_placement\": {\n      \"type\": \"minecraft:matching_blocks\",\n      \"blocks\": \"minecraft:air\" // (2)!\n    },\n    \"prioritize_tip\": true, // (3)!\n    \"layers\": [\n      { // (4)!\n        \"height\": {\n          \"type\": \"minecraft:weighted_list\",\n          \"distribution\": [\n            {\n              \"data\": {\n                \"type\": \"minecraft:uniform\",\n                \"value\": {\n                  \"max_inclusive\": 19,\n                  \"min_inclusive\": 0\n                }\n              },\n              \"weight\": 2\n            },\n            {\n              \"data\": {\n                \"type\": \"minecraft:uniform\",\n                \"value\": {\n                  \"max_inclusive\": 2,\n                  \"min_inclusive\": 0\n                }\n              },\n              \"weight\": 3\n            },\n            {\n              \"data\": {\n                \"type\": \"minecraft:uniform\",\n                \"value\": {\n                  \"max_inclusive\": 6,\n                  \"min_inclusive\": 0\n                }\n              },\n              \"weight\": 10\n            }\n          ]\n        },\n        \"provider\": {\n          \"type\": \"minecraft:weighted_state_provider\",\n          \"entries\": [\n            {\n              \"data\": {\n                \"Name\": \"minecraft:cave_vines_plant\",\n                \"Properties\": {\n                  \"berries\": \"false\"\n                }\n              },\n              \"weight\": 4\n            },\n            {\n              \"data\": {\n                \"Name\": \"minecraft:cave_vines_plant\",\n                \"Properties\": {\n                  \"berries\": \"true\"\n                }\n              },\n              \"weight\": 1\n            }\n          ]\n        }\n      },\n      {\n        \"height\": 1,\n        \"provider\": {\n          \"type\": \"minecraft:randomized_int_state_provider\",\n          \"property\": \"age\",\n          \"source\": {\n            \"type\": \"minecraft:weighted_state_provider\",\n            \"entries\": [\n              {\n                \"data\": {\n                  \"Name\": \"minecraft:cave_vines\",\n                  \"Properties\": {\n                    \"age\": \"0\",\n                    \"berries\": \"false\"\n                  }\n                },\n                \"weight\": 4\n              },\n              {\n                \"data\": {\n                  \"Name\": \"minecraft:cave_vines\",\n                  \"Properties\": {\n                    \"age\": \"0\",\n                    \"berries\": \"true\"\n                  }\n                },\n                \"weight\": 1\n              }\n            ]\n          },\n          \"values\": {\n            \"type\": \"minecraft:uniform\",\n            \"value\": {\n              \"max_inclusive\": 25,\n              \"min_inclusive\": 23\n            }\n          }\n        }\n      }\n    ]\n  }\n}\n</code></pre> <ol> <li>The vines grow downwards.</li> <li>Only place the vines if the block below is air.</li> <li>Remove all vines if the block below is not air.</li> <li>Place multiple cave vine plants (glow berries) at the top and always add a single cave vine at the bottom.</li> </ol> placed_feature/cave_vines.json<pre><code>{\n  \"feature\": \"minecraft:cave_vine\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": 188 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:height_range\", // (3)!\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 256\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:environment_scan\", // (4)!\n      \"allowed_search_condition\": {\n        \"type\": \"minecraft:matching_blocks\",\n        \"blocks\": \"minecraft:air\"\n      },\n      \"direction_of_search\": \"up\",\n      \"max_steps\": 12,\n      \"target_condition\": {\n        \"type\": \"minecraft:has_sturdy_face\",\n        \"direction\": \"down\"\n      }\n    },\n    {\n      \"type\": \"minecraft:random_offset\", // (5)!\n      \"xz_spread\": 0,\n      \"y_spread\": -1\n    },\n    {\n      \"type\": \"minecraft:biome\" // (6)!\n    }\n  ]\n}\n</code></pre> <ol> <li>188 tries per chunk.</li> <li>Spread the locations in a square.</li> <li>Only place the vines in the y-range of bottom to 256.</li> <li>Search for the first block that has a solid face downwards (max 12 blocks away).</li> <li>Offset the location by \\((0,-1,0)\\).</li> <li>Only place the vines if the current biome has cave vines.</li> </ol>"},{"location":"addon/worldgen/features/configurations/block-column/#result_1","title":"Result","text":"AloneNaturally generated <p><p> </p></p> <p><p> </p></p>"},{"location":"addon/worldgen/features/configurations/block-pile/","title":"Block pile feature","text":"<p>The <code>block_pile</code> can be used to place piles of blocks (for example hay/melons in villages) in the world.</p>"},{"location":"addon/worldgen/features/configurations/block-pile/#configuration","title":"Configuration","text":"<p>A block pile feature only has the <code>state_provider</code> option:</p> Option Type Description <code>state_provider</code> A  <code>BlockStateProvider</code> The block state to use for the pile. <p>In code, the <code>BlockPileConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/block-pile/#example","title":"Example","text":"<p>As an example, here's the placed and configured feature used to place piles of hay bales in villages.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val PILE_HAY = registerConfiguredFeature(\n        \"pile_hay\",\n        Feature.BLOCK_PILE,\n        BlockPileConfiguration(RotatedBlockProvider(Blocks.HAY_BLOCK)) // (1)!\n    )\n\n}\n</code></pre> <ol> <li>Randomly rotate the hay bales.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures: FeatureRegistry by ExampleAddon.registry {\n\n    val PILE_HAY = placedFeature(\"pile_hay\", ConfiguredFeatures.PILE_HAY).register() // (1)!\n\n}\n</code></pre> <ol> <li>The feature does all the location resolving itself, so no extra <code>PlacementModifiers</code> are needed.</li> </ol> configured_feature/pile_hay.json<pre><code>{\n  \"type\": \"minecraft:block_pile\",\n  \"config\": {\n    \"state_provider\": {\n      \"type\": \"minecraft:rotated_block_provider\",\n      \"state\": {\n        \"Name\": \"minecraft:hay_block\",\n        \"Properties\": {\n          \"axis\": \"y\" // (1)!\n        }\n      }\n    }\n  }\n}\n</code></pre> <ol> <li>Randomly rotate the hay bales.</li> </ol> placed_feature/pile_hay.json<pre><code>{\n  \"feature\": \"minecraft:pile_hay\",\n  \"placement\": [] // (1)!\n}\n</code></pre> <ol> <li>The feature does all the location resolving itself.</li> </ol>"},{"location":"addon/worldgen/features/configurations/block-pile/#result","title":"Result","text":"AloneNaturally generated <p><p> </p></p> <p><p> </p></p>"},{"location":"addon/worldgen/features/configurations/delta/","title":"Delta feature","text":"<p>The <code>delta_feature</code> is a 1-block deep sheet of a block randomly surrounded by a block (rim). It's normally used to generate the deltas in the basalt deltas biome.</p>"},{"location":"addon/worldgen/features/configurations/delta/#configuration","title":"Configuration","text":"<p>The following configuration options are available:</p> Option Type Description <code>contents</code> A <code>BlockState</code> The block state to use inside of the delta. <code>rim</code> A <code>BlockState</code> The block state to use for the rim. <code>size</code> An <code>IntProvider</code>. (Range limit in Json is \\([0;16]\\)) Determines the maximum radius from the center of the current delta. <code>rim_size</code> An <code>IntProvider</code>. (Range limit in Json is \\([0;16]\\)) Determines the size of the rim. <p>In code, the <code>DeltaFeatureConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/delta/#example","title":"Example","text":"<p>As an example, here's the placed and configured feature used to place deltas in the basalt deltas biome.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val DELTA = registerConfiguredFeature(\n        \"delta\",\n        Feature.DELTA_FEATURE,\n        DeltaFeatureConfiguration(\n            Blocks.LAVA.defaultBlockState(), // contents\n            Blocks.MAGMA_BLOCK.defaultBlockState(), // rim\n            UniformInt.of(3, 7), // size (1)\n            UniformInt.of(0, 2) // rim_size\n        )\n    )\n\n}\n</code></pre> <ol> <li>Random <code>int</code> in the range \\([3;7]\\).</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures: FeatureRegistry by ExampleAddon.registry {\n\n    val DELTA = placedFeature(\"delta\", ConfiguredFeatures.DELTA)\n        .countOnEveryLayer(40) // (1)!\n        .biomeFilter() // (2)!\n        .register()\n\n}\n</code></pre> <ol> <li>Spreads the deltas to multiple layers.</li> <li>Only generate the feature if the center pos hasn't moved to another biome that doesn't have the configured feature.</li> </ol> configured_feature/delta.json<pre><code>{\n  \"type\": \"minecraft:delta_feature\",\n  \"config\": {\n    \"contents\": {\n      \"Name\": \"minecraft:lava\",\n      \"Properties\": {\n        \"level\": \"0\"\n      }\n    },\n    \"rim\": {\n      \"Name\": \"minecraft:magma_block\"\n    },\n    \"rim_size\": {\n      \"type\": \"minecraft:uniform\", // (1)!\n      \"value\": {\n        \"max_inclusive\": 2,\n        \"min_inclusive\": 0\n      }\n    },\n    \"size\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 7,\n        \"min_inclusive\": 3\n      }\n    }\n  }\n}\n</code></pre> <ol> <li>Random <code>int</code> in the range \\([2;0]\\).</li> </ol> placed_feature/delta.json<pre><code>{\n  \"feature\": \"minecraft:delta\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count_on_every_layer\", // (1)!\n      \"count\": 40\n    },\n    {\n      \"type\": \"minecraft:biome\" // (2)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Spreads the deltas to multiple layers.</li> <li>Only generate the feature if the center pos hasn't moved to another biome that doesn't have the configured feature.</li> </ol>"},{"location":"addon/worldgen/features/configurations/delta/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/disk/","title":"Disk feature","text":"<p>The <code>disk</code> feature allows you to place disks of blocks in the world.</p>"},{"location":"addon/worldgen/features/configurations/disk/#configuration","title":"Configuration","text":"<p>The <code>disk</code> feature has the following configuration options:</p> Option Type Description <code>state_provider</code> See below. The block state to use for the disk. <code>target</code> A <code>BlockPredicate</code>. Must be passed in order to generate the disk. <code>radius</code> An <code>IntProvider</code> (Range limit in Json is \\([0;8]\\)). Determines the radius of the disk. <code>half_height</code> An <code>int</code>. (Range limit in Json is \\([0;8]\\)). Defines half of the height of the disk. <p>In code, the <code>DiskConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/disk/#state-provider","title":"State provider","text":"<p>The state provider has 2 main options. <code>fallback</code>, a <code>BlockStateProvider</code> that is used if none of the rules apply, and <code>rules</code>, a list of <code>Rule</code>s. Each rule has a <code>BlockPredicate</code> via the <code>if_true</code> option, and a <code>BlockStateProvider</code> via the <code>then</code> option. In code, the class is called <code>RuleBasedBlockStateProvider</code>.</p>"},{"location":"addon/worldgen/features/configurations/disk/#examples","title":"Examples","text":"<p>As an example, here's the configured and placed feature for sand disks in lakes:</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val DISK_SAND = registerConfiguredFeature(\n        \"disk_sand\",\n        Feature.DISK,\n        DiskConfiguration(\n            RuleBasedBlockStateProvider(\n                BlockStateProvider.simple(Blocks.SAND), // (1)!\n                listOf(\n                    RuleBasedBlockStateProvider.Rule(BlockPredicate.matchesBlocks(Direction.DOWN.normal, Blocks.AIR), BlockStateProvider.simple(Blocks.SANDSTONE)), // (2)!\n                )\n            ),\n            BlockPredicate.matchesBlocks(Blocks.DIRT, Blocks.GRASS_BLOCK), // (3)!\n            UniformInt.of(2, 6), // (4)!\n            2 // (5)!\n        )\n    )\n\n}\n</code></pre> <ol> <li>This is the fallback block used if none of the rules listed below apply.    Here, we use sand as the fallback if the block below is not air.</li> <li>If the block below is air, use sandstone since sand would fall down.</li> <li>Only allow <code>dirt</code> or <code>grass_block</code> in the center.</li> <li>Randomly chooses a radius between 2 and 6.</li> <li>The <code>half_height</code> of the disk.    The actual height will be \\(2 \\times 2 + 1 = 5\\) blocks.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures: FeatureRegistry by ExampleAddon.registry {\n\n    val DISK_SAND = placedFeature(\"disk_sand\", ConfiguredFeatures.DISK_SAND)\n        .count(3) // (1)!\n        .inSquareSpread() // (2)!\n        .moveToTopSolid() // (3)!\n        .blockPredicateFilter(BlockPredicate.matchesFluids(Fluids.WATER)) // (4)!\n        .biomeFilter() // (5)!\n        .register()\n\n}\n</code></pre> <ol> <li>3 tries per chunk.</li> <li>Spread the disks in a square.</li> <li>Makes sure to move the y coordinate to one block above the first solid block. This call is equivalent to     <pre><code>HeightmapPlacement.onHeightmap(Heightmap.Types.OCEAN_FLOOR_WG)\n</code></pre></li> <li>Only place the disk if the block is water.</li> <li>Only place the disk if the current biome has sand disks.</li> </ol> configured_feature/disk_sand.json<pre><code>{\n  \"type\": \"minecraft:disk\",\n  \"config\": {\n    \"half_height\": 2,\n    \"radius\": { // (1)!\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 6,\n        \"min_inclusive\": 2\n      }\n    },\n    \"state_provider\": {\n      \"fallback\": { // (2)!\n        \"type\": \"minecraft:simple_state_provider\",\n        \"state\": {\n          \"Name\": \"minecraft:sand\"\n        }\n      },\n      \"rules\": [  // (3)!\n        {\n          \"if_true\": {\n            \"type\": \"minecraft:matching_blocks\",\n            \"blocks\": \"minecraft:air\",\n            \"offset\": [\n              0,\n              -1,\n              0\n            ]\n          },\n          \"then\": {\n            \"type\": \"minecraft:simple_state_provider\",\n            \"state\": {\n              \"Name\": \"minecraft:sandstone\"\n            }\n          }\n        }\n      ]\n    },\n    \"target\": { // (4)!\n      \"type\": \"minecraft:matching_blocks\",\n      \"blocks\": [\n        \"minecraft:dirt\",\n        \"minecraft:grass_block\"\n      ]\n    }\n  }\n}\n</code></pre> <ol> <li>Randomly chooses a radius between 2 and 6.</li> <li>If the block isn't air, use sand.</li> <li>Otherwise, if the block below is air, use sandstone.</li> <li>Only allow <code>dirt</code> or <code>grass_block</code> in the center.</li> </ol> placed_feature/disk_sand.json<pre><code>{\n  \"feature\": \"minecraft:disk_sand\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": 3 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:heightmap\", // (3)!\n      \"heightmap\": \"OCEAN_FLOOR_WG\"\n    },\n    {\n      \"type\": \"minecraft:block_predicate_filter\", // (4)!\n      \"predicate\": {\n        \"type\": \"minecraft:matching_fluids\",\n        \"fluids\": \"minecraft:water\"\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\" // (5)!\n    }\n  ]\n}\n</code></pre> <ol> <li>3 tries per chunk.</li> <li>Spread the disks in a square.</li> <li>Makes sure to move the y coordinate to one block above the first solid block.</li> <li>Only place the disk if the block is water.</li> <li>Only place the disk if the current biome has sand disks.</li> </ol>"},{"location":"addon/worldgen/features/configurations/disk/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/dripstone-cluster/","title":"Dripstone cluster feature","text":"<p>Warning</p> <p>Advanced Knowledge Required - This documentation page is intended for users with in-depth knowledge of the world   generation system. Beginner users may find the content challenging to understand.</p> <p>The <code>dripstone_cluster</code> feature allows you to add dripstone clusters to the world.</p>"},{"location":"addon/worldgen/features/configurations/dripstone-cluster/#configuration","title":"Configuration","text":"<p>The <code>dripstone_cluster</code> feature has the following configuration options: Some of these options might be a bit hard to understand, We'd recommend just checking out the example below.</p> Option Type Description <code>floor_to_ceiling_search_range</code> An <code>int</code>. (Range limit in Json is \\([1;512]\\)) Determines the maximum distance from the base of the dripstone cluster to the ceiling. <code>height</code> An <code>IntProvider</code> (Range limit in Json is \\([1;128]\\)) The height of the cluster <code>radius</code> An <code>IntProvider</code>. (Range limit in Json is \\([1;128]\\)) The radius of the cluster <code>max_stalagmite_stalactite_height_diff</code> An <code>int</code>. (Range limit in Json is \\([0;64]\\)) The maximum difference in height between a stalagmite and a stalactite. <code>height_deviation</code> An <code>int</code>. (Range limit in Json is \\([1;64]\\)) The height deviation. <code>dripstone_block_layer_thickness</code> An <code>IntProvider</code>. (Range limit in Json is \\([1;64]\\)) The dripstone block layer thickness. <code>density</code> A <code>FloatProvider</code>. (Range limit in Json is \\([0.0;2.0]\\)) The density of the dripstone cluster. <code>wetness</code> A <code>FloatProvider</code>. (Range limit in Json is \\([0.0;2.0]\\)) The wetness of the dripstone cluster. A higher value will lead to more water blocks. <code>chance_of_dripstone_column_at_max_distance_from_center</code> A <code>float</code>. (Range limit in Json is \\([0.0;1.0]\\)) The chance of a dripstone column at the maximum distance from the center. <code>max_distance_from_edge_affecting_chance_of_dripstone_column</code> An <code>int</code>. (Range limit in Json is \\([1;64]\\)) The maximum distance from the edge affecting the chance of a dripstone column. <code>max_distance_from_center_affecting_height_bias</code> An <code>int</code>. (Range limit in Json is \\([1;64]\\)) The maximum distance from the center affecting the height bias. <p>In code, the <code>DripstoneClusterConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/dripstone-cluster/#example","title":"Example","text":"KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val DRIPSTONE_CLUSTER = registerConfiguredFeature(\n        \"dripstone_cluster\",\n        Feature.DRIPSTONE_CLUSTER,\n        DripstoneClusterConfiguration(\n            12, // floorToCeilingSearchRange\n            UniformInt.of(3, 6), // height\n            UniformInt.of(2, 8), // radius\n            1, // maxStalagmiteStalactiteHeightDiff\n            3, // heightDeviation\n            UniformInt.of(2, 4), // dripstoneBlockLayerThickness\n            UniformFloat.of(0.3f, 0.7f), // density\n            ClampedNormalFloat.of(0.1f, 0.3f, 0.1f, 0.9f), // wetness\n            0.1f, // chanceOfDripstoneColumnAtMaxDistanceFromCenter\n            3, // maxDistanceFromEdgeAffectingChanceOfDripstoneColumn\n            8 // maxDistanceFromCenterAffectingHeightBias\n        )\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures: FeatureRegistry by ExampleAddon.registry {\n\n    val DRIPSTONE_CLUSTER = placedFeature(\"dripstone_cluster\", ConfiguredFeatures.DRIPSTONE_CLUSTER)\n        .count(UniformInt.of(48, 96))\n        .inSquareSpread()\n        .inYWorldBounds() // (1)!\n        .biomeFilter()\n        .register()\n\n}\n</code></pre> <ol> <li>Call is equivalent to:     <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(256))\n</code></pre></li> </ol> configured_feature/dripstone_cluster.json<pre><code>{\n  \"type\": \"minecraft:dripstone_cluster\",\n  \"config\": {\n    \"chance_of_dripstone_column_at_max_distance_from_center\": 0.1,\n    \"density\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_exclusive\": 0.7,\n        \"min_inclusive\": 0.3\n      }\n    },\n    \"dripstone_block_layer_thickness\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 4,\n        \"min_inclusive\": 2\n      }\n    },\n    \"floor_to_ceiling_search_range\": 12,\n    \"height\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 6,\n        \"min_inclusive\": 3\n      }\n    },\n    \"height_deviation\": 3,\n    \"max_distance_from_center_affecting_height_bias\": 8,\n    \"max_distance_from_edge_affecting_chance_of_dripstone_column\": 3,\n    \"max_stalagmite_stalactite_height_diff\": 1,\n    \"radius\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 8,\n        \"min_inclusive\": 2\n      }\n    },\n    \"wetness\": {\n      \"type\": \"minecraft:clamped_normal\",\n      \"value\": {\n        \"deviation\": 0.3,\n        \"max\": 0.9,\n        \"mean\": 0.1,\n        \"min\": 0.1\n      }\n    }\n  }\n}\n</code></pre> placed_feature/dripstone_cluster.json<pre><code>{\n  \"feature\": \"minecraft:dripstone_cluster\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": {\n        \"type\": \"minecraft:uniform\",\n        \"value\": {\n          \"max_inclusive\": 96,\n          \"min_inclusive\": 48\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:in_square\"\n    },\n    {\n      \"type\": \"minecraft:height_range\",\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 256\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\"\n    }\n  ]\n}\n</code></pre>"},{"location":"addon/worldgen/features/configurations/dripstone-cluster/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/end-gateway/","title":"End gateway feature","text":"<p>The <code>end_gateway</code> feature can be used to place end gateways in the world.</p>"},{"location":"addon/worldgen/features/configurations/end-gateway/#configuration","title":"Configuration","text":"<p>An end gateway feature has the following configuration options:</p> Option Type Description <code>exit</code> (optional) A <code>BlockPos</code> (In Json, the <code>BlockPos</code> is represented via an array of coordinates. First element is the x coordinate and so on.) The exit location of the end gateway. <code>exact</code> <code>boolean</code> Whether entities should be teleported to the exact exit location. <p>In code, the <code>EndGatewayConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/end-gateway/#example","title":"Example","text":"<p>Here's the configured and placed feature for the vanilla return end gateway:</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val END_GATEWAY_RETURN = registerConfiguredFeature(\n        \"end_gateway_return\",\n        Feature.END_GATEWAY,\n        EndGatewayConfiguration.knownExit( // (1)!\n            ServerLevel.END_SPAWN_POINT, // (2)!\n            true // (3)!\n        )\n    )\n\n}\n</code></pre> <ol> <li>If the exit location is still unknown during registration (for example for random teleportation), use    <pre><code>EndGatewayConfiguration.delayedExitSearch()\n</code></pre></li> <li>Constant for the end spawn point at \\((100|50|0)\\).</li> <li>Entities should be teleported to the exact exit location.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val END_GATEWAY_RETURN = placedFeature(\"end_gateway_return\", ConfiguredFeatures.END_GATEWAY_RETURN)\n        .rarityFilter(700) // (1)!\n        .inSquareSpread() // (2)!\n        .moveToMotionBlocking() // (3)!\n        .randomVerticalOffset(UniformInt.of(3, 9)) // (4)!\n        .biomeFilter() // (5)!\n        .register()\n\n}\n</code></pre> <ol> <li>Give the end gateway a chance of \\(^1/_{700}\\) to spawn. Or in other words, the end gateway will spawn in 1 out of 700 chunks.</li> <li>Randomly offset the gateways in a square.</li> <li>Move the gateways to the surface. The call is equivalent to    <pre><code>HeightmapPlacement.onHeightmap(Heightmap.Types.MOTION_BLOCKING)\n</code></pre></li> <li>Randomly offset the gateways in the y direction.</li> <li>Only place the gateways in biomes that have end gateways</li> </ol> configured_feature/end_gateway_return.json<pre><code>{\n  \"type\": \"minecraft:end_gateway\",\n  \"config\": {\n    \"exact\": true,\n    \"exit\": [ // (1)!\n      100,\n      50,\n      0\n    ]\n  }\n}\n</code></pre> <ol> <li>The end spawn point is always at \\((100|50|0)\\)</li> </ol> placed_feature/end_gateway_return.json<pre><code>{\n  \"feature\": \"minecraft:end_gateway_return\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:rarity_filter\", // (1)!\n      \"chance\": 700\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:heightmap\", // (3)!\n      \"heightmap\": \"MOTION_BLOCKING\"\n    },\n    {\n      \"type\": \"minecraft:random_offset\", // (4)!\n      \"xz_spread\": 0,\n      \"y_spread\": {\n        \"type\": \"minecraft:uniform\",\n        \"value\": {\n          \"max_inclusive\": 9,\n          \"min_inclusive\": 3\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\" // (5)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Give the end gateway a chance of \\(^1/_{700}\\) to spawn. Or in other words, the end gateway will spawn in 1 out of 700 chunks.</li> <li>Randomly offset the gateways in a square.</li> <li>Move the gateways to the surface.</li> <li>Randomly offset the gateways in the y direction.</li> <li>Only place the gateways in biomes that have end gateways.</li> </ol>"},{"location":"addon/worldgen/features/configurations/end-gateway/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/end-spike/","title":"End spike feature","text":"<p>The <code>end_spike</code> feature can be used to place end spikes (also known as obsidian pillars) in the world.</p>"},{"location":"addon/worldgen/features/configurations/end-spike/#configuration","title":"Configuration","text":"<p>The following configuration options are available:</p> Option Type Description <code>crystal_invulnerable</code> (optional in Json, defaults to <code>false</code>) <code>boolean</code> Whether the crystals on top of the end spikes should be invulnerable. <code>spikes</code> A <code>List</code> of <code>EndSpikes</code>. See below for more information The spikes to place. If the array is empty, the default end spikes are placed <code>crystal_beam_target</code> (optional) A <code>BlockPos</code> (In Json, the <code>BlockPos</code> is represented via an array of coordinates. First element is the x coordinate and so on.) The target of the crystal beam. <p>In code, the <code>SpikeConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/end-spike/#endspikes","title":"EndSpikes","text":"<p>The <code>EndSpikes</code> can be configured with the following options:</p> Option Type Description <code>centerX</code> (optional in Json, defaults to <code>0</code>) <code>int</code> The x coordinate of the center of the spike. <code>centerZ</code> (optional in Json, defaults to <code>0</code>) <code>int</code> The z coordinate of the center of the spike. <code>radius</code> (optional in Json, defaults to <code>0</code>) <code>int</code> The radius of the spike. <code>height</code> (optional in Json, defaults to <code>0</code>) <code>int</code> The height of the spike. <code>guarded</code> (optional in Json, defaults to <code>false</code>) <code>boolean</code> Whether iron bars should be placed around the end crystal <p>The <code>SpikeFeature.EndSpike</code> class is used to configure the spikes in code.</p>"},{"location":"addon/worldgen/features/configurations/end-spike/#examples","title":"Examples","text":"<p>As an example, here's the configured feature used to place the default end spikes on the main island:</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val END_SPIKE = registerConfiguredFeature(\n        \"end_spike\",\n        Feature.END_SPIKE,\n        SpikeConfiguration(false, emptyList(), null) // (1)!\n    )\n\n}\n</code></pre> <ol> <li>Since Minecraft only needs the default end spikes, we don't need to configure anything. <code>false</code> means that the     crystals on top of the end spikes should not be invulnerable and <code>null</code> is the crystal beam target.</li> </ol> configured_feature/end_spike.json<pre><code>{\n  \"type\": \"minecraft:end_spike\",\n  \"config\": {\n    \"crystal_invulnerable\": false,\n    \"spikes\": [] // (1)!\n  }\n}\n</code></pre> <ol> <li>Since Minecraft only needs the default end spikes, we don't need to configure anything.</li> </ol> Example with a filled array KotlinJson ConfiguredFeatures.kt<pre><code>val END_SPIKE = registerConfiguredFeature(\n    \"end_spike\",\n    Feature.END_SPIKE,\n    SpikeConfiguration(\n        false, // (1)!\n        listOf(\n            EndSpike(42, 0, 2, 82, true), // (2)!\n            EndSpike(33, 24, 4, 94, false),\n            EndSpike(12, 39, 5, 103, false),\n            EndSpike(-13, 39, 2, 79, true),\n            EndSpike(-34, 24, 4, 97, false),\n            EndSpike(-42, -1, 3, 88, false),\n            EndSpike(-34, -25, 3, 91, false),\n            EndSpike(-13, -40, 3, 85, false),\n            EndSpike(12, -40, 4, 100, false),\n            EndSpike(33, -25, 2, 76, false)\n        ),\n        null // (3)!\n    )\n)\n</code></pre> <ol> <li>Don't make the crystals invulnerable.</li> <li>The first spike is at the coordinates <code>42, 0</code> with a radius of <code>2</code> and a height of <code>82</code>. <code>true</code> specifies that     iron bars should be placed around the end crystal.</li> <li>Don't specify any specific target for the crystal beam.</li> </ol> configured_feature/end_spike.json<pre><code>{\n  \"type\": \"minecraft:end_spike\",\n  \"config\": {\n    \"crystal_invulnerable\": false,\n    \"spikes\": [\n      {\n        \"centerX\": 42,\n        \"centerZ\": 0,\n        \"radius\": 2,\n        \"height\": 82,\n        \"guarded\": true\n      },\n      {\n        \"centerX\": 33,\n        \"centerZ\": 24,\n        \"radius\": 4,\n        \"height\": 94,\n        \"guarded\": false\n      },\n      {\n        \"centerX\": 12,\n        \"centerZ\": 39,\n        \"radius\": 5,\n        \"height\": 103,\n        \"guarded\": false\n      },\n      {\n        \"centerX\": -13,\n        \"centerZ\": 39,\n        \"radius\": 2,\n        \"height\": 79,\n        \"guarded\": true\n      },\n      {\n        \"centerX\": -34,\n        \"centerZ\": 24,\n        \"radius\": 4,\n        \"height\": 97,\n        \"guarded\": false\n      },\n      {\n        \"centerX\": -42,\n        \"centerZ\": -1,\n        \"radius\": 3,\n        \"height\": 88,\n        \"guarded\": false\n      },\n      {\n        \"centerX\": -34,\n        \"centerZ\": -25,\n        \"radius\": 3,\n        \"height\": 91,\n        \"guarded\": false\n      },\n      {\n        \"centerX\": -13,\n        \"centerZ\": -40,\n        \"radius\": 3,\n        \"height\": 85,\n        \"guarded\": false\n      },\n      {\n        \"centerX\": 12,\n        \"centerZ\": -40,\n        \"radius\": 4,\n        \"height\": 100,\n        \"guarded\": false\n      },\n      {\n        \"centerX\": 33,\n        \"centerZ\": -25,\n        \"radius\": 2,\n        \"height\": 76,\n        \"guarded\": false\n      }\n    ]\n  }\n}\n</code></pre> KotlinJson PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val END_SPIKE = placedFeature(\"end_spike\", ConfiguredFeatures.END_SPIKE)\n        .biomeFilter() // (1)!\n        .register()\n\n}\n</code></pre> <ol> <li>Most of the placement logic is handled by the feature itself. The only thing we need to do is to specify that the     feature should only be placed in biomes that have end spikes.</li> </ol> placed_feature/end_spike.json<pre><code>{\n  \"feature\": \"minecraft:end_spike\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:biome\" // (1)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Most of the placement logic is handled by the feature itself. The only thing we need to do is to specify that the     feature should only be placed in biomes that have end spikes.</li> </ol>"},{"location":"addon/worldgen/features/configurations/end-spike/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/fill-layer/","title":"Fill layer feature","text":"<p>The <code>fill_layer</code> feature can be used to fill an entire 16x16 chunk area with a single block.</p>"},{"location":"addon/worldgen/features/configurations/fill-layer/#configuration","title":"Configuration","text":"<p>The following configuration options are available:</p> Option Type Description <code>height</code> An <code>int</code>. (Range limit in Json is \\([0;4064 ]\\)) The height of the layer to fill (starting at the min build height). <code>state</code> A <code>BlockState</code> The block state to use for the layer. <p>In code, the <code>LayerConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/fill-layer/#example","title":"Example","text":"<p>As an example, here's a configured- and placed feature to add a layer of grass on top of a default flat world.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@Init(stage = InitStage.POST_PACK_PRE_WORLD)\n@OptIn(ExperimentalWorldGen::class)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val FILL_LAYER_GRASS = registerConfiguredFeature(\n        \"fill_layer_grass\",\n        Feature.FILL_LAYER,\n        LayerConfiguration(4, Blocks.GRASS.defaultBlockState()) // (1)!\n    )\n\n}\n</code></pre> <ol> <li>Add a layer of grass at height 4.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val FILL_LAYER_GRASS = placedFeature(\"fill_layer_grass\", ConfiguredFeatures.FILL_LAYER_GRASS).register()\n\n}\n</code></pre> configured_feature/fill_layer_grass.json<pre><code>{\n  \"height\": 4,\n  \"state\": {\n    \"Name\": \"minecraft:grass\"\n  }\n}\n</code></pre> placed_feature/fill_layer_grass.json<pre><code>{\n  \"feature\": \"minecraft:fill_layer_grass\",\n  \"placement\": []\n}\n</code></pre>"},{"location":"addon/worldgen/features/configurations/forest-rock/","title":"Forest rock feature","text":"<p>The <code>forest_rock</code> feature can be used to generate small \\(3x3\\) rocks in the world.</p>"},{"location":"addon/worldgen/features/configurations/forest-rock/#configuration","title":"Configuration","text":"<p>Only the block state used for the rocks is configurable:</p> Option Type Description <code>state</code> A  <code>BlockState</code> The block state to use for the rock. <p>In code, the <code>BlockStateConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/forest-rock/#example","title":"Example","text":"KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val FOREST_ROCK = registerConfiguredFeature(\n        \"forest_rock\",\n        Feature.FOREST_ROCK,\n        BlockStateConfiguration(Blocks.MOSSY_COBBLESTONE.defaultBlockState())\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val FOREST_ROCK = placedFeature(\"forest_rock\", ConfiguredFeatures.FOREST_ROCK)\n        .count(2) // (1)!\n        .inSquareSpread() // (2)!\n        .moveToMotionBlocking() // (3)!\n        .biomeFilter() // (4)!\n        .register()\n\n}\n</code></pre> <ol> <li>Generate 2 rocks per chunk.</li> <li>Randomly offset the x- and z-coordinates of the rock.</li> <li>Set the y-coordinate of the rock to the highest motion-blocking block. The call is equivalent to    <pre><code>HeightmapPlacement.onHeightmap(Heightmap.Types.MOTION_BLOCKING)\n</code></pre></li> <li>Only generate the feature if the center pos hasn't moved to another biome that doesn't have the <code>forest_rock</code> feature.</li> </ol> configured_feature/forest_rock.json<pre><code>{\n  \"type\": \"minecraft:forest_rock\",\n  \"config\": {\n    \"state\": {\n      \"Name\": \"minecraft:mossy_cobblestone\"\n    }\n  }\n}\n</code></pre> placed_feature/forest_rock.json<pre><code>{\n  \"feature\": \"minecraft:forest_rock\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": 2 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:heightmap\",\n      \"heightmap\": \"MOTION_BLOCKING\" // (3)!\n    },\n    {\n      \"type\": \"minecraft:biome\" // (4)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Generate 2 rocks per chunk.</li> <li>Randomly offset the x- and z-coordinates of the rock.</li> <li>Set the y-coordinate of the rock to the highest motion-blocking block.</li> <li>Only generate the feature if center pos hasn't moved to another biome that doesn't have the <code>forest_rock</code> feature.</li> </ol>"},{"location":"addon/worldgen/features/configurations/forest-rock/#result","title":"Result","text":"AloneNaturally generated <p><p> </p></p> <p><p> </p></p>"},{"location":"addon/worldgen/features/configurations/fossil/","title":"Fossils","text":"<p>TODO</p>"},{"location":"addon/worldgen/features/configurations/geode/","title":"Geode feature","text":"<p>Warning</p> <p>Advanced Knowledge Required - This documentation page is intended for users with in-depth knowledge of the world   generation system. Beginner users may find the content challenging to understand.</p> <p>The <code>geode</code> feature can be used to generate geode-like structures in the world.</p>"},{"location":"addon/worldgen/features/configurations/geode/#configuration","title":"Configuration","text":"<p>The <code>geode</code> feature allows a very wide range of configuration options. The more nested configuration options are explained below the main table.</p> Option Type Description Amethyst geode value <code>blocks</code> See below. Specifies which blocks to use for the geode. / <code>layers</code> See below. Specifies the radius of each layer. / <code>crack</code> See below. Specifies options about the crack in the geode. / <code>use_potential_placements_chance</code> (optional in Json, defaults to <code>0.35</code>) A <code>double</code> in the range \\([0.0;1.0]\\). The chance each inner block to get a inner placement. <code>0.35</code> <code>use_alternate_layer0_chance</code>  (optional in Json, defaults to <code>0.0</code>) A <code>double</code> in the range \\([0.0;1.0]\\). The chance for a inner layer block to use the specified alternative block. <code>0.083</code> <code>placements_require_layer0_alternate</code> (optional in Json, defaults to <code>true</code>) A <code>boolean</code> If <code>true</code>, the inner placement will only be placed on the specified alternative block. <code>true</code> <code>outer_wall_distance</code> (optional in Json, defaults to a random int. Either <code>4</code> or <code>5</code>) An <code>IntProvider</code>. (Range limit in Json is \\([1;20]\\)) The offset of each coordinate from the feature origin. Random <code>int</code> between <code>4</code> and <code>6</code> <code>distribution_points</code> (optional in Json, defaults to a random int. Either <code>3</code> or <code>4</code> ) An <code>IntProvider</code>. (Range limit in Json is \\([1;20]\\)) How often to check for invalid blocks near the center of the geode. Random <code>int</code>. Either <code>3</code> or <code>4</code> <code>point_offset</code> (optional in Json, defaults to a random int. Either <code>1</code> or <code>2</code>) An <code>IntProvider</code>. (Range limit in Json is \\([1;10]\\)) The offset of each point. Random <code>int</code>. Either <code>1</code> or <code>2</code> <code>min_gen_offset</code> (optional in Json, defaults to <code>-16</code>) An <code>int</code> The minimum Chebyshev distance of each block from the feature origin. <code>-16</code> <code>max_gen_offset</code> (optional in Json, defaults to <code>16</code>) An <code>int</code> The maximum Chebyshev distance of each block from the feature origin. <code>16</code> <code>noise_multiplier</code> (optional in Json, defaults to <code>0.05</code>) A <code>double</code> in the range \\([0.0;1.0]\\). The multiplier for the noise value. <code>0.05</code> <code>invalid_blocks_threshold</code> An <code>int</code> The max. amount of invalid blocks. If the threshold is exceeded, the feature won't be generated <code>1</code> <p>In code, the <code>GeodeConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/geode/#blocks","title":"<code>blocks</code>","text":"<p>The blocks configuration of the geode. It has the following options:</p> Option Type Description Amethyst geode value <code>filling_provider</code> <code>BlockStateProvider</code> The block to use for the filling of the geode. Should be air in most cases. <code>minecraft:air</code> <code>inner_layer_provider</code> <code>BlockStateProvider</code> The block to use for the inner layer of the geode. <code>minecraft:amethyst_block</code> <code>alternate_inner_layer_provider</code> <code>BlockStateProvider</code> The block that is randomly spread inside the inner layer. <code>minecraft:budding_amethyst</code> <code>middle_layer_provider</code> <code>BlockStateProvider</code> The block to use for the middle layer of the geode. <code>minecraft:calcite</code> <code>outer_layer_provider</code> <code>BlockStateProvider</code> The block to use for the outer layer of the geode. <code>minecraft:smooth_basalt</code> <code>inner_placements</code> A list of <code>BlockStateProvider</code>s. A list of blocks to randomly place inside the geode. (cannot be empty!) <code>minecraft:small_amethyst_bud</code>, <code>minecraft:medium_amethyst_bud</code>, ... <code>cannot_replace</code> A block tag (Starting with <code>#</code> in Json). Defines which block shouldn't be replaced when placing the geode. <code>#minecraft:features_cannot_replace</code> <code>invalid_blocks</code> A block tag (Starting with <code>#</code> in Json). If the amount of blocks matching this tag exceeds the above defined threshold the geode won't be placed. Currently not usable because of a Minecraft bug <code>#minecraft:geode_invalid_blocks</code> <p>In code, the <code>GeodeBlockSettings</code> class is used to configure the blocks of the geode.</p>"},{"location":"addon/worldgen/features/configurations/geode/#layers","title":"<code>layers</code>","text":"<p>Defines the max radius of each layer of the geode. The higher the value the higher the max radius of the respective layer. The following options are all <code>double</code>s in the range \\([0.01;50.0]\\).</p> Option Description Amethyst geode value <code>filling</code> (optional in Json, defaults to <code>1.7</code>) The max radius of the filling layer. (Range limit in Json is \\([0.01;50.0]\\)) <code>1.7</code> <code>inner_layer</code> (optional in Json, defaults to <code>2.2</code>) The max radius of the inner layer. (Range limit in Json is \\([0.01;50.0]\\)) <code>2.2</code> <code>middle_layer</code> (optional in Json, defaults to <code>3.2</code>) The max radius of the middle layer. (Range limit in Json is \\([0.01;50.0]\\)) <code>3.2</code> <code>outer_layer</code> (optional in Json, defaults to <code>4.2</code>) The max radius of the outer layer. (Range limit in Json is \\([0.01;50.0]\\)) <code>4.2</code> <p>In code, the <code>GeodeLayerSettings</code> class is used to configure the layers of the geode.</p>"},{"location":"addon/worldgen/features/configurations/geode/#crack","title":"<code>crack</code>","text":"<p>The crack configuration of the geode. It has the following options:</p> Option Type Description Amethyst geode value <code>generate_crack_chance</code> (optional in Json, defaults to <code>1.0</code>) A <code>double</code> in the range \\([0.0;1.0]\\). The chance that a crack will be generated. <code>0.95</code> <code>base_crack_size</code> (optional in Json, defaults to <code>2.0</code>) A <code>double</code>. (Range limit in Json is \\([0.0;5.0]\\)) The base size of a crack. <code>2.0</code> <code>crack_point_offset</code> (optional in Json, defaults to <code>2</code>) An <code>int</code>. (Range limit in Json is \\([0;10]\\)) The offset of the crack point. <code>2</code> <p>In code, the <code>GeodeCrackSettings</code> class is used to configure the crack of the geode.</p>"},{"location":"addon/worldgen/features/configurations/geode/#example","title":"Example","text":"KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val AMETHYST_GEODE = registerConfiguredFeature(\n        \"amethyst_geode\",\n        Feature.GEODE,\n        GeodeConfiguration(\n            GeodeBlockSettings(\n                BlockStateProvider.simple(Blocks.AIR), // fillingProvider\n                BlockStateProvider.simple(Blocks.AMETHYST_BLOCK), // innerLayerProvider\n                BlockStateProvider.simple(Blocks.BUDDING_AMETHYST), // alternateInnerLayerProvider\n                BlockStateProvider.simple(Blocks.CALCITE), // middleLayerProvider\n                BlockStateProvider.simple(Blocks.SMOOTH_BASALT), // outerLayerProvider\n                listOf( // innerPlacements\n                    Blocks.SMALL_AMETHYST_BUD.defaultBlockState(),\n                    Blocks.MEDIUM_AMETHYST_BUD.defaultBlockState(),\n                    Blocks.LARGE_AMETHYST_BUD.defaultBlockState(),\n                    Blocks.AMETHYST_CLUSTER.defaultBlockState()\n                ),\n                BlockTags.FEATURES_CANNOT_REPLACE, // cannotReplace\n                BlockTags.GEODE_INVALID_BLOCKS // invalidBlocks\n            ),\n            GeodeLayerSettings(\n                1.7, // filling\n                2.2, // innerLayer\n                3.2, // middleLayer\n                4.2 // outerLayer\n            ),\n            GeodeCrackSettings(\n                0.95, // generateCrackChance\n                2.0, // baseCrackSize\n                2 // crackPointOffset\n            ),\n            .35, // usePotentialPlacementsChance\n            .083, // useAlternateLayer0Chance\n            true, // placementsRequireLayer0Alternate\n            UniformInt.of(4, 6), // outerWallDistance\n            UniformInt.of(3, 4), // distributionPoints\n            UniformInt.of(1, 2), // pointOffset\n            -16, // minGenOffset\n            16, // maxGenOffset\n            0.05, // noiseMultiplier\n            1 // invalidBlocksThreshold\n        )\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val AMETHYST_GEODE = placedFeature(\"amethyst_geode\", ConfiguredFeatures.AMETHYST_GEODE)\n        .rarityFilter(24)\n        .inSquareSpread()\n        .heightRangeUniform(VerticalAnchor.aboveBottom(6), VerticalAnchor.absolute(30))\n        .biomeFilter()\n        .register()\n\n}\n</code></pre> configured_feature/amethyst_geode.json<pre><code>{\n  \"type\": \"minecraft:geode\",\n  \"config\": {\n    \"blocks\": {\n      \"alternate_inner_layer_provider\": {\n        \"type\": \"minecraft:simple_state_provider\",\n        \"state\": {\n          \"Name\": \"minecraft:budding_amethyst\"\n        }\n      },\n      \"cannot_replace\": \"#minecraft:features_cannot_replace\",\n      \"filling_provider\": {\n        \"type\": \"minecraft:simple_state_provider\",\n        \"state\": {\n          \"Name\": \"minecraft:air\"\n        }\n      },\n      \"inner_layer_provider\": {\n        \"type\": \"minecraft:simple_state_provider\",\n        \"state\": {\n          \"Name\": \"minecraft:amethyst_block\"\n        }\n      },\n      \"inner_placements\": [\n        {\n          \"Name\": \"minecraft:small_amethyst_bud\",\n          \"Properties\": {\n            \"facing\": \"up\",\n            \"waterlogged\": \"false\"\n          }\n        },\n        {\n          \"Name\": \"minecraft:medium_amethyst_bud\",\n          \"Properties\": {\n            \"facing\": \"up\",\n            \"waterlogged\": \"false\"\n          }\n        },\n        {\n          \"Name\": \"minecraft:large_amethyst_bud\",\n          \"Properties\": {\n            \"facing\": \"up\",\n            \"waterlogged\": \"false\"\n          }\n        },\n        {\n          \"Name\": \"minecraft:amethyst_cluster\",\n          \"Properties\": {\n            \"facing\": \"up\",\n            \"waterlogged\": \"false\"\n          }\n        }\n      ],\n      \"invalid_blocks\": \"#minecraft:geode_invalid_blocks\",\n      \"middle_layer_provider\": {\n        \"type\": \"minecraft:simple_state_provider\",\n        \"state\": {\n          \"Name\": \"minecraft:calcite\"\n        }\n      },\n      \"outer_layer_provider\": {\n        \"type\": \"minecraft:simple_state_provider\",\n        \"state\": {\n          \"Name\": \"minecraft:smooth_basalt\"\n        }\n      }\n    },\n    \"crack\": {\n      \"base_crack_size\": 2.0,\n      \"crack_point_offset\": 2,\n      \"generate_crack_chance\": 0.95\n    },\n    \"distribution_points\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 4,\n        \"min_inclusive\": 3\n      }\n    },\n    \"invalid_blocks_threshold\": 1,\n    \"layers\": {\n      \"filling\": 1.7,\n      \"inner_layer\": 2.2,\n      \"middle_layer\": 3.2,\n      \"outer_layer\": 4.2\n    },\n    \"max_gen_offset\": 16,\n    \"min_gen_offset\": -16,\n    \"noise_multiplier\": 0.05,\n    \"outer_wall_distance\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 6,\n        \"min_inclusive\": 4\n      }\n    },\n    \"placements_require_layer0_alternate\": true,\n    \"point_offset\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 2,\n        \"min_inclusive\": 1\n      }\n    },\n    \"use_alternate_layer0_chance\": 0.083,\n    \"use_potential_placements_chance\": 0.35\n  }\n}\n</code></pre> placed_feature/amethyst_geode.json<pre><code>{\n  \"feature\": \"minecraft:amethyst_geode\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:rarity_filter\",\n      \"chance\": 24\n    },\n    {\n      \"type\": \"minecraft:in_square\"\n    },\n    {\n      \"type\": \"minecraft:height_range\",\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 30\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 6\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\"\n    }\n  ]\n}\n</code></pre>"},{"location":"addon/worldgen/features/configurations/geode/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/huge-fungus/","title":"Huge fungus feature","text":"<p>The <code>huge_fungus</code> feature can be used to place huge fungi in the world (used for warped and crimson forests in vanilla).</p>"},{"location":"addon/worldgen/features/configurations/huge-fungus/#configuration","title":"Configuration","text":"<p>The <code>huge_fungus</code> feature has the following configuration options:</p> Option Type Description <code>valid_base_block</code> A <code>BlockState</code> The block state that needs to be present below the fungus. <code>stem_state</code> A <code>BlockState</code> The block state to use for the stem of the fungus. <code>hat_state</code> A <code>BlockState</code> The block state to use for the hat of the fungus. <code>decor_state</code> A <code>BlockState</code> The block state to randomly place under the hat as decoration. (For example shroomlight) <code>planted</code> (optional in Json, defaults to <code>false</code>) A <code>boolean</code> If set to <code>false</code>, can only replace <code>PLANT</code> material blocks and doesn't drop items when replaced. <p>In code, the <code>HugeFungusConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/huge-fungus/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature for the warped fungus:</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val WARPED_FUNGUS = registerConfiguredFeature(\n        \"warped_fungus\",\n        Feature.HUGE_FUNGUS,\n        HugeFungusConfiguration(\n            Blocks.WARPED_NYLIUM.defaultBlockState(), // (1)!\n            Blocks.WARPED_STEM.defaultBlockState(), // (2)!\n            Blocks.WARPED_WART_BLOCK.defaultBlockState(), // (3)!\n            Blocks.SHROOMLIGHT.defaultBlockState(), // (4)!\n            false // (5)!\n        )\n    )\n\n}\n</code></pre> <ol> <li>Only place the fungus on warped nylium.</li> <li>The stem of the fungus.</li> <li>The hat of the fungus.</li> <li>Randomly placed shroomlight under the hat.</li> <li>The fungus is automatically generated, so it shouldn't drop items when another fungus grows into it.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val WARPED_FUNGUS = placedFeature(\"warped_fungus\", ConfiguredFeatures.WARPED_FUNGUS)\n        .countOnEveryLayer(8)\n        .biomeFilter()\n        .register()\n\n}\n</code></pre> configured_feature/warped_fungus.json<pre><code>{\n  \"type\": \"minecraft:huge_fungus\",\n  \"config\": {\n    \"decor_state\": {\n      \"Name\": \"minecraft:shroomlight\" // (1)!\n    },\n    \"hat_state\": {\n      \"Name\": \"minecraft:warped_wart_block\"\n    },\n    \"stem_state\": {\n      \"Name\": \"minecraft:warped_stem\",\n      \"Properties\": {\n        \"axis\": \"y\"\n      }\n    },\n    \"valid_base_block\": {\n      \"Name\": \"minecraft:warped_nylium\" // (2)!\n    },\n    \"planted\": false // (3)!\n  }\n}\n</code></pre> <ol> <li>Randomly placed shroomlight under the hat.</li> <li>Only place the fungus on warped nylium.</li> <li>The fungus is automatically generated, so it shouldn't drop items when another fungus grows into it.</li> </ol> placed_feature/warped_fungi.json<pre><code>{\n  \"feature\": \"minecraft:warped_fungus\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count_on_every_layer\",\n      \"count\": 8\n    },\n    {\n      \"type\": \"minecraft:biome\"\n    }\n  ]\n}\n</code></pre>"},{"location":"addon/worldgen/features/configurations/huge-fungus/#result","title":"Result","text":"AloneNaturally generated <p><p> </p></p> <p><p> </p></p>"},{"location":"addon/worldgen/features/configurations/huge-mushrooms/","title":"Huge mushroom features","text":"<p>The <code>huge_brown_mushroom</code> and <code>huge_red_mushroom</code> features can be used to add huge mushrooms to a biome.</p>"},{"location":"addon/worldgen/features/configurations/huge-mushrooms/#configuration","title":"Configuration","text":"Option Type Description <code>cap_provider</code> A <code>BlockStateProvider</code> Determines the block to use for the cap of the mushroom. <code>stem_provider</code> A <code>BlockStateProvider</code> Determines the block to use for the stem of the mushroom. <code>foliage_radius</code> (optional in Json, defaults to 2) An <code>int</code> Determines the radius of the cap. <p>In code, the <code>HugeMushroomFeatureConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/huge-mushrooms/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature for the default huge red mushroom</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val HUGE_RED_MUSHROOM = registerConfiguredFeature(\n        \"huge_red_mushroom\",\n        Feature.HUGE_RED_MUSHROOM,\n        HugeMushroomFeatureConfiguration(\n            BlockStateProvider.simple(Blocks.RED_MUSHROOM_BLOCK.defaultBlockState().setValue(HugeMushroomBlock.DOWN, false) as BlockState), // (1)!\n            BlockStateProvider.simple((Blocks.MUSHROOM_STEM.defaultBlockState().setValue(HugeMushroomBlock.UP, false) as BlockState).setValue(HugeMushroomBlock.DOWN, false) as BlockState), // (2)!\n            2 // (3)!\n        )\n    )\n\n}\n</code></pre> <ol> <li>Use a mushroom block with the <code>down</code> property set to <code>false</code> as the cap.</li> <li>Use a mushroom stem with the <code>up</code> and <code>down</code> properties set to <code>false</code> as the stem.</li> <li>Use a radius of 2 for the cap.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val HUGE_RED_MUSHROOM = placedFeature(\"huge_red_mushroom\", ConfiguredFeatures.HUGE_RED_MUSHROOM).register()\n\n}\n</code></pre> configured_feature/huge_red_mushroom.json<pre><code>{\n  \"type\": \"minecraft:huge_red_mushroom\",\n  \"config\": {\n    \"cap_provider\": {\n      \"type\": \"minecraft:simple_state_provider\",\n      \"state\": {\n        \"Name\": \"minecraft:red_mushroom_block\",\n        \"Properties\": {\n          \"down\": \"false\",\n          \"east\": \"true\",\n          \"north\": \"true\",\n          \"south\": \"true\",\n          \"up\": \"true\",\n          \"west\": \"true\"\n        }\n      }\n    },\n    \"stem_provider\": {\n      \"type\": \"minecraft:simple_state_provider\",\n      \"state\": {\n        \"Name\": \"minecraft:mushroom_stem\",\n        \"Properties\": {\n          \"down\": \"false\",\n          \"east\": \"true\",\n          \"north\": \"true\",\n          \"south\": \"true\",\n          \"up\": \"false\",\n          \"west\": \"true\"\n        }\n      }\n    },  \n    \"foliage_radius\": 2\n  }\n}\n</code></pre> placed_feature/huge_red_mushroom.json<pre><code>{\n  \"feature\": {\n  \"feature\": \"minecraft:huge_red_mushroom\",\n  \"placement\": []\n}\n</code></pre>"},{"location":"addon/worldgen/features/configurations/huge-mushrooms/#result","title":"Result","text":"AloneNaturally generated <p><p> </p></p> <p><p> </p></p>"},{"location":"addon/worldgen/features/configurations/iceberg/","title":"Iceberg feature","text":"<p>The <code>iceberg</code> feature allows you to add icebergs to the world.</p>"},{"location":"addon/worldgen/features/configurations/iceberg/#configuration","title":"Configuration","text":"<p>The <code>iceberg</code> feature only has one configuration option:</p> Option Type Description <code>state</code> A <code>BlockState</code> The block state to use for the icebergs. <p>In code, the <code>BlockStateConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/iceberg/#example","title":"Example","text":"<p>As an example, here's the configured and placed feature for the blue icebergs in the deep frozen ocean.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val ICEBERG_BLUE = registerConfiguredFeature(\n        \"iceberg_blue\",\n        Feature.ICEBERG,\n        BlockStateConfiguration(Blocks.BLUE_ICE.defaultBlockState())\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val ICEBERG_BLUE = placedFeature(\"iceberg_blue\", ConfiguredFeatures.ICEBERG_BLUE)\n        .rarityFilter(200) // (1)!\n        .inSquareSpread() // (2)!\n        .biomeFilter() // (3)!\n        .register()\n\n}\n</code></pre> <ol> <li>Only place an iceberg every 200 chunks.</li> <li>Randomly offset the iceberg horizontally.</li> <li>Only place the iceberg if the location hasn't moved to a biome without icebergs.</li> </ol> configured_feature/iceberg_blue.json<pre><code>{\n  \"type\": \"minecraft:iceberg\",\n  \"config\": {\n    \"state\": {\n      \"Name\": \"minecraft:blue_ice\"\n    }\n  }\n}\n</code></pre> placed_feature/iceberg_blue.json<pre><code>{\n  \"feature\": \"minecraft:iceberg_blue\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:rarity_filter\",\n      \"chance\": 200 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:biome\" // (3)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Only place an iceberg every 200 chunks.</li> <li>Randomly offset the iceberg horizontally.</li> <li>Only place the iceberg if the location hasn't moved to a biome without icebergs.</li> </ol>"},{"location":"addon/worldgen/features/configurations/iceberg/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/lake/","title":"Lake feature","text":"<p>Deprecated</p> <p>This feature is marked as deprecated in Minecraft's internal code. It might be removed in a future update.</p> <p>The <code>lake</code> feature can be used to add lakes to a biome (for example the underground lava lakes).</p>"},{"location":"addon/worldgen/features/configurations/lake/#configuration","title":"Configuration","text":"<p>The <code>lake</code> feature has the following configuration options:</p> Option Type Description <code>fluid</code> A <code>BlockState</code> The fluid block to use for the lake. <code>barrier</code> A <code>BlockState</code> The block to use for the lake's edge. <p>In code, the <code>LakeFeature.Configuration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/lake/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature for the underground lava lakes that can be found in most biomes.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val LAKE_LAVA = registerConfiguredFeature(\n        \"lake_lava\",\n        Feature.LAKE,\n        LakeFeature.Configuration(\n            BlockStateProvider.simple(Blocks.LAVA.defaultBlockState()), // (1)!\n            BlockStateProvider.simple(Blocks.STONE.defaultBlockState()) // (2)!\n        )\n    )\n\n}\n</code></pre> <ol> <li>Used as the fluid of the lake.</li> <li>Used as the barrier of the lake.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val LAKE_LAVA_UNDERGROUND = placedFeature(\"lake_lava_underground\", ConfiguredFeatures.LAKE_LAVA)\n        .rarityFilter(9) // (1)!\n        .inSquareSpread() // (2)!\n        .heightRangeUniform(VerticalAnchor.absolute(0), VerticalAnchor.top()) // (3)!\n        .environmentScan( // (4)!\n            Direction.DOWN,\n            BlockPredicate.allOf(BlockPredicate.not(BlockPredicate.ONLY_IN_AIR_PREDICATE), BlockPredicate.insideWorld(BlockPos(0, -5, 0))),\n            32\n        )\n        .surfaceRelativeThresholdFilter(Heightmap.Types.OCEAN_FLOOR_WG, Int.MIN_VALUE, -5) // (5)!\n        .biomeFilter() // (6)!\n        .register()\n\n}\n</code></pre> <ol> <li>Only place a lake every 9 chunks.</li> <li>Randomly offset the lake horizontally.</li> <li>Set the y-coordinate of the lake to a random value above 0.</li> <li>Search for a block that isn't air and is 5 blocks above the minimum build height.</li> <li>Only place the lake if it's at least 5 blocks below the ocean floor.</li> <li>Only place the lake if the location hasn't moved to a biome without lava lakes.</li> </ol> configured_feature/lake_lava.json<pre><code>{\n  \"type\": \"minecraft:lake\",\n  \"config\": {\n    \"fluid\": {\n      \"type\": \"minecraft:simple_state_provider\",\n      \"state\": {\n        \"Name\": \"minecraft:lava\",\n        \"Properties\": {\n          \"level\": \"0\"\n        }\n      }\n    },\n    \"barrier\": {\n      \"type\": \"minecraft:simple_state_provider\",\n      \"state\": {\n        \"Name\": \"minecraft:stone\"\n      }\n    }\n  }\n}\n</code></pre> placed_feature/lake_lava_underground.json<pre><code>{\n  \"feature\": \"minecraft:lake_lava\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:rarity_filter\",\n      \"chance\": 9 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:height_range\", // (3)!\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"below_top\": 0\n        },\n        \"min_inclusive\": {\n          \"absolute\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:environment_scan\", // (4)!\n      \"direction_of_search\": \"down\",\n      \"max_steps\": 32,\n      \"target_condition\": {\n        \"type\": \"minecraft:all_of\",\n        \"predicates\": [\n          {\n            \"type\": \"minecraft:not\",\n            \"predicate\": {\n              \"type\": \"minecraft:matching_blocks\",\n              \"blocks\": \"minecraft:air\"\n            }\n          },\n          {\n            \"type\": \"minecraft:inside_world_bounds\",\n            \"offset\": [\n              0,\n              -5,\n              0\n            ]\n          }\n        ]\n      }\n    },\n    {\n      \"type\": \"minecraft:surface_relative_threshold_filter\", // (5)!\n      \"heightmap\": \"OCEAN_FLOOR_WG\",\n      \"max_inclusive\": -5\n    },\n    {\n      \"type\": \"minecraft:biome\" // (6)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Only place a lake every 9 chunks.</li> <li>Randomly offset the lake horizontally.</li> <li>Set the y-coordinate of the lake to a random value above 0.</li> <li>Search for a block that isn't air and is 5 blocks above the minimum build height.</li> <li>Only place the lake if it's at least 5 blocks below the ocean floor.</li> <li>Only place the lake if the location hasn't moved to a biome without lava lakes.</li> </ol>"},{"location":"addon/worldgen/features/configurations/lake/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/large-dripstone/","title":"Large dripstone feature","text":"<p>Warning</p> <p>Advanced Knowledge Required - This documentation page is intended for users with in-depth knowledge of the world   generation system. Beginner users may find the content challenging to understand.</p> <p>The <code>large_dripstone</code> feature generates large dripstone formations in the world.</p>"},{"location":"addon/worldgen/features/configurations/large-dripstone/#configuration","title":"Configuration","text":"<p>The <code>large_dripstone</code> feature has the following configuration options. Some of these options are pretty hard to understand. Make sure to check out this graph to play around with the values.</p> Option Type Description <code>floor_to_ceiling_search_range</code> (optional in Json, defaults to <code>30</code>) An <code>int</code>. (Range limit in Json is \\([1;512]\\)) Determines the maximum distance from the base of the dripstone cluster to the ceiling. <code>column_radius</code> An <code>IntProvider</code>. (Range limit in Json is \\([1;60]\\)) Sampled twice to get the min and max radius of the dripstone column. <code>height_scale</code> A <code>FloatProvider</code>. (Range limit in Json is \\([0.0;20.0]\\)) The height scale of the dripstone column. <code>max_column_radius_to_cave_height_ratio</code> A <code>float</code>. (Range limit in Json is \\([0.0;1.0]\\)) The ratio of the max radius to the cave height. <code>stalactite_bluntness</code> A <code>FloatProvider</code>. (Range limit in Json is \\([0.0;10.0]\\)) Determines the height of the stalactite tip. <code>stalagmite_bluntness</code> A <code>FloatProvider</code>. (Range limit in Json is \\([0.0;10.0]\\)) Determines the height of the stalagmite tip. <code>wind_speed</code> A <code>FloatProvider</code>. (Range limit in Json is \\([0.0;2.0]\\)) Higher values lead to a bigger inclination of the dripstone. <code>min_radius_for_wind</code> An <code>int</code>. (Range limit in Json is \\([1;100]\\)) The minimum column radius for the wind to have an effect. <code>min_bluntness_for_wind</code> A <code>float</code>. (Range limit in Json is \\([0.0;5.0]\\)) The minimum bluntness for the wind to have an effect. <p>In code, the <code>LargeDripstoneConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/large-dripstone/#example","title":"Example","text":"<p>As an example, here's the configured and placed feature for the vanilla large dripstone formations.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val LARGE_DRIPSTONE = registerConfiguredFeature(\n        \"large_dripstone\",\n        Feature.LARGE_DRIPSTONE,\n        LargeDripstoneConfiguration(\n            30, // floorToCeilingSearchRange\n            UniformInt.of(3, 19), // columnRadius\n            UniformFloat.of(0.4f, 2.0f), // heightScale\n            0.33f, // maxColumnRadiusToCaveHeightRatio\n            UniformFloat.of(0.3f, 0.9f), // stalactiteBluntness\n            UniformFloat.of(0.4f, 1.0f), // stalagmiteBluntness\n            UniformFloat.of(0.0f, 0.3f), // windSpeed\n            4, // minRadiusForWind\n            0.6f // minBluntnessForWind\n        )\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val LARGE_DRIPSTONE = placedFeature(\"large_dripstone\", ConfiguredFeatures.LARGE_DRIPSTONE)\n        .count(UniformInt.of(10, 48))\n        .inSquareSpread()\n        .inYWorldBounds() // (1)!\n        .biomeFilter()\n        .register()\n\n}\n</code></pre> <ol> <li>Call is equivalent to:     <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(256))\n</code></pre></li> </ol> configured_feature/large_dripstone.json<pre><code>{\n  \"type\": \"minecraft:large_dripstone\",\n  \"config\": {\n    \"column_radius\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 19,\n        \"min_inclusive\": 3\n      }\n    },\n    \"floor_to_ceiling_search_range\": 30,\n    \"height_scale\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_exclusive\": 2.0,\n        \"min_inclusive\": 0.4\n      }\n    },\n    \"max_column_radius_to_cave_height_ratio\": 0.33,\n    \"min_bluntness_for_wind\": 0.6,\n    \"min_radius_for_wind\": 4,\n    \"stalactite_bluntness\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_exclusive\": 0.9,\n        \"min_inclusive\": 0.3\n      }\n    },\n    \"stalagmite_bluntness\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_exclusive\": 1.0,\n        \"min_inclusive\": 0.4\n      }\n    },\n    \"wind_speed\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_exclusive\": 0.3,\n        \"min_inclusive\": 0.0\n      }\n    }\n  }\n}\n</code></pre> placed_feature/large_dripstone.json<pre><code>{\n  \"feature\": \"minecraft:large_dripstone\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": {\n        \"type\": \"minecraft:uniform\",\n        \"value\": {\n          \"max_inclusive\": 48,\n          \"min_inclusive\": 10\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:in_square\"\n    },\n    {\n      \"type\": \"minecraft:height_range\",\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 256\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\"\n    }\n  ]\n}\n</code></pre>"},{"location":"addon/worldgen/features/configurations/large-dripstone/#result","title":"Result","text":"AloneNaturally generated <p><p> </p></p> <p><p> </p></p>"},{"location":"addon/worldgen/features/configurations/multiface-growth/","title":"Multiface growth feature","text":"<p>The <code>multiface_growth</code> feature is used to generate plants that grow on multiple faces of a block (for example sculk or glow lichen).</p>"},{"location":"addon/worldgen/features/configurations/multiface-growth/#configuration","title":"Configuration","text":"<p>The <code>multiface_growth</code> feature has the following configuration options:</p> Option Type Description <code>block</code> (optional in Json, defaults to <code>glow_lichen</code> A <code>String</code>. Either <code>glow_lichen</code> or <code>sculk_vein</code>. The block to generate. <code>search_range</code> (optional in Json, defaults to <code>10</code>) An <code>int</code>. (Range limit in Json is \\([1;64]\\)) The search range for the next block to grow on. <code>can_place_on_floor</code> (optional in Json, defaults to <code>false</code>) A <code>boolean</code>. Whether the plant can grow on the floor. <code>can_place_on_ceiling</code> (optional in Json, defaults to <code>true</code>) A <code>boolean</code>. Whether the plant can grow on the ceiling. <code>can_place_on_wall</code> (optional in Json, defaults to <code>true</code>) A <code>boolean</code>. Whether the plant can grow on the wall. <code>can_be_placed_on</code> A list of blocks. (Also supports a single block id, block tag or a list of them in Json) The blocks the plant can grow on. <code>chance_of_spreading</code> (optional in Json, defaults to <code>0.5</code>) A <code>float</code>. (Range limit in Json is \\([0.0;1.0]\\)) The chance that the plant will spread to a new block. <p>In code, the <code>MultifaceGrowthConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/multiface-growth/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature for sculk veins.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SCULK_VEIN = registerConfiguredFeature(\n        \"sculk_vein\",\n        Feature.MULTIFACE_GROWTH,\n        MultifaceGrowthConfiguration(\n            Blocks.SCULK_VEIN as MultifaceBlock, // block to use\n            20, // search range\n            true, // canPlaceOnFloor\n            true, // canPlaceOnCeiling\n            true, // canPlaceOnWall\n            1.0F, // chanceOfSpreading // (1)!\n            HolderSet.direct( // (2)!\n                Block::builtInRegistryHolder,\n                Blocks.STONE, Blocks.ANDESITE, Blocks.DIORITE, Blocks.GRANITE, Blocks.DRIPSTONE_BLOCK, Blocks.CALCITE, Blocks.TUFF, Blocks.DEEPSLATE\n            )\n        )\n    )\n\n}\n</code></pre> <ol> <li>Combined with the search range of 20, this ensures that every block in a 20 block radius will have a sculk vein.</li> <li>Only grow on typical cave blocks.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SCULK_VEIN = placedFeature(\"sculk_vein\", ConfiguredFeatures.SCULK_VEIN)\n        .count(UniformInt.of(204, 250)) // (1)!\n        .inSquareSpread() // (2)!\n        .inYWorldBounds() // (3)!\n        .biomeFilter() // (4)!\n        .register()\n\n}\n</code></pre> <ol> <li>Generate 204-250 attempts per chunk.</li> <li>Randomly offset the attempts horizontally.</li> <li>Set the y-level to a random int up to 256. The call is equivalent to    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(256));\n</code></pre></li> <li>Only generate in biomes that have sculk growth.</li> </ol> configured_feature/sculk_vein.json<pre><code>{\n  \"type\": \"minecraft:multiface_growth\",\n  \"config\": {\n    \"block\": \"minecraft:sculk_vein\",\n    \"search_range\": 20,\n    \"chance_of_spreading\": 1.0, // (1)! \n    \"can_place_on_floor\": true,\n    \"can_place_on_ceiling\": true,\n    \"can_place_on_wall\": true,\n    \"can_be_placed_on\": [ // (2)!\n      \"minecraft:stone\",\n      \"minecraft:andesite\",\n      \"minecraft:diorite\",\n      \"minecraft:granite\",\n      \"minecraft:dripstone_block\",\n      \"minecraft:calcite\",\n      \"minecraft:tuff\",\n      \"minecraft:deepslate\"\n    ]\n  }\n}\n</code></pre> <ol> <li>Grow on every block in a 20 block radius.</li> <li>Only grow on typical cave blocks.</li> </ol> placed_feature/sculk_vein.json<pre><code>{\n  \"feature\": \"minecraft:sculk_vein\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\", // (1)!\n      \"count\": {\n        \"type\": \"minecraft:uniform\",\n        \"value\": {\n          \"max_inclusive\": 250,\n          \"min_inclusive\": 204\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:height_range\", // (3)!\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 256\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\" // (4)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Generate 204-250 attempts per chunk.</li> <li>Randomly offset the attempts horizontally.</li> <li>Set the y-level to a random int up to 256.</li> <li>Only generate in biomes that have sculk growth.</li> </ol>"},{"location":"addon/worldgen/features/configurations/multiface-growth/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/nether-forest-vegetation/","title":"Nether forest vegetation feature","text":"<p>Hardcoded block check</p> <p>This feature has a hardcoded check for the surface block being <code>nylium</code> and will not work on other blocks</p> <p>The <code>nether_forest_vegetation</code> feature is a feature that randomly spreads a specific block on the surface.</p>"},{"location":"addon/worldgen/features/configurations/nether-forest-vegetation/#configuration","title":"Configuration","text":"<p>The nether forest vegetation feature has the following configuration options:</p> Option Type Description <code>state_provider</code> A <code>BlockStateProvider</code>. The block state to use for the vegetation. <code>spread_width</code> A positive <code>int</code>. The width of the area to spread the vegetation in. <code>spread_height</code> A positive <code>int</code>. The height of the area to spread the vegetation in. <p>In code, the <code>NetherForestVegetationConfig</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/nether-forest-vegetation/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature to spread nether sprouts in the nether forest biomes.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val NETHER_SPROUTS = registerConfiguredFeature(\n        \"nether_sprouts\",\n        Feature.NETHER_FOREST_VEGETATION,\n        NetherForestVegetationConfig(\n            BlockStateProvider.simple(Blocks.NETHER_SPROUTS), // block used for the vegetation\n            8, // spreadWidth\n            4 // spreadHeight\n        )\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val NETHER_SPROUTS = placedFeature(\"nether_sprouts\", ConfiguredFeatures.NETHER_SPROUTS)\n        .countOnEveryLayer(4) // (1)!\n        .biomeFilter() // (2)!\n        .register()\n\n}\n</code></pre> <ol> <li>Make sure to place the nether sprouts on every layer if multiple exist in the biome.</li> <li>Only place the sprouts in the nether forest biomes.</li> </ol> configured_feature/nether_sprouts.json<pre><code>{\n  \"type\": \"minecraft:nether_forest_vegetation\",\n  \"config\": {\n    \"state_provider\": {\n      \"type\": \"minecraft:simple_state_provider\",\n      \"state\": {\n        \"Name\": \"minecraft:nether_sprouts\"\n      }\n    },\n    \"spread_height\": 4,\n    \"spread_width\": 8\n  }\n}\n</code></pre> placed_feature/nether_sprouts.json<pre><code>{\n  \"feature\": \"minecraft:nether_sprouts\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count_on_every_layer\", // (1)!\n      \"count\": 4\n    },\n    {\n      \"type\": \"minecraft:biome\" // (2)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Make sure to place the nether sprouts on every layer if multiple exist in the biome.</li> <li>Only place the sprouts in the nether forest biomes.</li> </ol>"},{"location":"addon/worldgen/features/configurations/ores/","title":"Ore features","text":"<p>Ore features are used to generate ores in the world. They are configured using the <code>ore</code> or <code>scattered_ore</code> feature types (<code>ore</code> is recommended for most cases).</p>"},{"location":"addon/worldgen/features/configurations/ores/#configuration","title":"Configuration","text":"<p>The following options are available for ore configurations:</p> Option Type Description <code>targets</code> A list of <code>TargetBlockState</code>s A list which determines what block to use for specific targets. Needs a <code>target</code> and a <code>state</code> option. See below for more details. <code>size</code> An <code>int</code>. (Range limit in Json is \\([0;64]\\)) Determines the volume size of the ore. <code>discard_chance_on_air_exposure</code> A <code>float</code>. (Range limit in Json is \\([0;1]\\)) Determines the chance that the ore will be discarded if it is exposed to air. <code>1</code> means that the ore will never be exposed to air. <p>In code, the <code>OreConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/ores/#targets","title":"Targets","text":"<p>As mentioned above, the <code>targets</code> option is a list of targets. The <code>target</code> option is a so called<code>RuleTest</code>. A <code>RuleTest</code> is  pretty much the same thing as <code>Predicate&lt;BlockState&gt;</code> in Java. The <code>state</code> option is a <code>BlockStateProvider</code> which determines what block to use for the specific target. The following <code>RuleTests</code> are available:</p> Name Description Example <code>minecraft:always_true</code> Matches every block <pre><code>AlwaysTrueTest.INSTANCE\n</code></pre> <pre><code>\"target\": {\n  \"predicate_type\": \"minecraft:always_true\"\n}\n</code></pre> <code>minecraft:block_match</code> Matches a specific block <pre><code>BlockMatchTest(Blocks.STONE)\n</code></pre> <pre><code>\"target\": {\n  \"predicate_type\": \"minecraft:block_match\",\n  \"block\": \"minecraft:stone\"\n}\n</code></pre> <code>minecraft:blockstate_match</code> Matches a specific blockstate <pre><code>BlockStateMatchTest(\n    Blocks.GLASS_PANE.defaultBlockState()\n        .setValue(IronBarsBlock.EAST, true)\n        .setValue(IronBarsBlock.WEST, true)\n)\n</code></pre> <pre><code>\"target\": {\n  \"predicate_type\": \"minecraft:blockstate_match\",\n  \"block_state\": {\n    \"Name\": \"minecraft:glass_pane\",\n    \"Properties\": {\n      \"east\": \"true\",\n      \"north\": \"false\",\n      \"south\": \"false\",\n      \"waterlogged\": \"false\",\n      \"west\": \"true\"\n    }\n  }\n}\n</code></pre> <code>minecraft:tag_match</code> Matches a specific block tag <pre><code>TagMatchTest(BlockTags.STONE_ORE_REPLACEABLES)\n</code></pre> <pre><code>\"target\": {\n  \"predicate_type\": \"minecraft:tag_match\",\n  \"tag\": \"minecraft:stone_ore_replaceables\"\n}\n</code></pre> <code>minecraft:random_block_match</code> Matches the given block with a probability. The probability should be a value between 0.0 and 1.0. <pre><code>RandomBlockMatchTest(Blocks.COBBLESTONE, 0.5f)\n</code></pre> <pre><code>\"target\": {\n  \"predicate_type\": \"minecraft:random_block_match\",\n  \"block\": \"minecraft:cobblestone\",\n  \"probability\": 0.5\n}\n</code></pre> <code>minecraft:random_blockstate_match</code> Matches the given blockstate with a probability. The probability should be a value between 0.0 and 1.0. <pre><code>RandomBlockStateMatchTest(\n    Blocks.GLASS_PANE.defaultBlockState()\n        .setValue(IronBarsBlock.EAST, true)\n        .setValue(IronBarsBlock.WEST, true),\n    0.5f\n)\n</code></pre> <pre><code>\"target\": {\n  \"predicate_type\": \"minecraft:random_blockstate_match\",\n  \"block_state\": {\n    \"Name\": \"minecraft:glass_pane\",\n    \"Properties\": {\n      \"east\": \"true\",\n      \"north\": \"false\",\n      \"south\": \"false\",\n      \"waterlogged\": \"false\",\n      \"west\": \"true\"\n    }\n  }\n  \"probability\": 0.5\n}\n</code></pre> <code>nova:material_match</code> Matches a specific nova material <pre><code>MaterialMatchTest(Blocks.STAR_SHARDS_ORE)\n</code></pre> <pre><code>\"target\": {\n  \"predicate_type\": \"nova:material_match\",\n  \"material\": \"machines:star_shards_ore\"\n}\n</code></pre> Custom <code>RuleTests</code> <p>You can also implement your own custom <code>RuleTests</code> by implementing the Minecraft <code>RuleTest</code> interface or extending Nova's <code>NovaRuleTest</code>/<code>NovaMaterialTest</code> classes. Nova's classes provide a bit more parameters such as the <code>Level</code> and <code>BlockPos</code> (or even the <code>NovaMaterial</code> via <code>NovaMaterialTest</code>).  You will also need to provide a <code>RuleTestType</code>, which  specifies how your RuleTest implementation is (de)serialized. This can either be done by implementing the <code>RuleTestType</code> interface or creating it inline by just registering the <code>Codec</code> in the <code>FeatureRegistry</code>. Check out the Codecs page for more information on Mojang's serialization system. Here's the code for Nova's <code>MaterialMatchTest</code> implementation as an example:</p> Inline RuleTestTypeRuleTestType object RuleTests.kt<pre><code>object RuleTests : MinecraftUtilTypeRegistry by ExampleAddon.registry {\n\n    @OptIn(ExperimentalWorldGen::class)\n    val MATERIAL_MATCH_TEST_TYPE = registerRuleTestType(\"material_match\", MaterialMatchTest.CODEC)\n\n}\n</code></pre> MaterialMatchTest.kt<pre><code>class MaterialMatchTest(val material: BlockNovaMaterial) : NovaMaterialTest() {\n\n    override fun test(material: BlockNovaMaterial, level: Level, pos: BlockPos, state: BlockState, random: RandomSource): Boolean {\n        return material == this.material\n    }\n\n    override fun getType(): RuleTestType&lt;*&gt; = RuleTests.MATERIAL_MATCH_TEST_TYPE\n\n    companion object {\n\n        @JvmField // (1)!\n        val CODEC: Codec&lt;MaterialMatchTest&gt; =\n            BlockNovaMaterial.CODEC\n                .fieldOf(\"material\")\n                .xmap(::MaterialMatchTest, MaterialMatchTest::material)\n                .codec()\n                .stable()\n    }\n\n}\n</code></pre> <ol> <li>This allows <code>CODEC</code> to be accessed as a field from Java code instead of having to call <code>getCODEC()</code></li> </ol> MaterialMatchTest.kt<pre><code>object MaterialMatchTestType : RuleTestType&lt;MaterialMatchTest&gt; {\n\n    private val CODEC: Codec&lt;MaterialMatchTest&gt; =\n        BlockNovaMaterial.CODEC\n            .fieldOf(\"material\")\n            .xmap(::MaterialMatchTest, MaterialMatchTest::material)\n            .codec()\n            .stable()\n\n    override fun codec() = CODEC\n\n}\n</code></pre> RuleTests.kt<pre><code>object RuleTests : MinecraftUtilTypeRegistry by ExampleAddon.registry {\n\n    @OptIn(ExperimentalWorldGen::class)\n    val MATERIAL_MATCH_TEST_TYPE = registerRuleTestType(\"material_match\", MaterialMatchTestType)\n\n}\n</code></pre> MaterialMatchTest.kt<pre><code>class MaterialMatchTest(val material: BlockNovaMaterial) : NovaMaterialTest() {\n\n    override fun test(material: BlockNovaMaterial, level: Level, pos: BlockPos, state: BlockState, random: RandomSource): Boolean {\n        return material == this.material\n    }\n\n    override fun getType(): RuleTestType&lt;*&gt; = MaterialMatchTestType\n\n}\n</code></pre>"},{"location":"addon/worldgen/features/configurations/ores/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature of star shards ore from the machines addon.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val ORE_STAR_SHARDS = registerConfiguredFeature(\n        \"ore_star_shards\",\n        Feature.ORE,\n        OreConfiguration(\n            listOf( // (1)!\n                OreConfiguration.target(\n                    TagMatchTest(BlockTags.STONE_ORE_REPLACEABLES),\n                    WrapperBlockState(Blocks.STAR_SHARDS_ORE) // (2)!\n                ),\n                OreConfiguration.target(\n                    TagMatchTest(BlockTags.DEEPSLATE_ORE_REPLACEABLES),\n                    WrapperBlockState(Blocks.DEEPSLATE_STAR_SHARDS_ORE)\n                )\n            ),\n            4, // (3)!\n            0.0f // (4)!\n        )\n    )\n\n}\n</code></pre> <ol> <li>Specify that <code>star_shards_ore</code> should be used to replace normal stone and <code>deepslate_star_shards_ore</code> should be used to replace deepslate.</li> <li>Since blocks registered via Nova aren't registered in the vanilla blocks registry and thus don't have a blockstate, we need to wrap an block material in a <code>WrapperBlockState</code>.    These objects are later detected before the block is placed and are passed to Nova for correct placement.</li> <li>The size of the ore vein.</li> <li>The chance that the ore will be discarded if it's exposed to air.</li> </ol> <p>For placements, it's pretty useful to define a few util functions to create the <code>PlacementModifier</code> list.</p> PlacedFeatures.kt<pre><code>private fun orePlacement(firstModifier: PlacementModifier, lastModifier: PlacementModifier) =\n    listOf(firstModifier, InSquarePlacement.spread(), lastModifier, BiomeFilter.biome())\n\n/**\n * @param count The amount of ores per chunk\n */\nprivate fun commonOrePlacement(count: Int, lastModifier: PlacementModifier) =\n    orePlacement(CountPlacement.of(count), lastModifier)\n\n/**\n * @param chance The chance of an ore to spawn per chunk. 7 = 1 in 7 chunks\n */\nprivate fun rareOrePlacement(chance: Int, lastModifier: PlacementModifier) =\n    orePlacement(RarityFilter.onAverageOnceEvery(chance), lastModifier)\n</code></pre> Vanilla ore placement examples <pre><code>// ore_iron_upper\ncommonOrePlacement(90, HeightRangePlacement.triangle(VerticalAnchor.absolute(80), VerticalAnchor.absolute(384)))\n// ore_iron_middle\ncommonOrePlacement(10, HeightRangePlacement.triangle(VerticalAnchor.absolute(-24), VerticalAnchor.absolute(56)))\n// ore_iron_small\ncommonOrePlacement(10, HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(72)))\n\n// ore_diamond\ncommonOrePlacement(7, HeightRangePlacement.triangle(VerticalAnchor.aboveBottom(-80), VerticalAnchor.aboveBottom(80)))\n// ore_diamond_large\nrareOrePlacement(9, HeightRangePlacement.triangle(VerticalAnchor.aboveBottom(-80), VerticalAnchor.aboveBottom(80)))\n// ore_diamond_buried\ncommonOrePlacement(4, HeightRangePlacement.triangle(VerticalAnchor.aboveBottom(-80), VerticalAnchor.aboveBottom(80)))\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val ORE_STAR_SHARDS = placedFeature(\"ore_star_shards\", ConfiguredFeatures.ORE_STAR_SHARDS)\n        .modifiers(commonOrePlacement(30, HeightRangePlacement.uniform(VerticalAnchor.absolute(120), VerticalAnchor.top()))) // (1)!\n        .register()\n\n    /* ... util placement functions ... */\n\n}\n</code></pre> <ol> <li>30 tries per chunk and only place the ore at a high altitude (y&gt;120).</li> </ol> configured_feature/ore_star_shards.json<pre><code>{\n  \"type\": \"minecraft:ore\",\n  \"config\": {\n    \"discard_chance_on_air_exposure\": 0.0,\n    \"size\": 4,\n    \"targets\": [ // (1)!\n      {\n        \"state\": {\n          \"Name\": \"machines:star_shards_ore\"\n        },\n        \"target\": {\n          \"predicate_type\": \"minecraft:tag_match\",\n          \"tag\": \"minecraft:stone_ore_replaceables\"\n        }\n      },\n      {\n        \"state\": {\n          \"Name\": \"machines:deepslate_star_shards_ore\"\n        },\n        \"target\": {\n          \"predicate_type\": \"minecraft:tag_match\",\n          \"tag\": \"minecraft:deepslate_ore_replaceables\"\n        }\n      }\n    ]\n  }\n</code></pre> <ol> <li>Specify that <code>star_shards_ore</code> should be used to replace normal stone and <code>deepslate_star_shards_ore</code> should be used to replace deepslate.</li> </ol> placed_feature/ore_star_shards.json<pre><code>{\n  \"feature\": \"machines:ore_star_shards\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": 30 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:height_range\", // (3)!\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"below_top\": 0\n        },\n        \"min_inclusive\": {\n          \"absolute\": 120\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\" // (4)!\n    }\n  ]\n}\n</code></pre> <ol> <li>30 tries per chunk.</li> <li>Spread the tries in a square.</li> <li>Place the ore above y-level 119.</li> <li>Discard the try if we moved into a biome that doesn't generate star shards.</li> </ol>"},{"location":"addon/worldgen/features/configurations/pointed-dripstone/","title":"Pointed dripstone feature","text":"<p>The <code>pointed_dripstone</code> feature can be used to add pointed dripstone to the world.</p>"},{"location":"addon/worldgen/features/configurations/pointed-dripstone/#configuration","title":"Configuration","text":"<p>The <code>pointed_dripstone</code> feature has the following configuration options:</p> Option Type Description <code>chance_of_taller_dripstone</code> (optional in Json, defaults to <code>0.2</code>) A <code>float</code> in the range \\([0.0;1.0]\\). Determines the chance of a dripstone being taller than 1 block. <code>chance_of_directional_spread</code> (optional in Json, defaults to <code>0.7</code>) A <code>float</code> in the range \\([0.0;1.0]\\). Determines the chance of a dripstone spreading horizontally. <code>chance_of_spread_radius2</code> (optional in Json, defaults to <code>0.5</code>) A <code>float</code> in the range \\([0.0;1.0]\\). Determines the chance of a dripstone spreading 2 blocks away. <code>chance_of_spread_radius3</code> (optional in Json, defaults to <code>0.5</code>) A <code>float</code> in the range \\([0.0;1.0]\\). Determines the chance of a dripstone spreading 3 blocks away. <p>In code, the <code>PointedDripstoneConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/pointed-dripstone/#example","title":"Example","text":"<p>Minecraft uses a <code>simple_random_selector</code> feature to actually place pointed dripstone. Here's  one of the features used to place upwards pointing dripstone.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val POINTED_DRIPSTONE = registerConfiguredFeature(\n        \"pointed_dripstone\",\n        Feature.POINTED_DRIPSTONE,\n        PointedDripstoneConfiguration(\n            0.2F, // chance_of_taller_dripstone\n            0.7F, // chance_of_directional_spread\n            0.5F, // chance_of_spread_radius2\n            0.5F  // chance_of_spread_radius3\n        )\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val POINTED_DRIPSTONE = placedFeature(\"pointed_dripstone\", ConfiguredFeatures.POINTED_DRIPSTONE)\n        .environmentScan( // (1)!\n            Direction.DOWN,\n            BlockPredicate.solid(),\n            BlockPredicate.ONLY_IN_AIR_OR_WATER_PREDICATE, // (2)!\n            12 // max_steps\n        )\n        .randomVerticalOffset(1) // (3)!\n        .register()\n\n}\n</code></pre> <ol> <li>Searches downwards for a solid block.</li> <li>Only place the dripstone if the block below is air or water. The static constant is equivalent to    <pre><code>BlockPredicate.matchesBlocks(Blocks.AIR, Blocks.WATER) \n</code></pre></li> <li>Makes sure to place the dripstone on top of the solid block.</li> </ol> configured_feature/pointed_dripstone.json<pre><code>{\n  \"type\": \"minecraft:pointed_dripstone\",\n  \"config\": {\n    \"chance_of_taller_dripstone\": 0.2,\n    \"chance_of_directional_spread\": 0.7,\n    \"chance_of_spread_radius2\": 0.5,\n    \"chance_of_spread_radius3\": 0.5\n  }\n}\n</code></pre> <p>The placed feature is also located in the random selector:</p> placed_feature/pointed_dripstone.json<pre><code>{\n  \"feature\": \"minecraft:pointed_dripstone\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:environment_scan\", // (1)!\n      \"allowed_search_condition\": {\n        \"type\": \"minecraft:matching_blocks\",\n        \"blocks\": [\n          \"minecraft:air\",\n          \"minecraft:water\"\n        ]\n      },\n      \"direction_of_search\": \"down\",\n      \"max_steps\": 12,\n      \"target_condition\": {\n        \"type\": \"minecraft:solid\" \n      }\n    },\n    {\n      \"type\": \"minecraft:random_offset\", // (2)!\n      \"xz_spread\": 0,\n      \"y_spread\": 1\n    }\n  ]\n}\n</code></pre> <ol> <li>Searches downwards for a solid block.</li> <li>Makes sure to place the dripstone on top of the solid block.</li> </ol>"},{"location":"addon/worldgen/features/configurations/pointed-dripstone/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/random-patch/","title":"Random patch feature","text":"<p>The <code>random_patch</code> feature can be used to place a feature in a random pattern multiple times. It's mostly used for vegetation and even has 2 more features for flowers: <code>flower</code> and <code>no_bonemeal_flower</code>. Their configuration is the same as the<code>random_patch</code> feature, but <code>flower</code> features will also be used when applying bonemeal to grass blocks. <code>no_bonemeal_flower</code> only exists to make distinguishing it from other <code>random_patch</code> features easier.</p>"},{"location":"addon/worldgen/features/configurations/random-patch/#configuration","title":"Configuration","text":"<p>The following configuration options are available:</p> Option Type Description <code>tries</code> (optional in Json, defaults to <code>128</code>) A positive <code>int</code>. The amount of times the feature will try to generate. <code>xz_spread</code> (optional in Json, defaults to <code>7</code>) A positive <code>int</code>. The maximum horizontal distance from the center of the feature. <code>y_spread</code> (optional in Json, defaults to <code>3</code>) A positive <code>int</code>. The maximum vertical distance from the center of the feature. <code>feature</code> The placed feature (in Json, this can also be the id of the placed feature if registered elsewhere) The placed feature to generate. <p>In code, the <code>RandomPatchConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/random-patch/#example","title":"Example","text":"<p>As an example, here's the random patch used to generate dead bushes in the badlands biome:</p> KotlinJson <p>Minecraft offers a few util functions in the <code>FeatureUtils</code> class to make the creation of the <code>RandomPatchConfiguration</code> easier.</p> ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val PATCH_DEAD_BUSH = registerConfiguredFeature(\n        \"patch_dead_bush\",\n        Feature.RANDOM_PATCH,\n        FeatureUtils.simpleRandomPatchConfiguration( // (1)!\n            4, // tries\n            PlacementUtils.onlyWhenEmpty( // (2)!\n                Feature.SIMPLE_BLOCK,\n                SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.DEAD_BUSH)) // (3)!\n            )\n        )\n    )\n\n}\n</code></pre> <ol> <li>The <code>simpleRandomPatchConfiguration</code> function creates a <code>RandomPatchConfiguration</code> with the given tries and placed feature.    <code>xz_spread</code> and <code>y_spread</code> are set to <code>7</code> and <code>3</code> respectively.</li> <li>The <code>onlyWhenEmpty</code> function creates an inlined <code>PlacedFeature</code> that only places the feature when the block at the position is air.</li> <li>Place single dead bushes.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val PATCH_DEAD_BUSH = placedFeature(\"patch_dead_bush\", ConfiguredFeatures.PATCH_DEAD_BUSH)\n        .count(20) // (1)!\n        .inSquareSpread() // (2)!\n        .moveToWorldSurface() // (3)!\n        .biomeFilter() // (4)!\n        .register()\n\n}\n</code></pre> <ol> <li>20 tries to generate the feature.</li> <li>Spread the feature horizontally.</li> <li>Set the y-coordinate to the world surface. This call is equivalent to    <pre><code>HeightmapPlacement.onHeightmap(Heightmap.Types.WORLD_SURFACE_WG)\n</code></pre></li> <li>Make sure that the feature only generates if the position hasn't moved outside the biome that contains dead bushes.</li> </ol> configured_feature/patch_dead_bush.json<pre><code>{\n  \"type\": \"minecraft:random_patch\",\n  \"config\": {\n    \"feature\": { // (1)!\n      \"feature\": { // (2)!\n        \"type\": \"minecraft:simple_block\",\n        \"config\": {\n          \"to_place\": {\n            \"type\": \"minecraft:simple_state_provider\",\n            \"state\": {\n              \"Name\": \"minecraft:dead_bush\"\n            }\n          }\n        }\n      },\n      \"placement\": [\n        {\n          \"type\": \"minecraft:block_predicate_filter\",\n          \"predicate\": {\n            \"type\": \"minecraft:matching_blocks\",\n            \"blocks\": \"minecraft:air\"\n          }\n        }\n      ]\n    },\n    \"tries\": 4,\n    \"xz_spread\": 7,\n    \"y_spread\": 3\n  }\n}\n</code></pre> <ol> <li>The placed feature to generate. Can also be the id of a placed feature that was configured elsewhere.</li> <li>The feature's configuration. Can also be the id of a configured feature.</li> </ol> placed_feature/patch_dead_bush_badlands.json<pre><code>{\n  \"feature\": \"minecraft:patch_dead_bush\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": 20 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:heightmap\",\n      \"heightmap\": \"WORLD_SURFACE_WG\" // (3)!\n    },\n    {\n      \"type\": \"minecraft:biome\" // (4)!\n    }\n  ]\n}\n</code></pre> <ol> <li>20 tries to generate the feature.</li> <li>Spread the feature horizontally.</li> <li>Set the y-coordinate to the world surface.</li> <li>Make sure that the feature only generates if the position hasn't moved outside the biome that contains dead bushes.</li> </ol>"},{"location":"addon/worldgen/features/configurations/random-patch/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/random-selector/","title":"Random selector feature","text":"<p>The <code>random_selector</code> feature can be used to randomly choose from a provided list of features to place.</p>"},{"location":"addon/worldgen/features/configurations/random-selector/#configuration","title":"Configuration","text":"<p>The <code>random_selector</code> feature has the following configuration options:</p> Option Type Description <code>features</code> A list of placed features objects (or id's inside the <code>feature</code> option in Json) and their corresponding chance. The list of features to choose from. <code>default</code> A placed feature The default feature to place if none of the provided features got picked <p>In code, the <code>RandomFeatureConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/random-selector/#example","title":"Example","text":"<p>As an example, here's the random selector used to generate tree in the old growth taiga biome</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val TREES_OLD_GROWTH_SPRUCE_TAIGA = registerConfiguredFeature(\n        \"trees_old_growth_spruce_taiga\",\n        Feature.RANDOM_SELECTOR,\n        RandomFeatureConfiguration(\n            listOf(\n                WeightedPlacedFeature(\n                    VanillaRegistryAccess.getHolder(TreePlacements.MEGA_SPRUCE_CHECKED), // (1)!\n                    1f / 3f // (2)!\n                ),\n                WeightedPlacedFeature(\n                    VanillaRegistryAccess.getHolder(TreePlacements.PINE_CHECKED),\n                    1f / 3f // (3)!\n                )\n            ),\n            VanillaRegistryAccess.getHolder(TreePlacements.SPRUCE_CHECKED) // (4)!\n        )\n    )\n\n}\n</code></pre> <ol> <li>Get the registry holder for the mega spruce tree placed feature. (Also support inlined placed features</li> <li>The chance of the mega spruce tree is \\(^1/_{3}\\).</li> <li>The chance of the pine tree is \\(^1/_{3}\\).</li> <li>The default tree is a spruce tree (with a \\(^1/_{3}\\) chance).</li> </ol> configured_feature/trees_old_growth_spruce_taiga.json<pre><code>{\n  \"type\": \"minecraft:random_selector\",\n  \"config\": {\n    \"features\": [\n      { // (1)!\n        \"chance\": 0.33333334,\n        \"feature\": \"minecraft:mega_spruce_checked\" // (2)!\n      },\n      { // (3)!\n        \"chance\": 0.33333334,\n        \"feature\": \"minecraft:pine_checked\"\n      }\n    ],\n    \"default\": \"minecraft:spruce_checked\" // (4)!\n  }\n}\n</code></pre> <ol> <li>A mega spruce tree with a \\(^1/_{3}\\) chance.</li> <li>As previously mentioned, this could also be an entire placed feature object. </li> <li>A pine tree with a \\(^1/_{3}\\) chance.</li> <li>A spruce tree with a \\(^1/_{3}\\) chance.</li> </ol> <p></p>"},{"location":"addon/worldgen/features/configurations/replace-blobs/","title":"Replace blobs feature","text":"<p>The <code>replace_blobs</code> feature can be used to replace specific blobs with a blob of a different block. Although the name suggests that it only works with netherrack, it can be used with any block.</p>"},{"location":"addon/worldgen/features/configurations/replace-blobs/#configuration","title":"Configuration","text":"<p>The <code>replace_blobs</code> feature has the following configuration options:</p> Option Type Description <code>target</code> A <code>BlockState</code>. The block state to replace. <code>state</code> A <code>BlockState</code>. The block state to replace the target with. <code>radius</code> An <code>IntProvider</code>. (Range limit in Json is \\([0;12]\\)) The radius of the blob. <p>In code, the <code>ReplaceSphereConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/replace-blobs/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature for blackstone blobs in the nether.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val BLACKSTONE_BLOBS = registerConfiguredFeature(\n        \"blackstone_blobs\",\n        Feature.REPLACE_BLOBS,\n        ReplaceSphereConfiguration(\n            Blocks.NETHERRACK.defaultBlockState(), // targetState\n            Blocks.BLACKSTONE.defaultBlockState(), // replaceState\n            UniformInt.of(3, 7) // radius // (1)!\n        )\n    )\n\n}\n</code></pre> <ol> <li>Random radius between 3 and 7.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val BLACKSTONE_BLOBS = placedFeature(\"blackstone_blobs\", ConfiguredFeatures.BLACKSTONE_BLOBS)\n        .count(25) // (1)!\n        .inSquareSpread() // (2)!\n        .modifier(PlacementUtils.FULL_RANGE) // (3)!\n        .biomeFilter() // (4)!\n        .register()\n\n}\n</code></pre> <ol> <li>25 tries to place the blobs per chunk.</li> <li>Randomly spread the blobs horizontally.</li> <li>Set the y-coordinate to a random value. The static constant is equivalent to    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.top());\n</code></pre></li> <li>Only place the blobs in biomes that have blackstone blobs.</li> </ol> configured_feature/blackstone_blobs.json<pre><code>{\n  \"type\": \"minecraft:replace_blobs\",\n  \"config\": {\n    \"target\": {\n      \"Name\": \"minecraft:netherrack\"\n    },\n    \"state\": {\n      \"Name\": \"minecraft:blackstone\"\n    },\n    \"radius\": {\n      \"type\": \"minecraft:uniform\", // (1)!\n      \"value\": {\n        \"max_inclusive\": 7,\n        \"min_inclusive\": 3\n      }\n    }\n  }\n}\n</code></pre> <ol> <li>Random radius between 3 and 7.</li> </ol> placed_feature/blackstone_blobs.json<pre><code>{\n  \"feature\": \"minecraft:blackstone_blobs\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": 25 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:height_range\", // (3)!\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"below_top\": 0\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\" // (4)!\n    }\n  ]\n}\n</code></pre> <ol> <li>25 tries to place the blobs per chunk.</li> <li>Randomly spread the blobs horizontally.</li> <li>Set the y-coordinate to a random value.</li> <li>Only place the blobs in biomes that have blackstone blobs.</li> </ol>"},{"location":"addon/worldgen/features/configurations/replace-blobs/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/replace-single-block/","title":"Replace single block feature","text":"<p>The <code>replace_single_block</code> feature allows you to randomly replace blocks with another block.</p>"},{"location":"addon/worldgen/features/configurations/replace-single-block/#configuration","title":"Configuration","text":"<p>The <code>replace_single_block</code> feature has a single option, <code>targets</code> which similar to the <code>targets</code> option in the ore feature, allows you to specify which block states should be replaced with which other block states. Each <code>Target</code> has the following options:</p> Option Type Description <code>target</code> A <code>RuleTest</code>. Check out the <code>ores</code> page for more information. The test to check if the block should be replaced. <code>state</code> A <code>BlockState</code> The block state to replace the target with. <p>In code, the <code>ReplaceBlockConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/replace-single-block/#example","title":"Example","text":"<p>As an example, here's a feature to randomly replace acacia logs with stone.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val ACACIA_LOGS_TO_STONE = registerConfiguredFeature(\n        \"acacia_logs_to_stone\",\n        Feature.REPLACE_SINGLE_BLOCK,\n        ReplaceBlockConfiguration(\n            listOf(\n                OreConfiguration.target(TagMatchTest(BlockTags.ACACIA_LOGS), Blocks.STONE.defaultBlockState())\n            )\n        )\n    )\n\n}\n</code></pre> <p>Or, if you only want to replace one specific block state</p> ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val ACACIA_LOGS_TO_STONE = registerConfiguredFeature(\n        \"acacia_logs_to_stone\",\n        Feature.REPLACE_SINGLE_BLOCK,\n        ReplaceBlockConfiguration(\n            Blocks.ACACIA_LOG.defaultBlockState(),\n            Blocks.STONE.defaultBlockState(),\n        )\n    )\n\n}\n</code></pre> configured_feature/acacia_logs_to_stone.json<pre><code>{\n  \"type\": \"minecraft:replace_single_block\",\n  \"config\": {\n    \"targets\": [\n      {\n        \"target\": {\n          \"predicate_type\": \"minecraft:tag_match\",\n          \"tag\": \"minecraft:acacia_logs\"\n        },\n        \"state\": {\n          \"Name\": \"minecraft:stone\"\n        }\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"addon/worldgen/features/configurations/root-system/","title":"Root system feature","text":"<p>Warning</p> <p>Advanced Knowledge Required - This documentation page is intended for users with in-depth knowledge of the world   generation system. Beginner users may find the content challenging to understand.</p> <p>The <code>root_system</code> feature can be used to generate trees with roots.</p>"},{"location":"addon/worldgen/features/configurations/root-system/#configuration","title":"Configuration","text":"<p>A root system feature has the following configuration options:</p> Option Type Description <code>feature</code> A <code>PlacedFeature</code> (or id in Json) The feature to place at the tree position. <code>required_vertical_space_for_tree</code> An <code>int</code>. (Range limit in Json is \\([1;64]\\)) The amount of vertical space required for the tree to grow. <code>root_radius</code> An <code>int</code>. (Range limit in Json is \\([1;64]\\)) The radius of the root system. <code>root_replaceable</code> A block tag (prefixed with <code>#</code> in Json) The blocks that can be replaced by roots. <code>root_state_provider</code> A <code>BlockStateProvider</code> The block state to use for the root. <code>root_placement_attempts</code> An <code>int</code>. (Range limit in Json is \\([1;256]\\)) The amount of attempts to place a root. <code>root_column_max_height</code> An <code>int</code>. (Range limit in Json is \\([1;4096]\\)) The maximum height of a root column. <code>hanging_root_radius</code> An <code>int</code>. (Range limit in Json is \\([1;64]\\)) The radius of hanging roots. <code>hanging_roots_vertical_span</code> An <code>int</code>. (Range limit in Json is \\([0;16]\\)) The vertical span of hanging roots. <code>hanging_root_state_provider</code> A <code>BlockStateProvider</code> The block state to use for the hanging root. <code>hanging_root_placement_attempts</code> An <code>int</code>. (Range limit in Json is \\([1;256]\\)) The amount of attempts to place a hanging root. <code>allowed_vertical_water_for_tree</code> An <code>int</code>. (Range limit in Json is \\([0;64]\\)) The amount of vertical water allowed for the tree to grow. <code>allowed_tree_position</code> A <code>BlockPredicate</code> A predicate to check if the tree position is valid. <p>In code, the <code>RootSystemConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/root-system/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature for the azalea tree</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val ROOTED_AZALEA_TREE = registerConfiguredFeature(\n        \"rooted_azalea_tree\",\n        Feature.ROOT_SYSTEM,\n        RootSystemConfiguration(\n            PlacementUtils.inlinePlaced(VanillaRegistryAccess.getHolder(TreeFeatures.AZALEA_TREE)), // feature\n            3, // required_vertical_space_for_tree\n            3, // root_radius\n            BlockTags.AZALEA_ROOT_REPLACEABLE, // root_replaceable\n            BlockStateProvider.simple(Blocks.ROOTED_DIRT), // root_state_provider\n            20, // root_placement_attempts\n            100, // root_column_max_height\n            3, // hanging_root_radius\n            2, // hanging_roots_vertical_span\n            BlockStateProvider.simple(Blocks.HANGING_ROOTS), // hanging_root_state_provider\n            20, // hanging_root_placement_attempts\n            2, // allowed_vertical_water_for_tree\n            BlockPredicate.allOf( // allowed_tree_position\n                BlockPredicate.anyOf(\n                    BlockPredicate.matchesBlocks(Blocks.AIR, Blocks.CAVE_AIR, Blocks.VOID_AIR, Blocks.WATER),\n                    BlockPredicate.matchesTag(BlockTags.LEAVES),\n                    BlockPredicate.matchesTag(BlockTags.REPLACEABLE_PLANTS)\n                ),\n                BlockPredicate.matchesTag(Direction.DOWN.normal, BlockTags.AZALEA_GROWS_ON)\n            )\n        )\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val ROOTED_AZALEA_TREE = placedFeature(\"rooted_azalea_tree\", ConfiguredFeatures.ROOTED_AZALEA_TREE)\n        .count(UniformInt.of(1, 2))\n        .inSquareSpread()\n        .inYWorldBounds() // (1)!\n        .environmentScan(Direction.UP, BlockPredicate.solid(), BlockPredicate.ONLY_IN_AIR_PREDICATE, 12)\n        .randomVerticalOffset(-1)\n        .biomeFilter()\n        .register()\n\n}\n</code></pre> <ol> <li>Set the y-level to a random int up to 256. The call is equivalent to    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(256));\n</code></pre></li> <li>Search for the first solid block upwards.</li> </ol> configured_feature/rooted_azalea_tree.json<pre><code>{\n  \"type\": \"minecraft:root_system\",\n  \"config\": {\n    \"allowed_tree_position\": {\n      \"type\": \"minecraft:all_of\",\n      \"predicates\": [\n        {\n          \"type\": \"minecraft:any_of\",\n          \"predicates\": [\n            {\n              \"type\": \"minecraft:matching_blocks\",\n              \"blocks\": [\n                \"minecraft:air\",\n                \"minecraft:cave_air\",\n                \"minecraft:void_air\",\n                \"minecraft:water\"\n              ]\n            },\n            {\n              \"type\": \"minecraft:matching_block_tag\",\n              \"tag\": \"minecraft:leaves\"\n            },\n            {\n              \"type\": \"minecraft:matching_block_tag\",\n              \"tag\": \"minecraft:replaceable_plants\"\n            }\n          ]\n        },\n        {\n          \"type\": \"minecraft:matching_block_tag\",\n          \"offset\": [\n            0,\n            -1,\n            0\n          ],\n          \"tag\": \"minecraft:azalea_grows_on\"\n        }\n      ]\n    },\n    \"allowed_vertical_water_for_tree\": 2,\n    \"feature\": {\n      \"feature\": \"minecraft:azalea_tree\",\n      \"placement\": []\n    },\n    \"hanging_root_placement_attempts\": 20,\n    \"hanging_root_radius\": 3,\n    \"hanging_root_state_provider\": {\n      \"type\": \"minecraft:simple_state_provider\",\n      \"state\": {\n        \"Name\": \"minecraft:hanging_roots\",\n        \"Properties\": {\n          \"waterlogged\": \"false\"\n        }\n      }\n    },\n    \"hanging_roots_vertical_span\": 2,\n    \"required_vertical_space_for_tree\": 3,\n    \"root_column_max_height\": 100,\n    \"root_placement_attempts\": 20,\n    \"root_radius\": 3,\n    \"root_replaceable\": \"#minecraft:azalea_root_replaceable\",\n    \"root_state_provider\": {\n      \"type\": \"minecraft:simple_state_provider\",\n      \"state\": {\n        \"Name\": \"minecraft:rooted_dirt\"\n      }\n    }\n  }\n}\n</code></pre> placed_feature/rooted_azalea_tree.json<pre><code>{\n  \"feature\": \"minecraft:rooted_azalea_tree\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": {\n        \"type\": \"minecraft:uniform\",\n        \"value\": {\n          \"max_inclusive\": 2,\n          \"min_inclusive\": 1\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:in_square\"\n    },\n    {\n      \"type\": \"minecraft:height_range\",\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 256\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:environment_scan\",\n      \"allowed_search_condition\": {\n        \"type\": \"minecraft:matching_blocks\",\n        \"blocks\": \"minecraft:air\"\n      },\n      \"direction_of_search\": \"up\",\n      \"max_steps\": 12,\n      \"target_condition\": {\n        \"type\": \"minecraft:solid\"\n      }\n    },\n    {\n      \"type\": \"minecraft:random_offset\",\n      \"xz_spread\": 0,\n      \"y_spread\": -1\n    },\n    {\n      \"type\": \"minecraft:biome\"\n    }\n  ]\n}\n</code></pre>"},{"location":"addon/worldgen/features/configurations/root-system/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/sculk-patch/","title":"Sculk patch feature","text":"<p>The <code>sculk_patch</code> feature allows you to generate sculk patches in the world.</p>"},{"location":"addon/worldgen/features/configurations/sculk-patch/#configuration","title":"Configuration","text":"<p>The <code>sculk_patch</code> feature has the following configuration options:</p> Option Type Description <code>charge_count</code> An <code>int</code>. (Range limit in Json is \\([1;32]\\)) The amount of charges the sculk patch should have. <code>amount_per_charge</code> An <code>int</code>. (Range limit in Json is \\([1;500]\\)) The initial value of each charge. <code>spread_attempts</code> An <code>int</code>. (Range limit in Json is \\([1;64]\\)) The amount of attempts to spread the sculk patch. <code>growth_rounds</code> An <code>int</code>. (Range limit in Json is \\([0;8]\\)) The amount of times to generate the patch. <code>spread_rounds</code> An <code>int</code>. (Range limit in Json is \\([0;8]\\)) The amount of times to spread the patch. <code>extra_rare_growths</code> An <code>IntProvider</code>. (Range limit in Json is \\([0;8]\\)) The amount of extra sculk shriekers to generate. <code>catalyst_chance</code> A <code>float</code> in the range \\([0.0;1.0]\\) The chance for a sculk catalyst to generate. <p>In code, the <code>SculkPatchConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/sculk-patch/#example","title":"Example","text":"<p>As an example, here's the default sculk patch configured- and placed feature used for the deep dark biome</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SCULK_PATCH_DEEP_DARK = registerConfiguredFeature(\n        \"sculk_patch_deep_dark\",\n        Feature.SCULK_PATCH,\n        SculkPatchConfiguration(\n            10, // charge_count\n            32, // amount_per_charge\n            64, // spread_attempts\n            0, // growth_rounds\n            1, // spread_rounds\n            ConstantInt.of(0), // extra_rare_growths\n            0.5f // catalyst_chance\n        )\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SCULK_PATCH_DEEP_DARK = placedFeature(\"sculk_patch_deep_dark\", ConfiguredFeatures.SCULK_PATCH_DEEP_DARK)\n        .count(256) // (1)!\n        .inSquareSpread() // (2)!\n        .inYWorldBounds() // (3)!\n        .biomeFilter() // (4)!\n        .register()\n\n}\n</code></pre> <ol> <li>256 attempts to generate sculk patches per chunk.</li> <li>Randomly offset the attempts horizontally.</li> <li>Set the y-coordinate to a random value up to 256. The call is equivalent to    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(256));\n</code></pre></li> <li>Only generate in the deep dark biome.</li> </ol> configured_feature/sculk_patch_deep_dark.json<pre><code>{\n  \"type\": \"minecraft:sculk_patch\",\n  \"config\": {\n    \"amount_per_charge\": 32,\n    \"catalyst_chance\": 0.5,\n    \"charge_count\": 10,\n    \"extra_rare_growths\": 0,\n    \"growth_rounds\": 0,\n    \"spread_attempts\": 64,\n    \"spread_rounds\": 1\n  }\n}\n</code></pre> placed_feature/sculk_patch_deep_dark.json<pre><code>{\n  \"feature\": \"minecraft:sculk_patch_deep_dark\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": 256 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:height_range\", // (3)!\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 256\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\" // (4)!\n    }\n  ]\n}\n</code></pre> <ol> <li>256 attempts to generate sculk patches per chunk.</li> <li>Randomly offset the attempts horizontally.</li> <li>Set the y-coordinate to a random value up to 256.</li> <li>Only generate in the deep dark biome.</li> </ol> <p></p>"},{"location":"addon/worldgen/features/configurations/sea-pickle/","title":"Sea pickle feature","text":"<p>As the name suggests, the <code>sea_pickle</code> feature generates sea pickles in the ocean.</p>"},{"location":"addon/worldgen/features/configurations/sea-pickle/#configuration","title":"Configuration","text":"<p>The <code>sea_pickle</code> feature only has a <code>count</code> <code>IntProvider</code> option. It determines the max amount of sea pickles per placement.</p> <p>In code, the <code>CountConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/sea-pickle/#example","title":"Example","text":"KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SEA_PICKLE = registerConfiguredFeature(\n        \"sea_pickle\",\n        Feature.SEA_PICKLE,\n        CountConfiguration(20)\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SEA_PICKLE = placedFeature(\"sea_pickle\", ConfiguredFeatures.SEA_PICKLE)\n        .rarityFilter(16) // (1)!\n        .inSquareSpread() // (2)!\n        .moveToTopSolid() // (3)!\n        .biomeFilter() // (4)!\n        .register()\n\n}\n</code></pre> <ol> <li>Place sea pickles in every 16th chunk.</li> <li>Randomly offset the placement horizontally.</li> <li>Set y-coordinate to the ocean floor. This call is equivalent to    <pre><code>HeightmapPlacement.onHeightmap(Heightmap.Types.OCEAN_FLOOR_WG)\n</code></pre></li> <li>Only place in the warm ocean biome.</li> </ol> configured_feature/sea_pickle.json<pre><code>{\n  \"type\": \"minecraft:sea_pickle\",\n  \"config\": {\n    \"count\": 20\n  }\n}\n</code></pre> placed_feature/sea_pickle.json<pre><code>{\n  \"feature\": \"minecraft:sea_pickle\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:rarity_filter\",\n      \"chance\": 16 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:heightmap\",\n      \"heightmap\": \"OCEAN_FLOOR_WG\" // (3)!\n    },\n    {\n      \"type\": \"minecraft:biome\" // (4)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Place sea pickles in every 16th chunk.</li> <li>Randomly offset the placement horizontally.</li> <li>Set y-coordinate to the ocean floor.</li> <li>Only place in the warm ocean biome.</li> </ol>"},{"location":"addon/worldgen/features/configurations/seagrass/","title":"Seagrass feature","text":"<p>The <code>seagrass</code> feature allows you to generate seagrass in water.</p>"},{"location":"addon/worldgen/features/configurations/seagrass/#configuration","title":"Configuration","text":"<p>The <code>seagrass</code> feature only has the <code>probability</code> option (<code>float</code> in the range \\([0.0;1.0)\\)), which determines the chance of seagrass being generated.</p> <p>In code, the <code>ProbabilityFeatureConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/seagrass/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature of seagrass in the warm ocean biome.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SEAGRASS_TALL = registerConfiguredFeature(\n        \"seagrass_tall\",\n        Feature.SEAGRASS,\n        ProbabilityFeatureConfiguration(0.3f)\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SEAGRASS_TALL = placedFeature(\"seagrass_tall\", ConfiguredFeatures.SEAGRASS_TALL)\n        .inSquareSpread() // (1)!\n        .moveToTopSolid() // (2)!\n        .count(80) // (3)!\n        .biomeFilter() // (4)!\n        .register()\n\n}\n</code></pre> <ol> <li>Randomly offset the placement horizontally.</li> <li>Set y-coordinate to the ocean floor. This call is equivalent to    <pre><code>HeightmapPlacement.onHeightmap(Heightmap.Types.OCEAN_FLOOR_WG)\n</code></pre></li> <li>Place 80 seagrass per chunk.</li> <li>Only place in the warm ocean biome.</li> </ol> configured_feature/seagrass_tall.json<pre><code>{\n  \"type\": \"minecraft:seagrass\",\n  \"config\": {\n    \"probability\": 0.8\n  }\n}\n</code></pre> placed_feature/seagrass_deep_warm.json<pre><code>{\n  \"feature\": \"minecraft:seagrass_tall\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:in_square\" // (1)!\n    },\n    {\n      \"type\": \"minecraft:heightmap\",\n      \"heightmap\": \"OCEAN_FLOOR_WG\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:count\", // (3)!\n      \"count\": 80\n    },\n    {\n      \"type\": \"minecraft:biome\" // (4)!\n    }\n  ]\n}\n</code></pre> <ol> <li>Randomly offset the placement horizontally.</li> <li>Set y-coordinate to the ocean floor.</li> <li>Place 80 seagrass per chunk.</li> <li>Only place in the warm ocean biome.</li> </ol>"},{"location":"addon/worldgen/features/configurations/simple-block/","title":"Simple block feature","text":"<p>The <code>simple_block</code> feature allows you to randomly place blocks in the world.</p>"},{"location":"addon/worldgen/features/configurations/simple-block/#configuration","title":"Configuration","text":"<p>The <code>simple_block</code> feature has a single option, <code>to_place</code> which is a <code>BlockStateProvider</code> that specifies which block states should be placed.</p> <p>In code, the <code>SimpleBlockConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/simple-block/#example","title":"Example","text":"<p>As an example, here's the feature used to randomly place spore blossoms.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SPORE_BLOSSOM = registerConfiguredFeature(\n        \"spore_blossom\",\n        Feature.SIMPLE_BLOCK,\n        SimpleBlockConfiguration(BlockStateProvider.simple(Blocks.SPORE_BLOSSOM))\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SPORE_BLOSSOM = placedFeature(\"spore_blossom\", ConfiguredFeatures.SPORE_BLOSSOM)\n        .count(25) // (1)!\n        .inSquareSpread() // (2)!\n        .inYWorldBounds() // (3)!\n        .environmentScan(Direction.UP, BlockPredicate.solid(), BlockPredicate.ONLY_IN_AIR_PREDICATE, 12) // (4)!\n        .randomVerticalOffset(-1) // (5)!\n        .biomeFilter() // (6)!\n        .register()\n\n}\n</code></pre> <ol> <li>25 attempts to place a spore blossom per chunk.</li> <li>Randomly offset the location horizontally.</li> <li>Set the y-coordinate to a random value up to 256. The call is equivalent to    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(256));\n</code></pre></li> <li>Search up to 12 blocks above the randomly selected location for a solid block.</li> <li>Offset the location by -1 vertically.</li> <li>Only place spore blossoms in biomes that have the <code>minecraft:spore_blossom</code> feature.</li> </ol> configured_feature/spore_blossom.json<pre><code>{\n  \"type\": \"minecraft:simple_block\",\n  \"config\": {\n    \"to_place\": {\n      \"type\": \"minecraft:simple_state_provider\",\n      \"state\": {\n        \"Name\": \"minecraft:spore_blossom\"\n      }\n    }\n  }\n}\n</code></pre> placed_feature/spore_blossom.json<pre><code>{\n  \"feature\": \"minecraft:spore_blossom\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": 25 // (1)!\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:height_range\", // (3)!\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 256\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:environment_scan\", // (4)!\n      \"allowed_search_condition\": {\n        \"type\": \"minecraft:matching_blocks\",\n        \"blocks\": \"minecraft:air\"\n      },\n      \"direction_of_search\": \"up\",\n      \"max_steps\": 12,\n      \"target_condition\": {\n        \"type\": \"minecraft:solid\"\n      }\n    },\n    {\n      \"type\": \"minecraft:random_offset\", // (5)!\n      \"xz_spread\": 0,\n      \"y_spread\": -1\n    },\n    {\n      \"type\": \"minecraft:biome\" // (6)!\n    }\n  ]\n}\n</code></pre> <ol> <li>25 attempts to place a spore blossom per chunk.</li> <li>Randomly offset the location horizontally.</li> <li>Set the y-coordinate to a random value up to 256.</li> <li>Search up to 12 blocks above the randomly selected location for a solid block.</li> <li>Offset the location by -1 vertically.</li> <li>Only place spore blossoms in biomes that have the <code>minecraft:spore_blossom</code> feature.</li> </ol> <p></p>"},{"location":"addon/worldgen/features/configurations/simple-random-selector/","title":"Simple random selector feature","text":"<p>Similar to the random selector feature, the <code>simple_random_selector</code> feature can be used to randomly choose from a provided list of features to place. The only difference being the absence of the <code>default</code> and <code>probability</code> options since all features have an equal chance of being picked.</p>"},{"location":"addon/worldgen/features/configurations/simple-random-selector/#configuration","title":"Configuration","text":"<p>The <code>simple_random_selector</code> feature only has the <code>features</code> option:</p> Option Type Description <code>features</code> Either a single placed feature object or a list of them (Ids are supported in Json). The list of features to choose from. <p>In code, the <code>SimpleRandomFeatureConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/simple-random-selector/#example","title":"Example","text":"<p>As mentioned on the Pointed Dripstone page, the <code>simple_random_selector</code> feature is used to randomly choose between a stalactite and a stalagmite. Si here's the full configured- and placed feature.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val POINTED_DRIPSTONE = registerConfiguredFeature(\n        \"pointed_dripstone\",\n        Feature.SIMPLE_RANDOM_SELECTOR,\n        SimpleRandomFeatureConfiguration(HolderSet.direct(\n            PlacementUtils.inlinePlaced(\n                Feature.POINTED_DRIPSTONE,\n                PointedDripstoneConfiguration(0.2f, 0.7f, 0.5f, 0.5f),\n                EnvironmentScanPlacement.scanningFor(Direction.DOWN, BlockPredicate.solid(), BlockPredicate.ONLY_IN_AIR_OR_WATER_PREDICATE, 12),\n                RandomOffsetPlacement.vertical(ConstantInt.of(1))\n            ),\n            PlacementUtils.inlinePlaced(\n                Feature.POINTED_DRIPSTONE,\n                PointedDripstoneConfiguration(0.2f, 0.7f, 0.5f, 0.5f),\n                EnvironmentScanPlacement.scanningFor(Direction.UP, BlockPredicate.solid(), BlockPredicate.ONLY_IN_AIR_OR_WATER_PREDICATE, 12),\n                RandomOffsetPlacement.vertical(ConstantInt.of(-1)))\n        ))\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val POINTED_DRIPSTONE = placedFeature(\"pointed_dripstone\", ConfiguredFeatures.POINTED_DRIPSTONE)\n        .count(UniformInt.of(192, 256))\n        .inSquareSpread()\n        .inYWorldBounds()\n        .count(UniformInt.of(1, 5))\n        .randomOffset(ClampedNormalInt.of(0.0f, 3.0f, -10, 10), ClampedNormalInt.of(0.0f, 0.6f, -2, 2))\n        .biomeFilter()\n        .register()\n\n}\n</code></pre> configured_feature/pointed_dripstone.json<pre><code>{\n  \"type\": \"minecraft:simple_random_selector\",\n  \"config\": {\n    \"features\": [\n      {\n        \"feature\": {\n          \"type\": \"minecraft:pointed_dripstone\",\n          \"config\": {\n            \"chance_of_directional_spread\": 0.7,\n            \"chance_of_spread_radius2\": 0.5,\n            \"chance_of_spread_radius3\": 0.5,\n            \"chance_of_taller_dripstone\": 0.2\n          }\n        },\n        \"placement\": [\n          {\n            \"type\": \"minecraft:environment_scan\",\n            \"allowed_search_condition\": {\n              \"type\": \"minecraft:matching_blocks\",\n              \"blocks\": [\n                \"minecraft:air\",\n                \"minecraft:water\"\n              ]\n            },\n            \"direction_of_search\": \"down\",\n            \"max_steps\": 12,\n            \"target_condition\": {\n              \"type\": \"minecraft:solid\"\n            }\n          },\n          {\n            \"type\": \"minecraft:random_offset\",\n            \"xz_spread\": 0,\n            \"y_spread\": 1\n          }\n        ]\n      },\n      {\n        \"feature\": {\n          \"type\": \"minecraft:pointed_dripstone\",\n          \"config\": {\n            \"chance_of_directional_spread\": 0.7,\n            \"chance_of_spread_radius2\": 0.5,\n            \"chance_of_spread_radius3\": 0.5,\n            \"chance_of_taller_dripstone\": 0.2\n          }\n        },\n        \"placement\": [\n          {\n            \"type\": \"minecraft:environment_scan\",\n            \"allowed_search_condition\": {\n              \"type\": \"minecraft:matching_blocks\",\n              \"blocks\": [\n                \"minecraft:air\",\n                \"minecraft:water\"\n              ]\n            },\n            \"direction_of_search\": \"up\",\n            \"max_steps\": 12,\n            \"target_condition\": {\n              \"type\": \"minecraft:solid\"\n            }\n          },\n          {\n            \"type\": \"minecraft:random_offset\",\n            \"xz_spread\": 0,\n            \"y_spread\": -1\n          }\n        ]\n      }\n    ]\n  }\n}\n</code></pre> placed_feature/pointed_dripstone.json<pre><code>{\n  \"feature\": \"minecraft:pointed_dripstone\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": {\n        \"type\": \"minecraft:uniform\",\n        \"value\": {\n          \"max_inclusive\": 256,\n          \"min_inclusive\": 192\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:in_square\"\n    },\n    {\n      \"type\": \"minecraft:height_range\",\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 256\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:count\",\n      \"count\": {\n        \"type\": \"minecraft:uniform\",\n        \"value\": {\n          \"max_inclusive\": 5,\n          \"min_inclusive\": 1\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:random_offset\",\n      \"xz_spread\": {\n        \"type\": \"minecraft:clamped_normal\",\n        \"value\": {\n          \"deviation\": 3.0,\n          \"max_inclusive\": 10,\n          \"mean\": 0.0,\n          \"min_inclusive\": -10\n        }\n      },\n      \"y_spread\": {\n        \"type\": \"minecraft:clamped_normal\",\n        \"value\": {\n          \"deviation\": 0.6,\n          \"max_inclusive\": 2,\n          \"mean\": 0.0,\n          \"min_inclusive\": -2\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\"\n    }\n  ]\n}\n</code></pre> <p></p>"},{"location":"addon/worldgen/features/configurations/spring-feature/","title":"Spring feature","text":"<p>The <code>spring_feature</code> allows you to single-block fluid springs in the world.</p>"},{"location":"addon/worldgen/features/configurations/spring-feature/#configuration","title":"Configuration","text":"<p>The <code>spring_feature</code> has the following configuration options:</p> Option Type Description <code>state</code> A <code>BlockState</code> (Has to be a fluid) The fluid state to use for the spring. <code>requires_block_below</code> (optional in Json, defaults to <code>true</code>) A <code>boolean</code> Whether the spring requires a block in <code>valid_blocks</code> below. <code>rock_count</code> (optional in Json, defaults to 4) An <code>int</code> The required amount of blocks in <code>valid_blocks</code> around the spring. <code>hole_count</code> (optional in Json, defaults to 1) An <code>int</code> The required amount of air blocks around the spring. <code>valid_blocks</code> A list of <code>BlockStates</code> The blocks that are valid for the spring to spawn in. <p>In code, the <code>SpringConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/spring-feature/#example","title":"Example","text":"<p>As an example, here's the placed and configured feature used to place water springs in caves.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SPRING_WATER = registerConfiguredFeature(\n        \"spring_water\",\n        Feature.SPRING,\n        SpringConfiguration(\n            Fluids.WATER.defaultFluidState(), // state\n            true, // requires_block_below\n            4, // rock_count\n            1, // hole_count\n            HolderSet.direct( // valid_blocks\n                Block::builtInRegistryHolder,\n                Blocks.STONE, Blocks.GRANITE, Blocks.DIORITE, Blocks.ANDESITE, Blocks.DEEPSLATE, Blocks.TUFF, Blocks.CALCITE, Blocks.DIRT, Blocks.SNOW_BLOCK, Blocks.POWDER_SNOW, Blocks.PACKED_ICE\n            )\n        )\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val SPRING_WATER = placedFeature(\"spring_water\", ConfiguredFeatures.SPRING_WATER)\n        .count(25) // (1)!\n        .inSquareSpread() // (2)!\n        .heightRangeUniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(192)) // (3)!\n        .biomeFilter() // (4)!\n        .register()\n\n}\n</code></pre> <ol> <li>25 attempts per chunk.</li> <li>Spread the springs out.</li> <li>Set the y-coordinate to a random value between the minimum y-level and 192.</li> <li>Only place the springs in biomes that have the configured feature.</li> </ol> configured_feature/spring_water.json<pre><code>{\n  \"type\": \"minecraft:spring_feature\",\n  \"config\": {\n    \"hole_count\": 1,\n    \"requires_block_below\": true,\n    \"rock_count\": 4,\n    \"state\": {\n      \"Name\": \"minecraft:water\",\n      \"Properties\": {\n        \"falling\": \"true\"\n      }\n    },\n    \"valid_blocks\": [\n      \"minecraft:stone\",\n      \"minecraft:granite\",\n      \"minecraft:diorite\",\n      \"minecraft:andesite\",\n      \"minecraft:deepslate\",\n      \"minecraft:tuff\",\n      \"minecraft:calcite\",\n      \"minecraft:dirt\",\n      \"minecraft:snow_block\",\n      \"minecraft:powder_snow\",\n      \"minecraft:packed_ice\"\n    ]\n  }\n}\n</code></pre> placed_feature/spring_water.json<pre><code>{\n  \"feature\": \"minecraft:spring_water\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\", // (1)!\n      \"count\": 25\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:height_range\", // (3)!\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 192\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:biome\" // (4)!\n    }\n  ]\n}\n</code></pre> <ol> <li>25 attempts per chunk.</li> <li>Spread the springs out.</li> <li>Set the y-coordinate to a random value between 0 and 192.</li> <li>Only place the springs in biomes that have the configured feature.</li> </ol>"},{"location":"addon/worldgen/features/configurations/spring-feature/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/tree/","title":"Trees","text":"<p>TODO</p>"},{"location":"addon/worldgen/features/configurations/twisting-vines/","title":"Twisting vines Feature","text":"<p>Hardcoded block check</p> <p>This feature has a hardcoded check for the block below the feature being <code>netherrack</code>, <code>warped_nylium</code> or <code>warped_wart_block</code> and will not work on other blocks</p> <p>The <code>twisting_vines</code> can be used to generate twisting vines in the world.</p>"},{"location":"addon/worldgen/features/configurations/twisting-vines/#configuration","title":"Configuration","text":"<p>The <code>twisting_vines</code> feature has the following configuration options:</p> Option Type Description <code>spread_width</code> A positive <code>int</code> Specifies the spread width of the twisting vines. Max width is <code>spread_width * 2 + 1</code> <code>spread_height</code> A positive <code>int</code> Specifies the spread height of the twisting vines. Max height is <code>spread_height * 2 + 1</code> <code>max_height</code> A positive <code>int</code> Specifies the maximum height of the twisting vines. Actual height is <code>max_height * 2</code> <p>In code, the <code>TwistingVinesConfig</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/twisting-vines/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature to generate twisting vines in the nether:</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val TWISTING_VINES = registerConfiguredFeature(\n        \"twisting_vines\",\n        Feature.TWISTING_VINES,\n        TwistingVinesConfig(\n            8, // spreadWidth\n            4, // spreadHeight\n            8 // maxHeight\n        )\n    )\n\n}\n</code></pre> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val TWISTING_VINES = placedFeature(\"twisting_vines\", ConfiguredFeatures.TWISTING_VINES)\n        .count(10) // (1)!\n        .inSquareSpread() // (2)!\n        .modifier(PlacementUtils.FULL_RANGE) // (3)!\n        .biomeFilter() // (4)!\n        .register()\n\n}\n</code></pre> <ol> <li>10 twisting vines per chunk.</li> <li>Spread the vines horizontally.</li> <li>Set the y-coordinate to a random value. The static constant is equivalent to    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.top());\n</code></pre></li> <li>Only place the vines if the location hasn't moved outside the warped forest biome.</li> </ol> configured_features/twisting_vines.json<pre><code>{\n   \"type\": \"minecraft:twisting_vines\",\n   \"config\": {\n      \"spread_width\": 8,\n      \"spread_height\": 4,\n      \"max_height\": 8\n   }\n}\n</code></pre> placed_features/twisting_vines.json<pre><code>{\n   \"feature\": \"minecraft:twisting_vines\",\n   \"placement\": [\n      {\n         \"type\": \"minecraft:count\", // (1)!\n         \"count\": 10\n      },\n      {\n         \"type\": \"minecraft:in_square\" // (2)!\n      },\n      {\n         \"type\": \"minecraft:height_range\", // (3)!\n         \"height\": {\n            \"type\": \"minecraft:uniform\",\n            \"max_inclusive\": {\n               \"below_top\": 0\n            },\n            \"min_inclusive\": {\n               \"above_bottom\": 0\n            }\n         }\n      },\n      {\n         \"type\": \"minecraft:biome\" // (4)!\n      }\n   ]\n}\n</code></pre> <ol> <li>10 twisting vines per chunk.</li> <li>Spread the vines horizontally.</li> <li>Set the y-coordinate to a random value. The static constant is equivalent to    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.top());\n</code></pre></li> <li>Only place the vines if the location hasn't moved outside the warped forest biome.</li> </ol>"},{"location":"addon/worldgen/features/configurations/twisting-vines/#result","title":"Result","text":"AloneNaturally generated <p><p> </p></p> <p><p> </p></p>"},{"location":"addon/worldgen/features/configurations/underwater-magma/","title":"Underwater magma feature","text":"<p>The <code>underwater_magma</code> feature can be used to generate magma blocks underwater.</p>"},{"location":"addon/worldgen/features/configurations/underwater-magma/#configuration","title":"Configuration","text":"<p>The <code>underwater_magma</code> feature has the following configuration options:</p> Option Type Description <code>floor_search_range</code> An <code>int</code>. (Range limit in Json is \\([0;512]\\)) The maximum y-distance from the origin <code>Blockpos</code> of the feature to search for a floor. <code>placement_radius_around_floor</code> An <code>int</code>. (Range limit in Json is \\([0;64]\\)) The radius around the floor to place magma blocks. <code>placement_probability_per_valid_position</code> A <code>float</code>. (Range limit in Json is \\([0.0;1.0]\\)) The probability that a magma block will be placed at a valid position. <p>In code, the <code>UnderwaterMagmaConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/underwater-magma/#example","title":"Example","text":"<p>As an example, here's the placed and configured feature used to place magma blocks in underwater caves:</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val UNDERWATER_MAGMA = registerConfiguredFeature(\n        \"underwater_magma\",\n        Feature.UNDERWATER_MAGMA,\n        UnderwaterMagmaConfiguration(\n            5, // floor_search_range\n            1, // placement_radius_around_floor\n            0.5F // placement_probability_per_valid_position\n        )\n    )\n\n}\n</code></pre> <pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val UNDERWATER_MAGMA = placedFeature(\"underwater_magma\", ConfiguredFeatures.UNDERWATER_MAGMA)\n        .count(UniformInt.of(44, 52)) // (1)!\n        .inSquareSpread() // (2)!\n        .inYWorldBounds() // (3)!\n        .surfaceRelativeThresholdFilter(Heightmap.Types.OCEAN_FLOOR_WG, Int.MIN_VALUE, -2) // (4)!\n        .biomeFilter() // (5)!\n        .register()\n\n}\n</code></pre> <ol> <li>Random amount between 44 and 52.</li> <li>Randomly spread the blocks horizontally.</li> <li>Constant for    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(256))\n</code></pre></li> <li>Only place the feature if it's at least 2 blocks below the ocean floor.</li> <li>Only place the feature in biomes that have underwater magma.</li> </ol> configured_feature/underwater_magma.json<pre><code>{\n   \"type\": \"minecraft:underwater_magma\",\n   \"config\": {\n      \"floor_search_range\": 5,\n      \"placement_probability_per_valid_position\": 0.5,\n      \"placement_radius_around_floor\": 1\n   }\n}\n</code></pre> placed_feature/underwater_magma.json<pre><code>{\n   \"feature\": \"minecraft:underwater_magma\",\n   \"placement\": [\n      {\n         \"type\": \"minecraft:count\", // (1)!\n         \"count\": {\n            \"type\": \"minecraft:uniform\",\n            \"value\": {\n               \"max_inclusive\": 52,\n               \"min_inclusive\": 44\n            }\n         }\n      },\n      {\n         \"type\": \"minecraft:in_square\" // (2)!\n      },\n      {\n         \"type\": \"minecraft:height_range\", // (3)!\n         \"height\": {\n            \"type\": \"minecraft:uniform\",\n            \"max_inclusive\": {\n               \"absolute\": 256\n            },\n            \"min_inclusive\": {\n               \"above_bottom\": 0\n            }\n         }\n      },\n      {\n         \"type\": \"minecraft:surface_relative_threshold_filter\", // (4)!\n         \"heightmap\": \"OCEAN_FLOOR_WG\",\n         \"max_inclusive\": -2\n      },\n      {\n         \"type\": \"minecraft:biome\" // (5)!\n      }\n   ]\n}\n</code></pre> <ol> <li>Random amount between 44 and 52.</li> <li>Randomly spread the blocks horizontally.</li> <li>Constant for    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(256))\n</code></pre></li> <li>Only place the feature if it's at least 2 blocks below the ocean floor.</li> <li>Only place the feature in biomes that have underwater magma.</li> </ol>"},{"location":"addon/worldgen/features/configurations/underwater-magma/#result","title":"Result","text":""},{"location":"addon/worldgen/features/configurations/vegetation-patch/","title":"Vegetation patch feature","text":"<p>The <code>vegetation_patch</code> and <code>waterlogged_vegetation_patch</code> features can be used to randomly spread vegetation in the world.</p>"},{"location":"addon/worldgen/features/configurations/vegetation-patch/#configuration","title":"Configuration","text":"<p>The vegetation patch feature has the following configuration options:</p> Option Type Description <code>replaceable</code> A block tag (Starting with <code>#</code> in Json). The blocks that can be replaced by the vegetation. <code>ground_state</code> A <code>BlockStateProvider</code> The block state of the vegetation. <code>vegetation_feature</code> A <code>PlacedFeature</code> (or id in Json). The vegetation to place. <code>surface</code> Enum constants of <code>CaveSurface</code> (<code>ceiling</code> or <code>floor</code>). The surface to place the vegetation on. <code>depth</code> An <code>IntProvider</code> (Range limit in Json is \\([0;128]\\)). The search depth. <code>extra_bottom_block_chance</code> A <code>float</code> (Range limit in Json is \\([0.0;1.0]\\)). The chance that an extra block is placed at the bottom of the vegetation. <code>vertical_range</code> An <code>int</code> (Range limit in Json is \\([1;256]\\)). The vertical range of the vegetation. <code>vegetation_chance</code> A <code>float</code> (Range limit in Json is \\([0.0;1.0]\\)). The chance that the vegetation is placed. <code>xz_radius</code> An <code>IntProvider</code> (Range limit in Json is \\([0;128]\\)). The horizontal radius of the vegetation. <code>extra_edge_column_chance</code> A <code>float</code> (Range limit in Json is \\([0.0;1.0]\\)). The chance that an extra column is placed at the edge of the vegetation. <p>In code, the <code>VegetationPatchConfiguration</code> class is used to configure the feature.</p>"},{"location":"addon/worldgen/features/configurations/vegetation-patch/#example","title":"Example","text":"<p>As an example, here's the configured- and placed feature for placing moss in caves.</p> KotlinJson ConfiguredFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject ConfiguredFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val MOSS_PATCH = registerConfiguredFeature(\n        \"moss_patch\",\n        Feature.VEGETATION_PATCH,\n        VegetationPatchConfiguration(\n            BlockTags.MOSS_REPLACEABLE, // replaceable\n            BlockStateProvider.simple(Blocks.MOSS_BLOCK), // ground_state\n            PlacementUtils.inlinePlaced(VanillaRegistryAccess.getHolder(CaveFeatures.MOSS_VEGETATION)), // vegetation_feature (1)\n            CaveSurface.FLOOR, // surface\n            ConstantInt.of(1), // depth\n            0.0F, // extra_bottom_block_chance\n            5, // vertical_range\n            0.8F, // vegetation_chance\n            UniformInt.of(4, 7), // xz_radius\n            0.3F // extra_edge_column_chance\n        )\n    )\n\n}\n</code></pre> <ol> <li>Check out inlined placed features for more information.</li> </ol> PlacedFeatures.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject PlacedFeatures : FeatureRegistry by ExampleAddon.registry {\n\n    val MOSS_PATCH = placedFeature(\"lush_caves_vegetation\", ConfiguredFeatures.MOSS_PATCH)\n        .count(125) // (1)!\n        .inSquareSpread() // (2)!\n        .inYWorldBounds() // (3)!\n        .environmentScan( // (4)!\n            Direction.DOWN,\n            BlockPredicate.solid(),\n            BlockPredicate.ONLY_IN_AIR_PREDICATE,\n            12\n        )\n        .randomVerticalOffset(1) // (5)!\n        .biomeFilter() // (6)!\n        .register()\n\n}\n</code></pre> <ol> <li>125 attempts per chunk.</li> <li>Spread the vegetation in horizontally.</li> <li>Set the y-level to a random int up to 256. The static constant is equivalent to    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(256));\n</code></pre></li> <li>Search for the first solid block below the current position for 12 blocks.</li> <li>Add a y-offset of 1 block.</li> <li>Only place the vegetation in lush caves.</li> </ol> configured_feature/moss_patch.json<pre><code>{\n  \"type\": \"minecraft:vegetation_patch\",\n  \"config\": {\n    \"depth\": 1,\n    \"extra_bottom_block_chance\": 0.0,\n    \"extra_edge_column_chance\": 0.3,\n    \"ground_state\": {\n      \"type\": \"minecraft:simple_state_provider\",\n      \"state\": {\n        \"Name\": \"minecraft:moss_block\"\n      }\n    },\n    \"replaceable\": \"#minecraft:moss_replaceable\",\n    \"surface\": \"floor\",\n    \"vegetation_chance\": 0.8,\n    \"vegetation_feature\": {\n      \"feature\": \"minecraft:moss_vegetation\",\n      \"placement\": []\n    },\n    \"vertical_range\": 5,\n    \"xz_radius\": {\n      \"type\": \"minecraft:uniform\",\n      \"value\": {\n        \"max_inclusive\": 7,\n        \"min_inclusive\": 4\n      }\n    }\n  }\n}\n</code></pre> placed_feature/lush_caves_vegetation.json<pre><code>{\n  \"feature\": \"minecraft:moss_patch\",\n  \"placement\": [\n    {\n      \"type\": \"minecraft:count\", // (1)!\n      \"count\": 125\n    },\n    {\n      \"type\": \"minecraft:in_square\" // (2)!\n    },\n    {\n      \"type\": \"minecraft:height_range\", // (3)!\n      \"height\": {\n        \"type\": \"minecraft:uniform\",\n        \"max_inclusive\": {\n          \"absolute\": 256\n        },\n        \"min_inclusive\": {\n          \"above_bottom\": 0\n        }\n      }\n    },\n    {\n      \"type\": \"minecraft:environment_scan\", // (4)!\n      \"allowed_search_condition\": {\n        \"type\": \"minecraft:matching_blocks\",\n        \"blocks\": \"minecraft:air\"\n      },\n      \"direction_of_search\": \"down\",\n      \"max_steps\": 12,\n      \"target_condition\": {\n        \"type\": \"minecraft:solid\"\n      }\n    },\n    {\n      \"type\": \"minecraft:random_offset\", // (5)!\n      \"xz_spread\": 0,\n      \"y_spread\": 1\n    },\n    {\n      \"type\": \"minecraft:biome\" // (6)!\n    }\n  ]\n}\n</code></pre> <ol> <li>125 attempts per chunk.</li> <li>Spread the vegetation in horizontally.</li> <li>Set the y-level to a random int up to 256. The static constant is equivalent to    <pre><code>HeightRangePlacement.uniform(VerticalAnchor.bottom(), VerticalAnchor.absolute(256));\n</code></pre></li> <li>Search for the first solid block below the current position for 12 blocks.</li> <li>Add a y-offset of 1 block.</li> <li>Only place the vegetation in lush caves.</li> </ol>"},{"location":"addon/worldgen/features/configurations/vegetation-patch/#result","title":"Result","text":""},{"location":"addon/worldgen/inject/biome/","title":"Biome injections","text":"<p>Warning</p> <p>This worldgen page is still a work in progress. Some Json formats/code examples/features might be missing and will be added in the future.</p> <p><code>BiomeInjections</code> allow you to add <code>PlacedFeatures</code> to an already existing biome. In the future, this will also allow you to modify any other biome property.</p>"},{"location":"addon/worldgen/inject/biome/#example-usage","title":"Example usage","text":"<p>Here's how you could inject the <code>star_shards_ore</code> <code>PlacedFeature</code> from Machines into all overworld biomes:</p> KotlinJson BiomeInjections.kt<pre><code>@OptIn(ExperimentalWorldGen::class)\n@Init(stage = InitStage.POST_PACK_PRE_WORLD)\nobject BiomeInjections : BiomeRegistry by ExampleAddon.registry {\n\n    private val OVERWORLD = biomeInjection(\"overworld\")\n        .biomes(BiomeTags.IS_OVERWORLD)\n        .feature(Decoration.UNDERGROUND_ORES, PlacedFeatures.ORE_STAR_SHARDS)\n        .register()\n\n}\n</code></pre> data/worldgen/inject/biome/overworld.json<pre><code>{\n  \"biomes\": \"#minecraft:is_overworld\",\n  \"features\": [\n    [],\n    [],\n    [],\n    [],\n    [],\n    [],\n    [\n      \"machines:ore_star_shards\"\n    ],\n    [],\n    [],\n    [],\n    []\n  ]\n}\n</code></pre>"},{"location":"addon/worldgen/types/block-predicate/","title":"BlockPredicates","text":"<p>Warning</p> <p>This worldgen page is still a work in progress. Some Json formats/code examples/features might be missing and will be added in the future.</p> <p>TODO - Check out the Minecraft Wiki in the meantime.</p>"},{"location":"addon/worldgen/types/block-state-provider/","title":"BlockState Providers","text":"<p>Warning</p> <p>This worldgen page is still a work in progress. Some Json formats/code examples/features might be missing and will be added in the future.</p> <p>TODO - Check out the Minecraft Wiki in the meantime.</p>"},{"location":"addon/worldgen/types/block-state/","title":"BlockState","text":"<p>Warning</p> <p>This worldgen page is still a work in progress. Some Json formats/code examples/features might be missing and will be added in the future.</p> <p>TODO - Check out the Minecraft Wiki in the meantime.</p>"},{"location":"addon/worldgen/types/height-provider/","title":"Height Providers","text":"<p>Height providers are used to get a height value for a given position. Before we can get into the details however, we first need to take a look at <code>VerticalAnchors</code>.</p>"},{"location":"addon/worldgen/types/height-provider/#vertical-anchors","title":"Vertical Anchors","text":"<p>Vertical anchors are used to get a fixed height value depending on factors like the min and max build height. There is  of course also a constant implementation that always returns the same value. Please note that the type doesn't have to  be specified in Json. It's automatically inferred via the key name.</p> <p>Warning</p> <p>All specified values need to be within the the min and max build height of the world.</p>"},{"location":"addon/worldgen/types/height-provider/#absolute","title":"<code>absolute</code>","text":"<p>Always returns the same y-value.</p> KotlinJson Example<pre><code>VerticalAnchor.absolute(10)\n</code></pre> Example<pre><code>{\n  \"absolute\": 10\n}\n</code></pre>"},{"location":"addon/worldgen/types/height-provider/#above_bottom","title":"<code>above_bottom</code>","text":"<p>Returns a y-value above the min build height of the world by <code>above_bottom</code> blocks.</p> KotlinJson Example<pre><code>VerticalAnchor.aboveBottom(5)\n</code></pre> <p>Tip</p> <p>If you want to get the minimum build height, you can also use <code>VerticalAnchor.bottom()</code> or <code>VerticalAnchor.BOTTOM</code> instead of <code>VerticalAnchor.aboveBottom(0)</code>.</p> Example<pre><code>{\n  \"above_bottom\": 5\n}\n</code></pre>"},{"location":"addon/worldgen/types/height-provider/#below_top","title":"<code>below_top</code>","text":"<p>Returns a y-value below the max build height of the world by <code>below_top</code> blocks.</p> KotlinJson Example<pre><code>VerticalAnchor.belowTop(5)\n</code></pre> <p>Tip</p> <p>If you want to get the maximum build height, you can also use <code>VerticalAnchor.top()</code> or <code>VerticalAnchor.TOP</code> instead of <code>VerticalAnchor.belowTop(0)</code>.</p> Example<pre><code>{\n  \"below_top\": 5\n}\n</code></pre>"},{"location":"addon/worldgen/types/height-provider/#vanilla-height-providers","title":"Vanilla Height Providers","text":""},{"location":"addon/worldgen/types/height-provider/#minecraftconstant","title":"<code>minecraft:constant</code>","text":"<p>Always returns the y-value provided by a vertical anchor.</p> <code>value</code> <p>The vertical anchor to use.</p> KotlinJson Example<pre><code>ConstantHeight.of(VerticalAnchor.absolute(10))\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:constant\",\n  \"value\": {\n    \"absolute\": 10\n  }\n}\n</code></pre> <p>Tip</p> <p>Mojang also added a feature that allows directly specifying a vertical anchor when a height provider is expected. So this is would also be a valid height provider:</p> <pre><code>{\n  \"absolute\": 10\n}\n</code></pre> <p>Or even directly providing a constant value:</p> <pre><code>10\n</code></pre>"},{"location":"addon/worldgen/types/height-provider/#minecraftuniform","title":"<code>minecraft:uniform</code>","text":"<p>Generates a random y-value between <code>min_inclusive</code> and <code>max_inclusive</code> in a uniform distribution.</p> <code>min_inclusive</code> <p>A vertical anchor that specifies the minimum y-value.</p> <code>max_inclusive</code> <p>A vertical anchor that specifies the maximum y-value.</p> KotlinJson Example<pre><code>UniformHeight.of(VerticalAnchor.bottom(), VerticalAnchor.absolute(256))\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:uniform\",\n  \"min_inclusive\": {\n    \"above_bottom\": 0\n  },\n  \"max_inclusive\": {\n    \"absolute\": 256\n  }\n}\n</code></pre>"},{"location":"addon/worldgen/types/height-provider/#minecraftbiased_to_bottomminecraftvery_biased_to_bottom","title":"<code>minecraft:biased_to_bottom</code>/<code>minecraft:very_biased_to_bottom</code>","text":"<p>Generates a random y-value between <code>min_inclusive</code> and <code>max_inclusive</code> with bias towards the minimum.</p> <code>min_inclusive</code> <p>A vertical anchor that specifies the minimum y-value.</p> <code>max_inclusive</code> <p>A vertical anchor that specifies the maximum y-value.</p> <code>inner</code> (Optional in Json) <p>The higher this value is, the more biased the distribution is towards the minimum. Defaults to <code>0</code>.</p> KotlinJson <pre><code>VeryBiasedToBottomHeight.of(VerticalAnchor.bottom(), VerticalAnchor.belowTop(8), 8)\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:very_biased_to_bottom\",\n  \"min_inclusive\": {\n    \"above_bottom\": 0\n  },\n  \"max_inclusive\": {\n    \"below_top\": 8\n  },\n  \"inner\": 8\n}\n</code></pre>"},{"location":"addon/worldgen/types/height-provider/#minecrafttrapezoid","title":"<code>minecraft:trapezoid</code>","text":"<p>Generates a random y-value between <code>min_inclusive</code> and <code>max_inclusive</code> with a trapezoidal distribution.</p> <p>The Minecraft Wiki explains its usage in ore generation pretty well:</p> <p></p> <code>min_inclusive</code> <p>A vertical anchor that specifies the minimum y-value.</p> <code>max_inclusive</code> <p>A vertical anchor that specifies the maximum y-value.</p> <code>plateau</code> (optional) <p>The length of the range in the middle of the trapezoid that has a uniform distribution. Defaults to <code>0</code>.</p> KotlinJson Example<pre><code>TrapezoidHeight.of(VerticalAnchor.absolute(8), VerticalAnchor.absolute(24))\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:trapezoid\",\n  \"min_inclusive\": {\n    \"absolute\": 8\n  },\n  \"max_inclusive\": {\n    \"absolute\": 24\n  }\n}\n</code></pre>"},{"location":"addon/worldgen/types/height-provider/#minecraftweighted_list","title":"<code>minecraft:weighted_list</code>","text":"<p>Generates a random y-value based on a weighted list of other height providers.</p> <code>distribution</code> <p>A list of height providers and their weights (Can't be empty). <code>data</code> is the actual height provider and <code>weight</code> is the weight of the provider.</p> KotlinJson Example<pre><code>WeightedListHeight(\n    SimpleWeightedRandomList.builder&lt;HeightProvider&gt;()\n        .add(UniformHeight.of(VerticalAnchor.absolute(0), VerticalAnchor.absolute(8)), 2)\n        .add(ConstantHeight.of(VerticalAnchor.absolute(0)), 1)\n        .build()\n)\n</code></pre> Example<pre><code>{\n  \"type\": \"minecraft:weighted_list\",\n  \"distribution\": [\n    {\n      \"data\": {\n        \"type\": \"minecraft:uniform\",\n        \"value\": {\n          \"min_inclusive\": 0,\n          \"max_inclusive\": 4\n        }\n      },\n      \"weight\": 2\n    },\n    {\n      \"data\": 0,\n      \"weight\": 1\n    }\n  ]\n}                \n</code></pre>"},{"location":"addon/worldgen/types/height-provider/#inline-verticalanchors","title":"Inline <code>VerticalAnchors</code>","text":"<p>If none of the vanilla <code>VerticalAnchors</code> fit your needs, you can also inline your own <code>VerticalAnchor</code> via lambdas:</p> Example<pre><code>ConstantHeight.of { ctx -&gt; ctx.genDepth % ctx.minGenY }\n</code></pre>"},{"location":"addon/worldgen/types/number-provider/","title":"NumberProviders","text":"<p>Warning</p> <p>This worldgen page is still a work in progress. Some Json formats/code examples/features might be missing and will be added in the future.</p>"},{"location":"addon/worldgen/types/number-provider/#intprovider","title":"<code>IntProvider</code>","text":"<p>TODO - Check out the Minecraft Wiki in the meantime.</p>"},{"location":"addon/worldgen/types/number-provider/#floatprovider","title":"<code>FloatProvider</code>","text":"<p>TODO - Check out the Minecraft Wiki in the meantime.</p>"},{"location":"admin/configuration/","title":"Configuring Nova","text":"<p>All config files are located in under <code>plugins/Nova/configs/</code>. Every addon has its own subdirectory with its own config files.</p> <p>Most of the options in the configs are self-explanatory or explained using comments. The following section explains the more complex configuration options.</p>"},{"location":"admin/configuration/#items-menu","title":"Items Menu","text":"<p>You might want to customize the Nova items menu. In order to do that, just edit <code>plugins/Nova/configs/item_categories.yml</code>. You can add or remove categories and change icon, name and items.</p> <p>Warning</p> <p>After modifying <code>item_categories.json</code>, the file will not be automatically updated anymore. This will prevent items from newly added addons from appearing, so you will have to add those yourself.</p>"},{"location":"admin/configuration/#tile-entity-limits","title":"Tile-Entity limits","text":"<p>With tile-entity limits, you can create restrictions on which tile-entities players are allowed to place. Tile-Entity limits are configured in the <code>performance</code> &gt; <code>tile_entity_limits</code> section. Players with the permission <code>nova.misc.bypassTileEntityLimits</code> will be able to bypass these restrictions.</p> <p>There are 6 different limiters. You can choose one or combine multiple:</p> Name Description type Prevent placing a specific tile-entity. world Prevent placing tile entities in specific worlds. type_world Prevent placing specific tile-entities in specific worlds. amount Set a maximum amount of tile-entities of a type for each player. amount_per_world Set a maximum amount of tile-entities of a type for each player for each world. amount_per_chunk Set a maximum amount of tile-entities of a type for each player for each chunk. <p>Example configs:</p> typeworldtype_worldamountamount_per_worldamount_per_chunk <pre><code># This example config prevents players from placing the quarry.\nperformance:\n  tile_entity_limits:\n    type:\n      - machines:quarry\n</code></pre> <pre><code># This example config prevents players from placing tile-entities in the nether and end dimension.\nperformance:\n  tile_entity_limits:\n    world:\n      - world_nether\n      - world_the_end\n</code></pre> <pre><code># This example config prevents players from placing quarries in the overworld and pulverizers in the nether.\nperformance:\n  tile_entity_limits:\n    type_world:\n      world:\n        - machines:quarry\n      world_nether:\n        - machines:pulverizer\n</code></pre> <pre><code># This example config sets a maximum amount of one quarry and 50 cables of each type for every player.\nperformance:\n  tile_entity_limits:\n    amount:\n      '*': 100 # Not mandatory, but this option would limit the total amount of tile-entities to 100 per player.\n      machines:quarry: 1\n      logistics:basic_cable: 50\n      logistics:advanced_cable: 50\n      logistics:elite_cable: 50\n      logistics:ultimate_cable: 50\n</code></pre> <pre><code># This example config sets a maximum of one quarry per player per world.\nperformance:\n  tile_entity_limits:\n    amount_per_world:\n      '*': 100 # Not mandatory, but this option would limit the total amount of tile-entities to 100 per player per world.\n      machines:quarry: 1\n</code></pre> <pre><code># This example config sets a maximum of one quarry per player per world.\nperformance:\n  tile_entity_limits:\n    amount_per_chunk:\n      '*': 5 # Not mandatory, but this option would limit the total amount of tile-entities to 5 per player per chunk.\n      machines:quarry: 1\n</code></pre>"},{"location":"admin/configuration/#upgrade-values","title":"Upgrade values","text":"<p>Every addon can register its own upgrade types. As a server administrator, you can configure these values in the <code>plugin/Nova/configs/&lt;addon name&gt;/upgrade_values.yml</code> file.</p> <p>The config of the <code>simple_upgrades</code> addon looks like this: <pre><code>speed: [ 1.0, 1.91, 2.82, 3.73, 4.64, 5.55, 6.46, 7.37, 8.28, 9.19, 10.0 ]\nefficiency: [ 1.0, 1.25, 1.75, 2.75, 3.75, 4.75, 5.75, 6.75, 7.75, 8.75, 9.75 ]\nenergy: [ 1.0, 1.9, 2.8, 3.7, 4.6, 5.5, 6.4, 7.3, 8.2, 9.1, 10.0 ]\nfluid: [ 1.0, 1.9, 2.8, 3.7, 4.6, 5.5, 6.4, 7.3, 8.2, 9.1, 10.0 ]\nrange: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n</code></pre></p> <p>The amount of values in the arrays specifies the amount of upgrades that can be added, the numbers themselves are the modifiers. Depending on the type of upgrade, these values might be a multipliers or in the case of the range upgrade, are just added on top of the default max range.</p> <p>The upgrade values can also be changed for specific tile-entities by adding a <code>upgrade_values</code> section to the config of that tile-entity. For example, the default limit of range upgrades for the Pump from the Machines addon is changed to 30 this way: <pre><code>upgrade_values:\n  range: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ]\n</code></pre></p>"},{"location":"admin/configuration/#attribute-modifiers","title":"Attribute Modifiers","text":"<p>Every item configuration file can have an <code>attribute_modifiers</code> section.</p> Structure of the attribute_modifiers section<pre><code>attribute_modifiers:\n  &lt;equipment_slot&gt;: # (1)!\n  - attribute: &lt;attribute&gt; # (2)!\n    operation: &lt;operation&gt; # (3)!\n    value: &lt;value&gt; # (4)!\n    hidden: &lt;hidden&gt; # (5)!\n</code></pre> <ol> <li>The equipment slot that this item needs to be in for the attribute modifier to apply.     Possible values: <code>mainhand</code>, <code>offhand</code>, <code>feet</code>, <code>legs</code>, <code>chest</code>, <code>head</code></li> <li>The attribute to modify.     Available attributes: <code>generic.maxHealth</code>, <code>generic.followRange</code>, <code>generic.knockbackResistance</code>, <code>generic.movementSpeed</code>,     <code>generic.flying_speed</code>, <code>generic.attackDamage</code>, <code>generic.attack_knockback</code>, <code>generic.attackSpeed</code>, <code>generic.armor</code>,     <code>generic.armorToughness</code>, <code>generic.luck</code></li> <li>The operation to perform.     Possible operations: <code>addition</code>, <code>multiply_base</code>, <code>multiply_total</code></li> <li>The value to modify the attribute with.</li> <li>Whether the attribute should be hidden from the item's lore.     Default: <code>false</code></li> </ol> Example configuration <pre><code># The following configuration increases the player's attack damage by 5 if the item is held in the main hand\n# and increases the movement speed by 10% for both the main hand and off hand.\n\nattribute_modifiers:\n  mainhand:\n  - attribute: generic.attack_damage\n    operation: addition\n    value: 5.0\n  offhand:\n  - attribute: generic.movement_speed\n    operation: multiply_base\n    value: 0.1\n  - attribute: generic.movement_speed\n    operation: multiply_base\n    value: 0.1\n</code></pre> <p></p>"},{"location":"admin/configuration/#resource-filters","title":"Resource Filters","text":"<p>Resource filters allow you to exclude certain files from the resource pack. They are configured in the main config under <code>resource_pack</code> &gt; <code>generation</code> &gt; <code>resource_filters</code>.</p> <pre><code>resource_pack:\n  generation:\n    resource_filters:\n    - stage: \"\" # (1)!\n      type: \"\" # (2)!\n      pattern_type: \"\" # (3)!\n      filter: \"\" # (4)!\n      directory: \"\" # (5)!\n</code></pre> <ol> <li>The stage at which the filter should be applied. Can be <code>asset_pack</code> or <code>resource_pack</code>.</li> <li>The type of the filter. Can be <code>whitelist</code> or <code>blacklist</code>.</li> <li>The pattern type of the <code>filter</code> field. Can be <code>regex</code> or <code>wildcard</code>.    You can test your regex pattern on RegExr or similar sites.</li> <li>The filter pattern to match against. The <code>pattern_type</code> field determines how the pattern is interpreted.</li> <li>(Optional) The directory to apply the filter to. Relative to the <code>assets</code> directory.</li> </ol> Examples <p>Excluding all langauge files except <code>en_us.json</code> and <code>de_de.json</code>:</p> config.yml: resource_pack &gt; generation &gt; resource_filters<pre><code>- stage: resource_pack\n  type: whitelist\n  pattern_type: regex\n  filter: minecraft\\/lang\\/(en_us|de_de).json\n  directory: minecraft/lang/\n</code></pre> <p>Excluding an entire directory:</p> config.yml: resource_pack &gt; generation &gt; resource_filters<pre><code>- stage: resource_pack\n  type: blacklist\n  pattern_type: regex\n  filter: .*\n  directory: path/to/directory/\n</code></pre> <p>Excluding all png files:</p> config.yml: resource_pack &gt; generation &gt; resource_filters<pre><code>- stage: resource_pack\n  type: blacklist\n  pattern_type: regex\n  filter: *.png\n</code></pre>"},{"location":"admin/configuration/#waila-positioning","title":"WAILA Positioning","text":"<p>If you want to change the vertical position of the WAILA overlay, you can do so by defining which boss bars should be above or below it. This is done by defining matchers in <code>waila</code> &gt; <code>positioning</code> &gt; <code>above</code> (defines the boss bars that should be below WAILA) and <code>waila</code> &gt; <code>positioning</code> &gt; <code>below</code> (defines the boss bars that should be above WAILA).</p> <p>There are five different types of matchers available:</p> Type Description <code>origin</code> Matches against the origin of the boss bar. (Either <code>minecraft</code> or a plugin name.) <code>text</code> Matches against the text of the boss bar using either a regex or wildcard. <code>overlay</code> Matches against the overlay id of a boss bar overlay from a different Nova addon. <code>uuid</code> Matches against the UUID of the boss bar. <code>index</code> Matches against the index of the boss bar (before Nova rearranges them), with the uppermost boss bar starting at index 0. OriginTextOverlayUUIDIndex <pre><code>waila:\n  positioning:\n    above:\n    - type: origin\n      origin: &lt;origin&gt; # (1)!\n</code></pre> <ol> <li>The origin to match against. Can be <code>minecraft</code> or a plugin name.</li> </ol> WildcardRegex <pre><code>waila:\n  positioning:\n    above:\n    - type: text\n      wildcard: &lt;pattern&gt; # (1)!\n</code></pre> <ol> <li>The wildcard pattern to match against.    Use <code>*</code> to match any number of characters and <code>?</code> to match a single character.</li> </ol> <pre><code>waila:\n  positioning:\n    above:\n    - type: text\n      regex: &lt;pattern&gt; # (1)!\n</code></pre> <ol> <li>The regex pattern to match against.    You can try out your regex pattern on RegExr.</li> </ol> <pre><code>waila:\n  positioning:\n    above:\n    - type: overlay\n      overlay: &lt;overlay id&gt; # (1)!\n</code></pre> <ol> <li>The overlay id of a boss bar overlay from a different Nova addon.    For example, WAILA's overlay id is <code>nova:waila</code>.</li> </ol> <pre><code>waila:\n  positioning:\n    above:\n    - type: uuid\n      uuid: &lt;uuid&gt; # (1)!\n</code></pre> <ol> <li>The UUID to match against.</li> </ol> <pre><code>waila:\n  positioning:\n    above:\n    - type: index\n      index: &lt;index&gt; # (1)!\n</code></pre> <ol> <li>The index of the boss bar. Starts at 0, from the top down.</li> </ol> Example configuration <p>This example configuration places WAILA above all vanilla boss bars, but below all boss bars registered by <code>PluginA</code> and <code>PluginB</code>.</p> <pre><code>waila:\n  positioning:\n    above:\n    - type: origin\n      origin: minecraft\n    below:\n    - type: origin\n      origin: PluginA\n    - type: origin\n      origin: PluginB\n</code></pre>"},{"location":"admin/faq/","title":"FAQ","text":""},{"location":"admin/faq/#nova","title":"Nova","text":"How do I get the resource pack? <p>Please follow the tutorial on the setup page.</p> Which Minecraft versions are supported by Nova? <p>Nova always only supports the latest version of Minecraft.</p> Will multi-version support be added to Nova? <p>No, multi-version support is not planned</p> Can I use Nova with Bedrock bridges like Geyser? <p>No, Nova is not compatible with any Bedrock bridges.</p> Where can I report bugs? <p>Please report all bugs on GitHub.</p> Where can I find the crafting recipes? <p>All items from Nova and their crafting recipes can be viewed by using <code>/nova items</code> and are also present in the vanilla crafting book (the green book in the crafting table). Additionally, recipes can also be viewed directly by using <code>/nvrecipe</code> and <code>/nvusage</code>.</p> My items don't have textures / look like shulker shells. <p>Please follow the tutorial on the setup page and make sure that you've set up the resource pack properly.</p> Is Nova compatible with Plugin X? <p>All compatible plugins and setup requirements are listed on the compatibility page.</p>"},{"location":"admin/faq/#official-addons","title":"Official Addons","text":""},{"location":"admin/faq/#logistics","title":"Logistics","text":"How does the Item Filter work? <p>Right click in the air to set the items, then put the item filter in a cable or vacuum chest.</p>"},{"location":"admin/faq/#machines","title":"Machines","text":"How do I get Star Shards? <p>You can find them in chests (like mineshafts, dungeons, desert temples...) or as star shards ore above <code>y = 120</code>.</p>"},{"location":"admin/setup/","title":"Setting up Nova","text":""},{"location":"admin/setup/#step-1-plugin-installation","title":"Step 1: Plugin Installation","text":"<ul> <li>Like any other plugin, the Nova plugin jar file downloaded from Hangar, Modrinth, GitHub or our Discord just needs to be put in the <code>plugins/</code> folder of your server.</li> <li>Start your server and wait until Nova is done loading. (Indicated by the message in the console <code>[Nova] Done loading</code>). This creates config files and directories which you will need to access in the following steps.</li> <li>Stop your server.</li> </ul> <p>Do NOT put addons in the plugins folder</p> <p>Nova addons are not plugins and won't load in the <code>plugins/</code> folder. Please follow Step 2 to install addons.</p>"},{"location":"admin/setup/#step-2-installing-addons","title":"Step 2: Installing addons","text":"<p>To install an addon:</p> <ul> <li>Stop the server</li> <li>Drag &amp; drop the addon jar file into <code>plugins/Nova/addons/</code></li> <li>Start the server again</li> </ul> <p>The new resource pack containing the addon assets will be automatically generated, but it won't be sent to players yet. Please follow Step 3 to configure resource pack hosting.</p> <p>Info</p> <p>Some addons might require other addons in order to work. If this is the case, an error in the console will notify you of the missing addons: <code>Failed to initialize &lt;Name of the Addon&gt;: Missing addon(s): &lt;Name(s) of the required addon(s) that are missing&gt;</code></p>"},{"location":"admin/setup/#step-3-configure-resource-pack-hosting","title":"Step 3: Configure resource pack hosting","text":"<p>Due to the way server resource packs work, it is required to upload them to a web server first before they can be sent to players. This can be done either automatically or manually:</p> Automatic resource pack hosting (recommended)Manual resource pack hosting <p>The auto uploader automatically uploads the  resource pack after it changes. You can configure it in the main config file <code>plugins/Nova/configs/config.yml</code> under <code>resource_pack</code> &gt; <code>auto_upload</code>.</p> <p>Available Upload Services</p> Patreon Upload ServiceSelf-hostedCustom Multipart RequestAmazon S3Oraxen <p>Patrons are given access to upload to our servers. Due to hosting costs and the potential for abuse, this service is only available to Patrons and not available publicly.</p> <p>Example config:</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  auto_upload:\n    enabled: true\n    service: xenondevs\n    key: \"\" # Your Patreon-Uploader Key\n</code></pre> <p>If you're able to open a port on your server, this option will make the most sense for you. Nova will automatically start a lightweight web server from which the resource pack can be downloaded.</p> <p>Example config:</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  auto_upload:\n    enabled: true\n    service: self_host\n    port: 12345 # The port on which the web server will be running, needs to be open to the Internet.\n</code></pre> <p><code>host</code> parameter</p> <p>You can also set the host of your server using the <code>host</code> parameter. If it is not set, the public ip address of your server gets used. If you are on a local server, you will need to set <code>host: 127.0.0.1</code></p> <p><code>append_port</code> parameter</p> <p>When setting a <code>host</code>, Nova assumes that the configured port does not need to be appened after the host in the download URL. If this is not the case, set <code>append_port: true</code>.</p> <p>For more advanced users, Nova can also perform a multipart request to a server of your choice and parse the response using a regex.</p> <p>Example: upload php script</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  auto_upload:\n    enabled: true\n    service: custom_multi_part\n    url: https://example.com/upload.php\n    filePartName: pack\n    extraParams:\n      key: \"\" # This key also needs to be set in the php script mentioned above\n</code></pre> <p>If you are using Amazon S3, you can use the S3 service to upload the resource pack. You have to expose your S3  bucket to the Internet yourself.</p> <p>Example config:</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  auto_upload:\n    enabled: true\n    service: amazon_s3\n    endpoint: s3.amazonaws.com # The endpoint of your S3 service\n    region: eu-central-1 # The region of your S3 endpoint\n    bucket: examplebucket # The name of your S3 bucket\n    key_id: \"\" # Your S3 key id\n    key_secret: \"\" # Your S3 key secret\n</code></pre> <p>If you are using Oraxen on your server, you can configure Nova to use the PolyMath instance configured in Oraxen's config.yml.</p> <p>Example config:</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  auto_upload:\n    enabled: true\n    service: oraxen\n</code></pre> <p>For manual resource pack hosting, upload the resource pack found under <code>plugins/Nova/resource_pack/ResourcePack.zip</code> to a file uploader of your choice. Then set the url to download the resource pack in the main config file <code>plugins/Nova/configs/config.yml</code> under <code>resource_pack</code> &gt; <code>url</code>:</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  url: https://example.com/resource_pack.zip\n</code></pre> <p>URL needs to be a direct download link</p> <p>Minecraft requires the server resource pack to be a direct download link, meaning it cannot have any redirects or visual elements (like buttons, text, etc.) on the page. Direct download links often include the file name and extension in the url, so for resource packs, they would end with <code>.zip</code>.</p> <p>Prefer using an auto-upload service instead</p> <p>You will need to manually re-upload the resource pack every time it is regenerated, which is when you update Nova, any of its addons or when you change config values that affect resource pack generation. This is why you should prefer using an auto-upload service instead.</p>"},{"location":"admin/setup/#optional-resource-pack-merging","title":"(optional) resource pack merging","text":"<p>This step is only required if your server is already using a custom resource pack.</p> <p>Due to technical limitations, it is only possible to have one server resource pack. To circumvent this issue, Nova can automatically merge existing resource packs with its own. Additionally, Nova also analyzes the existing resource pack and adjust its own data accordingly to prevent conflicts. Therefore, it is NOT possible to manually merge resource packs, and it is also NOT possible to use merging services from other plugins.</p> <p>There are two ways to define base packs:  </p> With ConfigWith Folder <ol> <li>Make sure to turn off the resource pack prompt in the config of the plugin providing it.</li> <li> <p>Link to the resource pack directory or zip file in the Nova config under <code>resource_pack</code> &gt; <code>generation</code> &gt; <code>base_packs</code>.</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  generation:\n    base_packs:\n      - plugins/ItemsAdder/output/generated.zip\n</code></pre> </li> <li> <p>Make sure that the listed base pack has been properly generated. (For example, ItemsAdder requires running <code>/iazip</code> to generate its resource pack.)</p> </li> <li>Reload the config using <code>/nova reload configs</code> or restart the server.</li> <li>Regenerate the resource pack using <code>/nova resourcePack create</code>.</li> </ol> <ol> <li>Make sure to turn off the resource pack prompt in the config of the plugin providing it.</li> <li>Copy the resource pack directory or zip file to <code>plugins/Nova/resource_pack/base_packs/</code>.</li> <li>Regenerate the resource pack using <code>/nova resourcePack create</code>.</li> </ol> <p>You can add as many base packs as you want.</p>"},{"location":"admin/compatibility/","title":"Server Software & third-party Plugins","text":""},{"location":"admin/compatibility/#compatible-server-software","title":"Compatible server software","text":"<p>Nova is a paper plugin and needs to be run on a paper server or paper fork. Officially supported are:</p> <ul> <li> Paper (recommended)</li> <li> Purpur</li> <li> Pufferfish</li> </ul> <p>Any other server software may or may not work properly with Nova.  </p> <p>We're planning to add support for the following server software in the future:</p> <ul> <li>Folia</li> </ul>"},{"location":"admin/compatibility/#compatibility-with-other-plugins","title":"Compatibility with other plugins","text":""},{"location":"admin/compatibility/#custom-item-plugins","title":"Custom Item Plugins","text":"<p>Checked plugins are fully supported (e.g. their items can be used in recipes, their blocks can be broken by machines, etc.) Unchecked plugins are partially supported, some features might not work.</p> <ul> <li> ItemsAdder | Known Issues</li> <li> Oraxen | Known Issues</li> <li> MMOItems</li> </ul> <p>Planned:</p> <ul> <li>Slimefun</li> <li>Space</li> </ul> <p>Warning</p> <p>Most of these plugins require resource pack merging. You might also want to check out the troubleshooting page.</p>"},{"location":"admin/compatibility/#world-protection-plugins","title":"World Protection Plugins","text":"<p>The following protection plugins are supported out of the box by Nova, but plugin developers may also add support on their end using the API.</p> <ul> <li> WorldGuard</li> <li> GriefPrevention</li> <li> PlotSquared</li> <li> Towny</li> <li> ProtectionStones</li> <li> QuickShop</li> <li> Residence</li> </ul>"},{"location":"admin/compatibility/itemsadder/","title":"ItemsAdder","text":""},{"location":"admin/compatibility/itemsadder/#adding-compatibility-with-itemsadder","title":"Adding compatibility with ItemsAdder","text":"<p>To make ItemsAdder and Nova work together, you need to follow these steps:</p> <ol> <li>Change the following values in ItemsAdder's <code>config.yml</code>:<ul> <li>Set <code>resource-pack</code> &gt; <code>hosting</code> &gt; <code>no-host</code> &gt; <code>enabled</code> to <code>true</code> (all other options under <code>hosting</code> must be <code>false</code>).</li> <li>Under <code>resource-pack</code> &gt; <code>zip</code> &gt; <code>protect-file-from-unzip</code> set both <code>protection_1</code> and <code>protection_2</code> to <code>false</code>.</li> <li>Set <code>resource-pack</code> &gt; <code>zip</code> &gt; <code>disable-overwrite-leather-armor-layers-textures</code> to <code>true</code>.</li> </ul> </li> <li>Add the ItemsAdder resource pack zip file as a base pack in Nova's main config.</li> <li>Regenerate Nova's resource pack with <code>/nova resourcePack create</code> (make sure that you've run <code>/iazip</code> before and the resource pack zip exists)</li> </ol> <p>Unsupported Features</p> <p>ItemsAdder's recolored armor \"mineral armor\" is not supported. Please use custom textures.</p>"},{"location":"admin/compatibility/itemsadder/#adding-new-assets-to-itemsadder","title":"Adding new assets to ItemsAdder","text":"<p>After adding new assets to ItemsAdder and running <code>/iazip</code>, you will now also need to run <code>/nova resourcePack create</code>.</p>"},{"location":"admin/compatibility/itemsadder/#known-issues","title":"Known Issues","text":"<ul> <li>ItemsAdder-2043: ItemsAdder blocks update Nova block states   (This is an ItemsAdder issue, please do not message us about it)</li> </ul>"},{"location":"admin/compatibility/oraxen/","title":"Oraxen","text":""},{"location":"admin/compatibility/oraxen/#adding-compatibility-with-oraxen","title":"Adding compatibility with Oraxen","text":"<p>To make Oraxen and Nova work together, you need to follow these steps:</p> <ol> <li>Change the following values in Oraxen's <code>settings.yml</code>:<ul> <li>Set <code>Pack</code> &gt; <code>upload</code> &gt; <code>enabled</code> &gt; to <code>false</code></li> <li>Under <code>Pack</code>&gt; <code>dispatch</code> set <code>send_pack</code> and <code>send_on_reload</code> to <code>false</code></li> </ul> </li> <li>Add the Oraxen resource pack zip file as a base pack in Nova's main config.</li> <li>Regenerate Nova's resource pack with <code>/nova resourcePack create</code> (make sure that you've run <code>/o reload pack</code> before and the resource pack zip exists)</li> </ol>"},{"location":"admin/compatibility/oraxen/#using-the-oraxen-upload-service","title":"Using the Oraxen Upload Service","text":"<p>You can use Oraxen's upload service to automatically upload the resource pack. Resource Pack Hosting - Available Upload Services</p>"},{"location":"admin/compatibility/oraxen/#known-issues","title":"Known Issues","text":"<ul> <li>Duplicated and wrong block sounds</li> </ul>"},{"location":"admin/compatibility/troubleshooting/","title":"Troubleshooting","text":""},{"location":"admin/compatibility/troubleshooting/#solid-blocks","title":"Solid blocks","text":"<p>If another plugin on your server adds custom blocks that aren't armor stand based (e.g. mushroom, noteblock), their logic might interfere with Nova's logic. If this is the case, you might want to disable solid blocks in Nova.</p>"},{"location":"admin/compatibility/troubleshooting/#disabling-solid-blocks","title":"Disabling solid blocks","text":"<ol> <li>Set <code>use_solid_blocks</code> to <code>false</code> in <code>plugins/Nova/configs/config.yml</code></li> <li>Reload the configs or restart your server</li> <li>Regenerate the resource pack with <code>/nova resourcePack create</code></li> <li>Restart your server</li> </ol>"},{"location":"admin/compatibility/troubleshooting/#re-enabling-solid-blocks","title":"Re-enabling solid blocks","text":"<ol> <li>Set <code>use_solid_blocks</code> to <code>true</code> in <code>plugins/Nova/configs/config.yml</code></li> <li>Reload the configs or restart your server</li> <li>Regenerate the resource pack with <code>/nova resourcePack create</code></li> <li>Run <code>/nova debug updateChunkSearchId</code></li> <li>Restart your server</li> </ol>"},{"location":"admin/compatibility/troubleshooting/#why-should-i-not-disable-solid-blocks","title":"Why should I not disable solid blocks?","text":"<p>Solid blocks have a huge performance benefit compared to armor stand blocks, as the Minecraft client renders them like normal blocks instead of entities. Solid blocks should only be disabled as a last resort.</p>"},{"location":"admin/compatibility/utp/","title":"UTP (work in progress)","text":"<p>UTP (Unified Tech Power) is a combined effort of different project maintainers to provide a common framework for plugins from the \"mod-like\" genre. With the unified library, we're planning to provide a common interface for things like energy, items and blocks. In the future, this library will provide compatibility with Slimefun, Space, and possibly even more plugins.</p> <p>Please note that the unified library is currently not yet implemented in Nova.</p>"},{"location":"admin/recipes/","title":"Customizing Recipes","text":"<p>In Nova, all recipes are customizable. You can find the recipe files under <code>plugins/Nova/recipes</code> You can change or delete existing recipes or just create completely new ones. If a recipe gets updated by us, we will only update it on your server if you haven't modified or deleted it.</p> <p>You can reload all recipes by running the command <code>/nova reload recipes</code>.</p>"},{"location":"admin/recipes/#item-formats","title":"Item Formats","text":"<p>There are multiple ways for you to specify an item in a recipe:</p>"},{"location":"admin/recipes/#custom-item-format","title":"Custom Item Format","text":"<p>This format allows you to use a custom item from Nova or any other supported plugin. For example <code>itemsadder:ruby</code> would also work here.</p> Custom Item Format<pre><code>\"machines:copper_gear\"\n</code></pre> <p>With items from Nova addons, it is also possible to use the <code>nova:</code> prefix instead of the addon's id. This will cause all items from different addons with that id to be accepted. For example, if multiple addons define a <code>copper_dust</code>, <code>machines:copper_dust</code> would only accept the copper dust from the Machines addon, but <code>nova:copper_dust</code> would allow any copper dust.</p>"},{"location":"admin/recipes/#complex-item-format","title":"Complex Item Format","text":"<p>This format lets you fully customize the required item. If you use this format, you won't be able to use custom namespaces like <code>nova:</code> As this checks the item exactly (only ignoring the item name), you might encounter some issues with enchantments and other data stored inside the item. This is the same format as in Minecraft's /give command. As it is in JSON, quotes need to be escaped.</p> Complex Item Format<pre><code>\"minecraft:potion{\\\"Potion\\\": \\\"minecraft:water\\\"}\"\n</code></pre>"},{"location":"admin/recipes/#item-recipe-fallbacks","title":"Item- &amp; Recipe Fallbacks","text":"<p>While this is more intended for developers, item- and recipe fallbacks can also be used by server administrators.</p> <p>What are item- and recipe fallbacks? Fallbacks can be used to define an item or recipe to fall back to when the item could not be found or the recipe could not be loaded. This is useful for addon developers as it allows them to use items from other addons in their crafting recipes without creating a hard dependency on that addon.</p>"},{"location":"admin/recipes/#item-fallbacks","title":"Item Fallbacks","text":"<p>Item fallbacks are defined by adding a semicolon after the item declaration, followed by a second declaration: Item Fallback<pre><code>\"nova:basic_fluid_tank; minecraft:bucket\"\n</code></pre> The recipe loader will first check if <code>nova:basic_fluid_tank</code> exists. If not, <code>minecraft:bucket</code> is used.</p>"},{"location":"admin/recipes/#recipe-fallbacks","title":"Recipe Fallbacks","text":"<p>In some cases, it makes sense to completely change the structure of a recipe if the items from another addon are missing. For that, just put multiple recipe objects into a json array:</p> Example Recipes NormalWith failSilently recipe.json<pre><code>[\n  {\n    \"result\": \"addon1:result_item\",\n    \"shape\": [\n      \"a  \",\n      \" a \",\n      \"  a\"\n    ],\n    \"ingredients\": {\n      \"a\": \"addon2:example_item\"\n    }\n  },\n  {\n    \"result\": \"addon1:result_item\",\n    \"shape\": [\n      \" a \",\n      \" a \",\n      \" a \"\n    ],\n    \"ingredients\": {\n      \"a\": \"addon1:fallback_item\"\n    }\n  }\n]\n</code></pre> <p>Info</p> <p>If required, it is also possible to use item fallbacks inside of recipe fallbacks.</p> <p>If you don't want any exceptions in the console if none of the fallbacks could be loaded, you can set the <code>failSilently</code> boolean to <code>true</code>.</p> recipe.json<pre><code>{\n  \"failSilently\": true,\n  \"recipes\": [\n    {\n      \"result\": \"addon1:result_item\",\n      \"shape\": [\n        \"a  \",\n        \" a \",\n        \"  a\"\n      ],\n      \"ingredients\": {\n        \"a\": \"addon2:example_item\"\n      }\n    },\n    {\n      \"result\": \"addon1:result_item\",\n      \"shape\": [\n        \" a \",\n        \" a \",\n        \" a \"\n      ],\n      \"ingredients\": {\n        \"a\": \"addon1:fallback_item\"\n      }\n    }\n  ]\n}\n</code></pre> <p>Info</p> <p>If required, it is also possible to use item fallbacks inside of recipe fallbacks.</p>"},{"location":"admin/recipes/machines/","title":"Recipe Types from the Machines Addon","text":""},{"location":"admin/recipes/machines/#pulverizer-recipes","title":"Pulverizer Recipes","text":"<p>This is an example recipe for pulverizing iron ore into iron dust:</p> iron_ore_to_iron_dust.json<pre><code>{\n  \"input\": [\n    \"minecraft:iron_ore\",\n    \"minecraft:deepslate_iron_ore\"\n  ],\n  \"result\": \"machines:iron_dust\",\n  \"amount\": 2,\n  \"time\": 200\n}\n</code></pre>"},{"location":"admin/recipes/machines/#mechanical-press-recipes","title":"Mechanical Press Recipes","text":"<p>Recipes for the mechanical press are grouped in the sub-folders <code>gear/</code> and <code>plate/</code> Both use the same syntax. This is an example recipe for pressing an iron plate:</p> iron_ingot_to_iron_plate.json<pre><code>{\n  \"input\": \"minecraft:iron_ingot\",\n  \"result\": \"machines:iron_plate\",\n  \"time\": 200\n}\n</code></pre> <p>Multiple Choices for Ingredients</p> <p>If you want to give players multiple item choices for a single ingredient, you can specify an array of strings instead of a single string for the input.</p>"},{"location":"admin/recipes/machines/#fluid-infuser-recipes","title":"Fluid Infuser Recipes","text":"<p>The Fluid Infuser can be used in two modes: Inserting fluids into an item or extract fluids from an item. This is an example recipe for inserting water into a bucket to create a water bucket:</p> bucket_to_water_bucket.json<pre><code>{\n  \"mode\": \"INSERT\",\n  \"fluid_type\": \"WATER\",\n  \"fluid_amount\": 1000,\n  \"input\": \"minecraft:bucket\",\n  \"result\": \"minecraft:water_bucket\",\n  \"time\": 100\n}\n</code></pre> <p>Parameters</p> ModeFluid Type <p>The mode specifies if this should be a recipe for inserting (<code>INSERT</code>) or extracting (<code>EXTRACT</code>) fluids.</p> <p>Currently, there are only <code>WATER</code> and <code>LAVA</code>. Custom fluids from other plugins are not supported.</p> <p>This is an example recipe for extract water from a water bottle to create an empty bottle:</p> potion_to_glass_bottle.json<pre><code>{\n  \"mode\": \"EXTRACT\",\n  \"fluid_type\": \"WATER\",\n  \"fluid_amount\": 300,\n  \"input\": \"minecraft:potion{\\\"Potion\\\": \\\"minecraft:water\\\"}\",\n  \"result\": \"minecraft:glass_bottle\",\n  \"time\": 30\n}\n</code></pre> <p>Custom Item Format</p> <p>As a water bottle is not its own item, a Complex Item Format is required here.</p>"},{"location":"admin/recipes/machines/#electric-brewing-stand-recipes","title":"Electric Brewing Stand Recipes","text":"<p>Using these recipes, you can configure which potion types can be created using the electric brewing stand. You're also able to configure their ingredients, as well as multipliers for duration and amplifier level and the max amount of these levels.</p> <p>This recipe would add the luck effect type to the electric brewing stand:</p> luck.json<pre><code>{\n  \"result\": \"minecraft:luck\",\n  \"default_time\": 1800,\n  \"redstone_multiplier\": 2,\n  \"glowstone_multiplier\": 0.5,\n  \"max_duration_level\": 5,\n  \"max_amplifier_level\": 5,\n  \"inputs\": [\n    \"minecraft:nether_wart\",\n    \"minecraft:grass_block\"\n  ]\n}\n</code></pre> <p>Parameters</p> default_timeredstone_multiplierglowstone_multipliermax_duration_levelmax_amplifier_level <p>The default time a potion with this effect would have. In ticks, 20 ticks = 1s. This potion would have a default time of 1:30</p> <p>The time multiplier when a duration level (one redstone) is added. This means a luck potion with level two duration would last 3:00, level three 4:30 and so on.</p> <p>In Minecraft, when glowstone is added to a potion in order to increase the amplifier level, the duration is reduced. This is represented by this multiplier. A potion with an amplifier of level two would have a duration of 0:45, level three 0:11 and so on.</p> <p>The maximum allowed duration level for a potion of this effect. By default, you cannot create an effect with both an increased duration level and an increased amplifier level, but you are able to change this in the config file for the electric brewing stand.</p> <p>The maximum allowed amplifier level for a potion of this effect. By default, you cannot create an effect with both an increased duration level and an increased amplifier level, but you are able to change this in the config file for the electric brewing stand.</p> <p>Multiple Choices for Ingredients</p> <p>In this recipe type, multiple item choices for one ingredient are not allowed.</p>"},{"location":"admin/recipes/vanilla/","title":"Vanilla Recipe Types","text":""},{"location":"admin/recipes/vanilla/#shaped-recipes","title":"Shaped Recipes","text":"<p>Shaped recipes are recipes for the Crafting Table that have to follow a specific structure. This is an example crafting recipe for the Advanced Cable:</p> advanced_cable.json<pre><code>{\n  \"result\": \"logistics:advanced_cable\",\n  \"amount\": 3,\n  \"shape\": [\n    \"ggg\",\n    \"ccc\",\n    \"ggg\"\n  ],\n  \"ingredients\": {\n    \"g\": \"minecraft:glowstone_dust\",\n    \"c\": \"logistics:basic_cable\"\n  }\n}\n</code></pre> <p>Parameters</p> shapeamount <p>The shape is the structure of the recipe. You can see that it resembles a Crafting Table. The letters you use here have to  also be present in the <code>ingredients</code> section. You can use a space if that slot should be empty.</p> <p>The amount of items that will be crafted, can be omitted for 1.</p> <p>Multiple Choices for Ingredients</p> <p>If you want to give players multiple item choices for a single ingredient, you can specify an array of strings instead of a single string for each ingredient.</p>"},{"location":"admin/recipes/vanilla/#shapeless-recipes","title":"Shapeless Recipes","text":"<p>Shapeless recipes are recipes for the Crafting Table that do not follow a specific structure. This is an example recipe for the Basic Item Filter:</p> basic_item_filter.json<pre><code>{\n  \"result\": \"logistics:basic_item_filter\",\n  \"ingredients\": {\n    \"minecraft:hopper\": 1,\n    \"minecraft:paper\": 1\n  }\n}\n</code></pre> <p>Amount of Items</p> <p>The number after the ingredient names represents the amount of items that need to be present in the crafting table.</p> <p>Like in shaped recipes, it is also possible to give multiple choices for a specific ingredient. The following recipe would allow players to either use paper or an iron plate to craft a Basic Item Filter.</p> basic_item_filter.json<pre><code>{\n  \"result\": \"logistics:basic_item_filter\",\n  \"ingredients\": [\n    {\n      \"item\": \"minecraft:hopper\",\n      \"amount\": 1\n    },\n    {\n      \"items\": [\n        \"nova:iron_plate\",\n        \"minecraft:paper\"\n      ],\n      \"amount\": 1\n    }\n  ]\n}\n</code></pre>"},{"location":"admin/recipes/vanilla/#furnace-recipes","title":"Furnace Recipes","text":"<p>This is an example recipe for smelting iron dust into iron ingots:</p> iron_dust_to_iron_ingot.json<pre><code>{\n  \"result\": \"minecraft:iron_ingot\",\n  \"input\": \"machines:iron_dust\",\n  \"experience\": 1.0,\n  \"time\": 100\n}\n</code></pre> <p>Multiple Choices for Ingredients</p> <p>If you want to give players multiple item choices for a single ingredient, you can specify an array of strings instead of a single string for the input.</p> <p>Time</p> <p>The time is in ticks. One second is 20 ticks.</p>"},{"location":"api/","title":"Getting Started","text":"<p>To use the Nova API you first have to add the xenondevs maven repository to your build configuration.</p> MavenGradle GroovyGradle Kotlin <pre><code>&lt;repository&gt;\n    &lt;id&gt;xenondevs&lt;/id&gt;\n    &lt;url&gt;https://repo.xenondevs.xyz/releases&lt;/url&gt;\n&lt;/repository&gt;\n</code></pre> <pre><code>maven {\n    url 'https://repo.xenondevs.xyz/releases'\n}\n</code></pre> <pre><code>maven(\"https://repo.xenondevs.xyz/releases\")\n</code></pre> <p>Now you can add the API dependency to your build configuration:</p> MavenGradle GroovyGradle Kotlin <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;xyz.xenondevs.nova&lt;/groupId&gt;\n    &lt;artifactId&gt;nova-api&lt;/artifactId&gt;\n    &lt;version&gt;VERSION&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>implementation \"xyz.xenondevs.nova:nova-api:VERSION\"\n</code></pre> <pre><code>implementation(\"xyz.xenondevs.nova:nova-api:VERSION\")\n</code></pre> <p>To get the Nova instance you can use the <code>Nova</code> class:</p> KotlinJava <pre><code>val nova = Nova // (1)!\n</code></pre> <ol> <li><code>Nova</code> is an interface but the companion object delegates to <code>Bukkit.getPluginManager().getPlugin(\"Nova\") as Nova</code>.</li> </ol> <pre><code>Nova nova = Nova.getNova();\n</code></pre> <p>You can use this instance to access everything else:</p> <ul> <li>Adding custom protection checks</li> <li>Getting <code>NovaItems</code></li> <li>Getting <code>NovaBlocks</code></li> <li>Working with <code>NovaBlocks</code> and <code>NovaBlockStates</code></li> <li>Working with <code>TileEntities</code></li> <li>Toggling the WAILA overlay</li> </ul>"},{"location":"api/blocks/blockmanager/","title":"BlockManager","text":"<p>The BlockManager allows you to interact with Nova's blocks. You can place/destroy/get drops/etc.</p> <p>You can get the <code>BlockManager</code> using the previously retrieved Nova instance.</p> KotlinJava <pre><code>val blockManager = Nova.blockManager\n</code></pre> <pre><code>BlockManager blockManager = nova.getBlockManager(); // (1)!\n</code></pre> <ol> <li>\"nova\" is the previously retrieved Nova instance, preferably saved in a field/variable.You can also call <code>Nova.getNova().getBlockManager()</code></li> </ol>"},{"location":"api/blocks/blockmanager/#getting-a-blockstate","title":"Getting a BlockState","text":"<p>The BlockManager also allows you to get a BlockState at a specific location.</p> KotlinJava <pre><code>val blockState = blockManager.getBlock(location) ?: return\n</code></pre> <pre><code>NovaBlockState blockState = blockManager.getBlock(location);\nif (blockState == null)\n    return;\n</code></pre> <p>You can also check if a block at a specific location is a Nova block via <code>BlockManager.hasBlock(Location)</code></p>"},{"location":"api/blocks/blockmanager/#block-type","title":"Block Type","text":"<p><code>NovaBlock</code> is a block type, similar to <code>Material</code> in Bukkit, except that it is only for blocks. To retrieve the block type of block at a specific location, you can do the following:</p> KotlinJava <pre><code>val blockState = blockManager.getBlock(location) ?: return\nval block = blockState.block\n</code></pre> <pre><code>NovaBlockState blockState = blockManager.getBlock(location);\nif (blockState == null)\n    return;\nNovaBlock block = blockState.getBlock();\n</code></pre>"},{"location":"api/blocks/blockmanager/#tile-entity","title":"Tile Entity","text":"<p>TileEntities use the <code>NovaTileEntityState</code> class via which you can get the TileEntity instance of the block.</p> KotlinJava <pre><code>val blockState = blockManager.getBlock(location) ?: return\nif (blockState is NovaTileEntityState) {\n    val tileEntity = blockState.tileEntity\n}\n</code></pre> <pre><code>NovaBlockState blockState = blockManager.getBlock(location);\nif (blockState == null)\n    return;\nif (blockState instanceof NovaTileEntityState tileEntityState) {\n    TileEntity tileEntity = tileEntityState.getTileEntity();\n}\n</code></pre>"},{"location":"api/blocks/blockmanager/#placing-a-block","title":"Placing a block","text":"<p>You can also place a nova block at a specific location by using a <code>NovaBlock</code>.</p> KotlinJava <pre><code>val block = blockRegistry.get(\"machines:pulverizer\")\nblockManager.placeBlock(\n    location, // (1)!\n    block, // (2)!\n    player, // (3)!\n    true // (4)!\n)\n</code></pre> <ol> <li>The location at which to place the block.</li> <li>The block type to place.</li> <li>The source of the block placement. This doesn't have to be a player, it can also be a tile-entity or similar.</li> <li>Whether to play a sound when the block is placed.</li> </ol> <pre><code>NovaBlock block = blockRegistry.get(\"machines:pulverizer\");\nblockManager.placeBlock(\n    location, // (1)!\n    block, // (2)!\n    player, // (3)!\n    true // (4)!\n);\n</code></pre> <ol> <li>The location at which to place the block.</li> <li>The block type to place.</li> <li>The source of the block placement. This doesn't have to be a player, it can also be a tile-entity or similar.</li> <li>Whether to play a sound when the block is placed.</li> </ol> <p>Note</p> <p>The <code>BlockManager.placeBlock</code> function has a few overrides requiring less arguments.</p>"},{"location":"api/blocks/blockmanager/#getting-the-drops-of-a-block","title":"Getting the drops of a block","text":"<p>If you want to get the drops of a block, you can use the <code>BlockManager.getDrops</code> function. Again, there are a few overrides requiring less arguments.</p> <p>Warning</p> <p>This function will return <code>null</code> if there is no nova block at the provided location.</p> KotlinJava <pre><code>val drops = blockManager.getDrops(\n    location, // (1)!\n    player, // (2)!\n    tool // (3)!\n)\n</code></pre> <ol> <li>The location of the block.</li> <li>The source, again, this doesn't have to be a player, it can also be a tile-entity or similar.</li> <li>The tool used to break the block.</li> </ol> <pre><code>List&lt;ItemStack&gt; drops = blockManager.getDrops(\n    location, // (1)!\n    player, // (2)!\n    tool // (3)!\n);\n</code></pre> <ol> <li>The location of the block.</li> <li>The source, again, this doesn't have to be a player, it can also be a tile-entity or similar.</li> <li>The tool used to break the block.</li> </ol>"},{"location":"api/blocks/blockmanager/#removing-a-block","title":"Removing a block","text":"<p>You can remove a block at a specific location by using the <code>BlockManager.removeBlock</code> function. The function will return a <code>boolean</code> whether there was a block at the provided location and whether it was removed successfully.</p> KotlinJava <pre><code>blockManager.removeBlock(\n    location, // (1)!\n    player, // (2)!\n    true, // (3)!\n    true // (4)!\n)\n</code></pre> <ol> <li>The location of the block.</li> <li>The source, again, this doesn't have to be a player, it can also be a tile-entity or similar.</li> <li>Whether to play a sound when the block is removed.</li> <li>Whether break particles should be displayed.</li> </ol> <pre><code>blockManager.removeBlock(\n    location, // (1)!\n    player, // (2)!\n    true, // (3)!\n    true // (4)!\n);\n</code></pre> <ol> <li>The location of the block.</li> <li>The source, again, this doesn't have to be a player, it can also be a tile-entity or similar.</li> <li>Whether to play a sound when the block is removed.</li> <li>Whether break particles should be displayed.</li> </ol>"},{"location":"api/blocks/blockregistry/","title":"Block Registry","text":"<p>The block registry contains all registered block types.</p> <p>You can get the <code>BlockRegistry</code> using the previously retrieved Nova instance.</p> KotlinJava <pre><code>val blockRegistry = Nova.blockRegistry\n</code></pre> <pre><code>BlockRegistry blockRegistry = Nova.getNova().getBlockRegistry();\n</code></pre> <p>After that, you can retrieve a block type by its id:</p> KotlinJava <pre><code>val block = blockRegistry.getBlock(\"machines:pulverizer\")\n</code></pre> <pre><code>NovaBlock block = blockRegistry.getBlock(\"machines:pulverizer\");\n</code></pre>"},{"location":"api/events/novaloaddataevent/","title":"NovaLoadDataEvent","text":"<p>The <code>NovaLoadDataEvent</code> is called when Nova finished initializing on server startup/reload.</p>"},{"location":"api/events/tileentitybreakblockevent/","title":"TileEntityBreakBlockEvent","text":"<p>The <code>TileEntityBreakBlockEvent</code> is called when a tile-entity breaks a block. It can be used to manipulate the drops of  the broken block.</p> <p>Warning</p> <p>This event can't be cancelled. Please see ProtectionIntegration.</p>"},{"location":"api/events/tileentitybreakblockevent/#properties","title":"Properties","text":""},{"location":"api/events/tileentitybreakblockevent/#tileentity","title":"tileEntity","text":"<p>The <code>TileEntity</code> that broke the block.</p>"},{"location":"api/events/tileentitybreakblockevent/#block","title":"block","text":"<p>The <code>Block</code> that was broken.</p>"},{"location":"api/events/tileentitybreakblockevent/#drops","title":"drops","text":"<p>A <code>MutableList</code> of <code>ItemStacks</code> that will be added to the tile-entities inventory (or dropped on the ground if the inventory is full). This list can be modified to change the drops.</p>"},{"location":"api/events/tileentitybreakblockevent/#examples","title":"Examples","text":""},{"location":"api/events/tileentitybreakblockevent/#flint-from-dirt","title":"Flint from dirt","text":"<p>Adding a 25% chance to get 1 flint when breaking a dirt block with a tile-entity.</p> KotlinJava <pre><code>@EventHandler\nfun handleBlockBreak(event: TileEntityBreakBlockEvent) {\n    if (event.block.type == Material.DIRT\n        &amp;&amp; Random.nextInt(0, 100) &lt;= 25  // 25% chance\n    ) {\n        event.drops.add(ItemStack(Material.FLINT, 1)) // Add a flint to the drops\n    }\n}\n</code></pre> <pre><code>@EventHandler\npublic void handleBlockBreak(TileEntityBreakBlockEvent event) {\n    if (event.getBlock().getType() == Material.DIRT\n        &amp;&amp; random.nextInt(100) &lt;= 25 // 25% chance\n    ) {\n        List&lt;ItemStack&gt; drops = event.getDrops();\n        drops.add(new ItemStack(Material.FLINT, 1)); // Add a flint to the drops\n        event.setDrops(drops);\n    }\n}\n</code></pre>"},{"location":"api/items/","title":"Items","text":"<p><code>NovaItem</code> represents an item type. It is similar to <code>Material</code> in Bukkit, except that it is only for items.</p>"},{"location":"api/items/#getting-a-novaitem-by-name","title":"Getting a <code>NovaItem</code> by name","text":"<p>To get a <code>NovaItem</code> you first have to get the <code>NovaItemRegistry</code> using the previously retrieved Nova instance.</p> KotlinJava <pre><code>val itemRegistry = Nova.itemRegistry\n</code></pre> <pre><code>NovaItemRegistry itemRegistry = nova.getItemRegistry(); // (1)!\n</code></pre> <ol> <li>\"nova\" is the previously retrieved Nova instance, preferably saved in a field/variable.You can also call <code>Nova.getNova().getItemRegistry()</code></li> </ol> <p>Using this registry, you can now get a <code>NovaItem</code> by id. It needs to be in the format <code>namespace:name</code>.</p> KotlinJava <pre><code>val item = itemRegistry.get(\"nova:wrench\") // (1)!\n</code></pre> <ol> <li>This will throw an exception if the item is not found. However, wrench always exists.If you're unsure or processing user input use <code>getOrNull</code> instead.</li> </ol> <pre><code>NovaItem item = itemRegistry.get(\"nova:wrench\"); // (1)!\n</code></pre> <ol> <li>This will throw an exception if the item is not found. However, wrench always exists.If you're unsure or processing user input use <code>getOrNull</code> instead.</li> </ol> <p>Info</p> <p>The same methods also exist for getting a <code>NovaItem</code> from an <code>ItemStack</code>.</p> <p>If you want to retrieve all items with a certain name and ignore the namespace, you can do this:</p> KotlinJava <pre><code>val items = itemRegistry.getNonNamespaced(\"wrench\")\n</code></pre> <pre><code>List&lt;NovaItem&gt; items = itemRegistry.getNonNamespaced(\"wrench\");\n</code></pre>"},{"location":"api/items/#getting-the-id-of-an-item","title":"Getting the id of an item","text":"<p>Example for <code>nova:wrench</code>:</p> KotlinJava <pre><code>val id = item.id\n\nval namespace = id.namespace // \"nova\"\nval name = id.name // \"wrench\"\nval idString = id.toString() // \"nova:wrench\"\n</code></pre> <pre><code>NamespacedId id = item.getId();\n\nString namespace = id.getNamespace(); // \"nova\"\nString name = id.getName(); // \"wrench\"\nString idString = id.toString(); // \"nova:wrench\"\n</code></pre>"},{"location":"api/items/#getting-the-translated-name-of-an-item","title":"Getting the translated name of an item","text":"<p>Nova uses the resource pack to translate items client side. However, if you still need to get the translated name of an item, you can use <code>NovaItem.getLocalizedName(locale)</code>. The locale is the language code of the language you want to get the name in. The code is the same as the language code used by Minecraft.</p> <p>Info</p> <p>If the given language code could not be found or is invalid, the english name of the item will be returned.</p> <p>Example for <code>nova:wrench</code>:</p> KotlinJava <pre><code>val name = item.getLocalizedName(\"de_de\") // \"Schraubenschl\u00fcssel\"\n</code></pre> <pre><code>String name = item.getLocalizedName(\"de_de\"); // \"Schraubenschl\u00fcssel\"\n</code></pre>"},{"location":"api/player/wailamanager/","title":"WailaManager","text":"<p>The WailaManager allows you to enable / disable the WAILA overlay for players.</p> KotlinJava <pre><code>// Get the current state\nval enabled = wailaManager.getState(player)\n\n// Enable the WAILA overlay\nwailaManager.setState(player, true)\n// Disable the WAILA overlay\nwailaManager.setState(player, false)\n</code></pre> <pre><code>// Get the current state\nboolean enabled = wailaManager.getState(player);\n\n// Enable the WAILA overlay\nwailaManager.setState(player, true);\n// Disable the WAILA overlay\nwailaManager.setState(player, false);\n</code></pre>"},{"location":"api/protection/protectionintegration/","title":"ProtectionIntegration","text":"<p>If you want to add a custom protection integration for your own plugin, you can do so by implementing the  <code>ProtectionIntegration</code> interface. This interface provides a handful of methods that will be called by the  <code>ProtectionManager</code>.</p> <p>For an example of how to implement this interface, you can check out some of our  built-in protection integrations.</p> <p>Once you have implemented the interface, you can register it with <code>Nova.registerProtectionIntegration(ProtectionIntegration)</code>.</p>"},{"location":"api/tileentity/tileentity/","title":"TileEntity","text":"<p>A TileEntity is a block that has internal logic and tick-based updates.</p>"},{"location":"api/tileentity/tileentity/#getting-the-owner-of-a-tileentity","title":"Getting the owner of a TileEntity","text":"KotlinJava <pre><code>val tileEntity = tileEntityManager.getTileEntityAt(location) ?: return\nval owner = tileEntity.owner\n</code></pre> <pre><code>TileEntity tileEntity = tileEntityManager.getTileEntityAt(location);\nif (tileEntity == null)\n    return;\nOfflinePlayer owner = tileEntity.getOwner();\n</code></pre>"},{"location":"api/tileentity/tileentity/#getting-the-localized-name-of-a-tileentity","title":"Getting the localized name of a TileEntity","text":"<p>Using the <code>NovaBlock</code> of a TileEntity, you can get the name of a TileEntity.</p> <p>For this example, we'll get the english name of a Pulverizer.</p> KotlinJava <pre><code>val tileEntity = tileEntityManager.getTileEntityAt(location) ?: return\nval name = tileEntity.block.getLocalizedName(\"en_us\")\nprintln(name) // prints \"Pulverizer\"\n</code></pre> <pre><code>TileEntity tileEntity = tileEntityManager.getTileEntityAt(location);\nif(tileEntity == null)\n    return;\nString name = tileEntity.getMaterial().getLocalizedName(\"en_us\");\nSystem.out.println(name); // prints \"Pulverizer\"\n</code></pre>"},{"location":"api/tileentity/tileentity/#getting-the-drops-of-a-tileentity","title":"Getting the drops of a TileEntity","text":"<p>These drops include all items in the TileEntity's inventory and the TileEntity itself if <code>includeSelf</code> is set to <code>true</code>.</p> KotlinJava <pre><code>val tileEntity = tileEntityManager.getTileEntityAt(location) ?: return\nval drops = tileEntity.getDrops(includeSelf = true)\n</code></pre> <pre><code>TileEntity tileEntity = tileEntityManager.getTileEntityAt(location);\nif (tileEntity == null)\n    return;\nList&lt;ItemStack&gt; drops = tileEntity.getDrops(true);\n</code></pre> <p>For more information about the TileEntityManager, see the TileEntityManager page.</p>"},{"location":"api/tileentity/tileentitymanager/","title":"TileEntityManager","text":"<p>You can get the <code>TileEntityManager</code> using the previously retrieved Nova instance.</p> KotlinJava <pre><code>val tileEntityManager = Nova.tileEntityManager\n</code></pre> <pre><code>TileEntityManager tileEntityManager = nova.getTileEntityManager(); // (1)!\n</code></pre> <ol> <li>\"nova\" is the previously retrieved Nova instance, preferably saved in a field/variable.You can also call <code>Nova.getNova().getTileEntityManager()</code></li> </ol>"},{"location":"api/tileentity/tileentitymanager/#getting-a-tileentity-at-a-specific-location","title":"Getting a TileEntity at a specific location","text":"<p>Getting a TileEntity at a specific location is done by calling the <code>getTileEntityAt</code> function of the <code>TileEntityManager</code>. The function either returns a TileEntity or <code>null</code> if there is no TileEntity at the specified location.</p> KotlinJava <pre><code>val tileEntity: TileEntity? = tileEntityManager.getTileEntityAt(location)\n</code></pre> <pre><code>TileEntity tileEntity = tileEntityManager.getTileEntityAt(location);\n</code></pre>"},{"location":"zh/","title":"Index","text":""},{"location":"zh/addon/","title":"\u5165\u95e8","text":"<p>\u200b\u6b64\u200b\u6559\u7a0b\u200b\u5bf9\u200b\u65b0\u624b\u200b\u5e76\u200b\u4e0d\u200b\u53cb\u597d\u200b! \u200b\u5236\u4f5c\u200b Nova \u200b\u6269\u5c55\u200b\u9700\u8981\u200b\u5f88\u591a\u200b Kotlin\u3001Spigot API\u3001Maven \u200b\u4ee5\u53ca\u200b Gradle \u200b\u76f8\u5173\u200b\u7684\u200b\u77e5\u8bc6\u200b.</p>"},{"location":"zh/addon/#_1","title":"\u51c6\u5907\u200b\u5de5\u4f5c","text":""},{"location":"zh/addon/#intellij","title":"IntelliJ","text":"<p>\u200b\u867d\u7136\u200b Eclipse \u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5b89\u88c5\u200b\u63d2\u4ef6\u200b\u6765\u200b\u652f\u6301\u200b Kotlin, \u200b\u4f46\u662f\u200b\u6211\u4eec\u200b\u8fd8\u662f\u200b\u5efa\u8bae\u200b\u4f7f\u7528\u200b IntelliJ \u200b\u6765\u200b\u5236\u4f5c\u200b\u6269\u5c55\u200b.</p>"},{"location":"zh/addon/#github","title":"GitHub","text":"<p>\u200b\u6b64\u200b\u6559\u7a0b\u200b\u4f7f\u7528\u200b\u4e86\u200b\u4e00\u4e2a\u200b GitHub \u200b\u4ed3\u5e93\u200b\u6a21\u677f\u200b\uff0c\u200b\u56e0\u6b64\u200b\u5efa\u8bae\u200b\u4f60\u200b\u6709\u200b\u4e00\u4e2a\u200b GitHub \u200b\u8d26\u53f7\u200b\u3002\u200b\u5982\u679c\u200b\u4f60\u200b\u4e0d\u60f3\u200b\u4f7f\u7528\u200b git \u200b\u6307\u4ee4\u200b\u7684\u8bdd\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u5b89\u88c5\u200b GitHub \u200b\u684c\u9762\u7248\u200b.</p>"},{"location":"zh/addon/#_2","title":"\u4ee3\u7801\u200b\u6837\u5f0f","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8fd9\u91cc\u200b\u627e\u5230\u200b xenondevs \u200b\u7684\u200b\u4ee3\u7801\u200b\u6837\u5f0f\u200b\u6587\u4ef6\u200b. \u200b\u6253\u5f00\u200b Intellij \u200b\u8bbe\u7f6e\u200b\u5e76\u200b\u53c2\u8003\u200b\u4e0b\u56fe\u200b\u5bfc\u5165\u200b\u4ee3\u7801\u200b\u6837\u5f0f\u200b\u6587\u4ef6\u200b:</p> <p></p>"},{"location":"zh/addon/#_3","title":"\u521b\u5efa\u200b\u9879\u76ee","text":"<p>\u200b\u4f7f\u7528\u200b\u8fd9\u91cc\u200b\u6269\u5c55\u200b\u6a21\u677f\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u65b0\u200b\u4ed3\u5e93\u200b. \u200b\u521b\u5efa\u200b\u5b8c\u6210\u200b\u540e\u200b, \u200b\u4fee\u6539\u200b\u4ee5\u4e0b\u200b\u6587\u4ef6\u200b:</p>"},{"location":"zh/addon/#srcmainkotlin","title":"src/main/kotlin","text":"<p>\u200b\u8bbe\u7f6e\u200b\u4f60\u200b\u81ea\u5df1\u200b\u7684\u200b\u5305\u540d\u200b.</p>"},{"location":"zh/addon/#settingsgradlekts","title":"settings.gradle.kts","text":"<p>\u200b\u4fee\u6539\u200b <code>rootProject.name</code> \u200b\u4e3a\u200b\u4f60\u200b\u7684\u200b\u6269\u5c55\u200b ID.</p>"},{"location":"zh/addon/#buildgradlekts","title":"build.gradle.kts","text":"<p>\u200b\u4fee\u6539\u200b <code>group</code> \u200b\u4e3a\u200b\u4f60\u200b\u7684\u200b\u56e2\u961f\u200b\u540d\u79f0\u200b. \u200b\u4fee\u6539\u200b <code>version</code> \u200b\u4e3a\u200b\u4f60\u200b\u7684\u200b\u7248\u672c\u53f7\u200b.</p> <p>\u200b\u5728\u200b <code>addon</code> \u200b\u4e2d\u200b, \u200b\u8bbe\u7f6e\u200b <code>main</code> \u200b\u4e2d\u200b\u7684\u200b\u4e3b\u7c7b\u200b\u540d\u79f0\u200b.</p>"},{"location":"zh/addon/#_4","title":"\u6dfb\u52a0\u200b\u4f9d\u8d56","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200b\u6269\u5c55\u200b\u9700\u8981\u200b\u5176\u5b83\u200b\u4f9d\u8d56\u200b\u9879\u200b\uff0c\u200b\u8bf7\u200b\u4f7f\u7528\u200b <code>nova</code> \u200b\u8bed\u53e5\u200b\u914d\u7f6e\u200b:</p> build.gradle.kts dependencies { }<pre><code>nova(\"commons-net:commons-net:3.8.0\")\n</code></pre>"},{"location":"zh/addon/#_5","title":"\u7f16\u8bd1","text":"<p>\u200b\u8fd0\u884c\u200b\u4ee5\u4e0b\u200b\u4ee3\u7801\u200b\u6765\u200b\u7f16\u8bd1\u200b\uff1a \u200b\u4f7f\u7528\u200b Gradle \u200b\u7f16\u8bd1\u200b<pre><code>gradlew addonJar -PoutDir=\"&lt;\u200b\u6269\u5c55\u200b\u76ee\u5f55\u200b\u8def\u5f84\u200b&gt;\"\n</code></pre> \u200b\u5982\u679c\u200b\u4f60\u200b\u7528\u200b\u7684\u200b\u662f\u200b mojang-mapped \u200b\u670d\u52a1\u7aef\u200b, \u200b\u4f7f\u7528\u200b\u4ee5\u4e0b\u200b\u6307\u4ee4\u200b\uff1a \u200b\u4f7f\u7528\u200b Gradle \u200b\u7f16\u8bd1\u200b<pre><code>gradlew addonJar -PoutDir=\"&lt;\u200b\u6269\u5c55\u200b\u76ee\u5f55\u200b\u8def\u5f84\u200b&gt;\" -Pmojang-mapped\n</code></pre></p>"},{"location":"zh/addon/#_6","title":"\u542f\u7528\u200b\u5f00\u53d1\u200b\u6a21\u5f0f","text":"<p>\u200b\u6dfb\u52a0\u200b <code>-DNovaDev</code> \u200b\u547d\u4ee4\u200b\u5373\u53ef\u200b\u542f\u7528\u200b\u5f00\u53d1\u200b\u6a21\u5f0f\u200b. \u200b\u6b64\u200b\u6a21\u5f0f\u200b\u4f1a\u200b\u5173\u95ed\u200b\u4e00\u4e9b\u200b\u9650\u5236\u200b, \u200b\u6bd4\u5982\u200b\u963b\u6b62\u200b\u91cd\u8f7d\u200b\u3001\u200b\u670d\u52a1\u5668\u200b\u542f\u52a8\u200b\u65f6\u200b\u7684\u200b\u52a0\u5165\u200b\u4e8b\u4ef6\u200b\u3001\u200b\u6216\u662f\u200b\u4f7f\u7528\u200b\u7248\u672c\u200b\u4e0d\u200b\u5339\u914d\u200b\u7684\u200b\u6269\u5c55\u200b.</p>"},{"location":"zh/addon/#kdoc","title":"KDoc","text":"<p>Nova \u200b\u7684\u200b KDoc \u200b\u53ef\u200b\u5728\u200b\u8fd9\u91cc\u200b\u67e5\u770b\u200b.</p>"},{"location":"zh/addon/blocks/tileentity/upgrades/","title":"\u5347\u7ea7","text":""},{"location":"zh/addon/fonts/actionbar/","title":"\u52a8\u4f5c\u200b\u680f\u200b\u8d34\u56fe","text":"<p>Overlays follow the same concept of using fonts to render images as GUI Textures, but are a bit more difficult to implement for addon developers, as you need to create the font file yourself.</p> <p>Font files are stored under <code>assets/fonts/</code> and have this format. You might also want to take a look at our font for the jetpack energy bar overlay.</p>"},{"location":"zh/addon/fonts/bossbar/","title":"Boss \u200b\u680f\u200b\u8d34\u56fe","text":"<p>Boss bar overlays are generally similar to action bar overlays, with the difference that they're rendered at boss bar position, can be moved vertically, and have a built-in way to dynamically position themselves above/below other overlays.</p>"},{"location":"zh/addon/items/registering-items/","title":"\u6ce8\u518c\u200b\u7269\u54c1","text":""},{"location":"zh/addon/items/using-nova-item/","title":"\u4f7f\u7528\u200b NovaItem","text":""},{"location":"zh/admin/configuration/","title":"\u914d\u7f6e\u200b Nova","text":"<p>\u200b\u6240\u6709\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u90fd\u200b\u4f4d\u4e8e\u200b <code>plugins/Nova/configs/</code>. \u200b\u6bcf\u200b\u4e00\u4e2a\u200b\u6269\u5c55\u200b\u90fd\u200b\u4f1a\u200b\u521b\u5efa\u200b\u4e00\u4e2a\u200b\u5b50\u76ee\u5f55\u200b\u6765\u200b\u5b58\u653e\u200b\u914d\u7f6e\u6587\u4ef6\u200b.</p> <p>\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u5927\u591a\u6570\u200b\u9009\u9879\u200b\u90fd\u200b\u662f\u200b\u5b57\u9762\u200b\u610f\u601d\u200b, \u200b\u6216\u8005\u200b\u6709\u200b\u8be6\u7ec6\u200b\u7684\u200b\u6ce8\u91ca\u200b\u8bf4\u660e\u200b\u3002 \u200b\u672c\u200b\u9875\u9762\u200b\u4ec5\u200b\u5bf9\u200b\u66f4\u4e3a\u200b\u590d\u6742\u200b\u7684\u200b\u9009\u9879\u200b\u8fdb\u884c\u200b\u8bf4\u660e\u200b\u3002</p>"},{"location":"zh/admin/configuration/#_1","title":"\u7269\u54c1\u200b\u83dc\u5355","text":"<p>\u200b\u4f60\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u9700\u8981\u200b\u81ea\u5b9a\u4e49\u200b Nova \u200b\u7684\u200b\u7269\u54c1\u200b\u83dc\u5355\u200b. \u200b\u4f60\u200b\u53ea\u200b\u9700\u200b\u7f16\u8f91\u200b <code>plugins/Nova/configs/item_categories.yml</code> \u200b\u5373\u53ef\u200b. \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u8be5\u200b\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u6216\u200b\u5220\u9664\u200b\u5206\u7c7b\u200b\u3001\u200b\u66f4\u6362\u200b\u56fe\u6807\u200b\u3001\u200b\u4fee\u6539\u200b\u540d\u79f0\u200b\u6216\u662f\u200b\u7269\u54c1\u200b\u6750\u6599\u200b.</p> <p>\u200b\u8b66\u544a\u200b</p> <p>\u200b\u4e00\u65e6\u200b\u4f60\u200b\u5bf9\u200b <code>item_categories.json</code> \u200b\u505a\u51fa\u200b\u4e86\u200b\u4fee\u6539\u200b, \u200b\u8be5\u200b\u6587\u4ef6\u200b\u5c06\u200b\u4e0d\u4f1a\u200b\u518d\u200b\u81ea\u52a8\u66f4\u65b0\u200b. \u200b\u8fd9\u200b\u5c06\u200b\u5bfc\u81f4\u200b\u65b0\u200b\u589e\u52a0\u200b\u7684\u200b\u7269\u54c1\u200b\u6216\u200b\u66f4\u65b0\u200b\u7684\u200b\u7269\u54c1\u200b\u9700\u8981\u200b\u624b\u52a8\u200b\u6dfb\u52a0\u200b\u81f3\u8be5\u200b\u6587\u4ef6\u200b, \u200b\u5728\u200b\u5220\u9664\u200b\u4e00\u4e2a\u200b\u6269\u5c55\u200b\u4e14\u200b\u672a\u200b\u624b\u52a8\u200b\u79fb\u9664\u200b\u83dc\u5355\u200b\u9879\u76ee\u200b\u65f6\u200b\u5c06\u200b\u5bfc\u81f4\u200b Nova \u200b\u65e0\u6cd5\u200b\u6b63\u5e38\u200b\u8fd0\u884c\u200b\u3002</p>"},{"location":"zh/admin/configuration/#_2","title":"\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u9650\u5236","text":"<p>\u200b\u4f7f\u7528\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u9650\u5236\u200b\u9009\u9879\u200b, \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u9650\u5236\u200b\u73a9\u5bb6\u200b\u653e\u7f6e\u200b\u7684\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u79cd\u7c7b\u200b. \u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u9650\u5236\u200b\u9009\u9879\u200b\u4f4d\u4e8e\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b <code>performance</code> &gt; <code>tile_entity_limits</code>. \u200b\u62e5\u6709\u200b <code>nova.misc.bypassTileEntityLimits</code> \u200b\u6743\u9650\u200b\u7684\u200b\u73a9\u5bb6\u200b\u5c06\u4f1a\u200b\u65e0\u89c6\u200b\u8fd9\u4e9b\u200b\u9650\u5236\u200b.</p> <p>\u200b\u63d2\u4ef6\u200b\u63d0\u4f9b\u200b\u4e86\u200b 5 \u200b\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u9650\u5236\u200b\u6761\u4ef6\u200b. \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u9009\u62e9\u200b\u4e00\u4e2a\u200b\u6216\u200b\u591a\u4e2a\u200b:</p> \u200b\u6761\u4ef6\u200b\u540d\u200b \u200b\u529f\u80fd\u200b type \u200b\u963b\u6b62\u200b\u73a9\u5bb6\u200b\u653e\u7f6e\u200b\u67d0\u79cd\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b. world \u200b\u963b\u6b62\u200b\u73a9\u5bb6\u200b\u5728\u200b\u6307\u5b9a\u200b\u4e16\u754c\u200b\u653e\u7f6e\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b. type_world \u200b\u963b\u6b62\u200b\u73a9\u5bb6\u200b\u5728\u200b\u6307\u5b9a\u200b\u4e16\u754c\u200b\u653e\u7f6e\u200b\u6307\u5b9a\u200b\u7c7b\u578b\u200b\u7684\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b. amount \u200b\u8bbe\u7f6e\u200b\u5355\u4e2a\u200b\u73a9\u5bb6\u200b\u53ef\u200b\u653e\u7f6e\u200b\u6307\u5b9a\u200b\u7c7b\u578b\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7684\u200b\u4e0a\u9650\u200b. amount_per_world \u200b\u8bbe\u7f6e\u200b\u5355\u4e2a\u200b\u73a9\u5bb6\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u4e16\u754c\u200b\u53ef\u200b\u653e\u7f6e\u200b\u6307\u5b9a\u200b\u7c7b\u578b\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7684\u200b\u4e0a\u9650\u200b. amount_per_chunk \u200b\u8bbe\u7f6e\u200b\u5355\u4e2a\u200b\u73a9\u5bb6\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u533a\u5757\u200b\u53ef\u200b\u653e\u7f6e\u200b\u6307\u5b9a\u200b\u7c7b\u578b\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7684\u200b\u4e0a\u9650\u200b. <p>\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b:</p> typeworldtype_worldamountamount_per_worldamount_per_chunk <pre><code># \u200b\u6b64\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b\u963b\u6b62\u200b\u73a9\u5bb6\u200b\u653e\u7f6e\u200b\u77ff\u673a\u200b.\nperformance:\n  tile_entity_limits:\n    type:\n      - machines:quarry\n</code></pre> <pre><code># \u200b\u6b64\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b\u963b\u6b62\u200b\u73a9\u5bb6\u200b\u5728\u200b\u4e0b\u754c\u200b\u548c\u200b\u672b\u200b\u5730\u200b\u653e\u7f6e\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b.\nperformance:\n  tile_entity_limits:\n    world:\n      worlds:\n        - world_nether\n        - world_the_end\n</code></pre> <pre><code># \u200b\u6b64\u200b\u5b9e\u4f8b\u200b\u914d\u7f6e\u200b\u963b\u6b62\u200b\u73a9\u5bb6\u200b\u5728\u200b\u4e3b\u200b\u4e16\u754c\u200b\u653e\u7f6e\u200b\u77ff\u673a\u200b\u548c\u200b\u5728\u200b\u4e0b\u754c\u200b\u653e\u7f6e\u200b\u7c89\u788e\u673a\u200b.\nperformance:\n  tile_entity_limits:\n    type_world:\n      world:\n        - machines:quarry\n      world_nether:\n        - machines:pulverizer\n</code></pre> <pre><code># \u200b\u6b64\u200b\u5b9e\u4f8b\u200b\u914d\u7f6e\u200b\u8bbe\u7f6e\u200b\u5355\u4e2a\u200b\u73a9\u5bb6\u200b\u6700\u200b\u591a\u200b\u53ef\u4ee5\u200b\u653e\u7f6e\u200b 1 \u200b\u4e2a\u200b\u77ff\u673a\u200b, \u200b\u6bcf\u79cd\u200b\u7c7b\u578b\u200b\u7684\u200b\u7f06\u7ebf\u200b\u5404\u200b 50 \u200b\u4e2a\u200b.\nperformance:\n  tile_entity_limits:\n    amount:\n      '*': 100 # \u200b\u53ef\u200b\u9009\u200b, \u200b\u6b64\u200b\u9009\u9879\u200b\u5c06\u200b\u9650\u5236\u200b\u6bcf\u4e2a\u200b\u73a9\u5bb6\u200b\u53ea\u80fd\u200b\u653e\u7f6e\u200b 100 \u200b\u4e2a\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b.\n      machines:quarry: 1\n      logistics:basic_cable: 50\n      logistics:advanced_cable: 50\n      logistics:elite_cable: 50\n      logistics:ultimate_cable: 50\n</code></pre> <pre><code># \u200b\u6b64\u200b\u5b9e\u4f8b\u200b\u914d\u7f6e\u200b\u8bbe\u7f6e\u200b\u5355\u4e2a\u200b\u73a9\u5bb6\u200b\u6700\u200b\u591a\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5355\u4e2a\u200b\u4e16\u754c\u200b\u653e\u7f6e\u200b 1 \u200b\u4e2a\u200b\u77ff\u673a\u200b.\nperformance:\n  tile_entity_limits:\n    amount_per_world:\n      '*': 100 # \u200b\u53ef\u200b\u9009\u200b, \u200b\u6b64\u200b\u9009\u9879\u200b\u9650\u5236\u200b\u6bcf\u4e2a\u200b\u73a9\u5bb6\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u4e16\u754c\u200b\u6700\u200b\u591a\u200b\u653e\u7f6e\u200b 100 \u200b\u4e2a\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b.\n      machines:quarry: 1\n</code></pre> <pre><code># \u200b\u6b64\u200b\u5b9e\u4f8b\u200b\u914d\u7f6e\u200b\u8bbe\u7f6e\u200b\u5355\u4e2a\u200b\u73a9\u5bb6\u200b\u6700\u200b\u591a\u200b\u53ef\u4ee5\u200b\u5728\u200b\u5355\u4e2a\u200b\u533a\u5757\u200b\u653e\u7f6e\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7684\u200b\u4e0a\u9650\u200b.\nperformance:\n  tile_entity_limits:\n    amount_per_chunk:\n      '*': 5 # \u200b\u53ef\u200b\u9009\u200b, \u200b\u6b64\u200b\u9009\u9879\u200b\u9650\u5236\u200b\u6bcf\u4e2a\u200b\u73a9\u5bb6\u200b\u5728\u200b\u6bcf\u4e2a\u200b\u533a\u5757\u200b\u6700\u200b\u591a\u200b\u653e\u7f6e\u200b 5 \u200b\u4e2a\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b.\n      machines:quarry: 1\n</code></pre>"},{"location":"zh/admin/configuration/#_3","title":"\u5347\u7ea7\u200b\u503c","text":"<p>\u200b\u6bcf\u4e2a\u200b\u6269\u5c55\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u58f0\u660e\u200b\u5176\u200b\u5e26\u6709\u200b\u7684\u200b\u5347\u7ea7\u200b\u6a21\u5f0f\u200b. \u200b\u670d\u52a1\u5668\u200b\u7ba1\u7406\u5458\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>plugin/Nova/configs/&lt;addon name&gt;/upgrade_values.yml</code> \u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u8fd9\u4e9b\u200b\u503c\u200b.</p> <p><code>simple_upgrades</code> \u200b\u6269\u5c55\u200b\u7684\u200b\u9884\u8bbe\u200b\u5347\u7ea7\u200b\u914d\u7f6e\u200b\u5982\u4e0b\u200b: <pre><code>speed: [ 1.0, 1.91, 2.82, 3.73, 4.64, 5.55, 6.46, 7.37, 8.28, 9.19, 10.0 ]\nefficiency: [ 1.0, 1.25, 1.75, 2.75, 3.75, 4.75, 5.75, 6.75, 7.75, 8.75, 9.75 ]\nenergy: [ 1.0, 1.9, 2.8, 3.7, 4.6, 5.5, 6.4, 7.3, 8.2, 9.1, 10.0 ]\nfluid: [ 1.0, 1.9, 2.8, 3.7, 4.6, 5.5, 6.4, 7.3, 8.2, 9.1, 10.0 ]\nrange: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ]\n</code></pre></p> <p>\u200b\u6570\u7ec4\u200b\u4e2d\u200b\u7684\u200b\u6570\u5b57\u200b\u5b9a\u4e49\u200b\u4e86\u200b\u53ef\u200b\u88ab\u200b\u6dfb\u52a0\u200b\u7684\u200b\u5347\u7ea7\u200b\u503c\u200b, \u200b\u8fd9\u4e9b\u200b\u6570\u5b57\u200b\u662f\u200b\u914d\u7f6e\u200b\u503c\u200b. \u200b\u6839\u636e\u200b\u5347\u7ea7\u200b\u7684\u200b\u7c7b\u578b\u200b, \u200b\u8fd9\u4e9b\u200b\u503c\u200b\u5c06\u200b\u662f\u200b\u500d\u7387\u200b, \u200b\u6216\u662f\u200b\u5728\u200b range \u200b\u5347\u7ea7\u200b\u7684\u200b\u60c5\u51b5\u200b\u4e0b\u200b\u4e0e\u200b\u9ed8\u8ba4\u200b\u533a\u95f4\u200b\u6700\u5927\u503c\u200b\u53e0\u52a0\u200b.</p> <p>\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7684\u200b\u5347\u7ea7\u200b\u503c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b\u8be5\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u6dfb\u52a0\u200b <code>upgrade_values</code> \u200b\u9009\u9879\u200b\u6765\u200b\u4fee\u6539\u200b. \u200b\u4f8b\u5982\u200b, \u200b\u4ee5\u4e0b\u200b\u914d\u7f6e\u200b\u4fee\u6539\u200b\u673a\u68b0\u200b\u6269\u5c55\u200b\u4e2d\u6cf5\u200b\u7684\u200b\u9ed8\u8ba4\u200b range \u200b\u5347\u7ea7\u200b\u9650\u5236\u200b\u4e3a\u200b 30: <pre><code>upgrade_values:\n  range: [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30 ]\n</code></pre></p>"},{"location":"zh/admin/configuration/#_4","title":"\u5c5e\u6027\u200b\u914d\u7f6e","text":"<p>\u200b\u6bcf\u4e2a\u200b\u7269\u54c1\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u90fd\u200b\u53ef\u4ee5\u200b\u6709\u200b <code>attribute_modifiers</code> \u200b\u90e8\u5206\u200b.</p> attribute_modifiers \u200b\u90e8\u5206\u200b\u7684\u200b\u7ed3\u6784\u200b<pre><code>attribute_modifiers:\n  &lt;equipment_slot&gt;: # (1)!\n  - attribute: &lt;attribute&gt; # (2)!\n    operation: &lt;operation&gt; # (3)!\n    value: &lt;value&gt; # (4)!\n    hidden: &lt;hidden&gt; # (5)!\n</code></pre> <ol> <li>\u200b\u7269\u54c1\u200b\u9700\u8981\u200b\u5728\u200b\u80cc\u5305\u200b\u7684\u200b\u54ea\u4e2a\u200b\u4f4d\u7f6e\u200b\u624d\u80fd\u200b\u4f7f\u200b\u8fd9\u4e9b\u200b\u5c5e\u6027\u200b\u751f\u6548\u200b.     \u200b\u53ef\u7528\u200b\u503c\u200b: <code>mainhand</code>(\u200b\u4e3b\u624b\u200b), <code>offhand</code>(\u200b\u526f\u624b\u200b), <code>feet</code>(\u200b\u811a\u200b), <code>legs</code>(\u200b\u817f\u200b), <code>chest</code>(\u200b\u4e0a\u8eab\u200b), <code>head</code>(\u200b\u5934\u200b)</li> <li>\u200b\u8981\u200b\u4fee\u6539\u200b\u7684\u200b\u5c5e\u6027\u200b.     \u200b\u53ef\u7528\u200b\u5c5e\u6027\u200b: <code>generic.maxHealth</code>(\u200b\u6700\u5927\u200b\u751f\u547d\u200b\u503c\u200b), <code>generic.followRange</code>(\u200b\u8ddf\u968f\u200b\u8ddd\u79bb\u200b), <code>generic.knockbackResistance</code>(\u200b\u51fb\u9000\u200b\u6297\u6027\u200b), <code>generic.movementSpeed</code>(\u200b\u57fa\u7840\u200b\u79fb\u52a8\u200b\u52a0\u901f\u5ea6\u200b), <code>generic.flying_speed</code>(\u200b\u98de\u884c\u200b\u65f6\u200b\u7684\u200b\u79fb\u52a8\u200b\u52a0\u901f\u5ea6\u200b), <code>generic.attackDamage</code>(\u200b\u8fd1\u6218\u200b\u653b\u51fb\u200b\u4f24\u5bb3\u200b), <code>generic.attack_knockback</code>(\u200b\u51fb\u9000\u200b\u6548\u679c\u200b), <code>generic.attackSpeed</code>(\u200b\u6bcf\u79d2\u200b\u53ef\u4ee5\u200b\u8fdb\u884c\u200b\u5168\u529b\u200b\u653b\u51fb\u200b\u7684\u200b\u6b21\u6570\u200b), <code>generic.armor</code>(\u200b\u76d4\u7532\u200b\u503c\u200b), <code>generic.armorToughness</code>(\u200b\u76d4\u7532\u200b\u97e7\u6027\u200b), <code>generic.luck</code>(\u200b\u5e78\u8fd0\u503c\u200b)     \u200b\u5404\u200b\u5c5e\u6027\u200b\u7684\u200b\u4f5c\u7528\u200b\u89c1\u200b\u5c5e\u6027\u200b - Minecraft Wiki</li> <li>\u200b\u4fee\u6539\u200b\u6a21\u5f0f\u200b.     \u200b\u53ef\u7528\u200b\u503c\u200b: <code>addition</code>(\u200b\u52a0\u6cd5\u200b), <code>multiply_base</code>(\u200b\u6bd4\u4f8b\u200b\u589e\u52a0\u200b), <code>multiply_total</code>(\u200b\u4e58\u6cd5\u200b)</li> <li>\u200b\u4fee\u6539\u200b\u503c\u200b.</li> <li>\u200b\u662f\u5426\u200b\u5728\u200b\u7269\u54c1\u200b lore \u200b\u4e2d\u200b\u9690\u85cf\u200b\u5c5e\u6027\u200b.     \u200b\u9ed8\u8ba4\u503c\u200b: <code>false</code></li> </ol> \u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b <pre><code># \u200b\u5982\u679c\u200b\u7269\u54c1\u200b\u88ab\u200b\u62ff\u200b\u5728\u200b\u4e3b\u624b\u200b\uff0c\u200b\u73a9\u5bb6\u200b\u7684\u200b\u8fd1\u6218\u200b\u653b\u51fb\u200b\u4f24\u5bb3\u200b\u589e\u52a0\u200b 5\n# \u200b\u5982\u679c\u200b\u7269\u54c1\u200b\u88ab\u200b\u62ff\u200b\u5728\u200b\u4e3b\u624b\u200b\u6216\u8005\u200b\u526f\u624b\u200b\uff0c\u200b\u589e\u52a0\u200b 10% \u200b\u7684\u200b\u901f\u5ea6\u200b.\n\nattribute_modifiers:\n  mainhand:\n  - attribute: generic.attack_damage\n    operation: addition\n    value: 5.0\n  offhand:\n  - attribute: generic.movement_speed\n    operation: multiply_base\n    value: 0.1\n  - attribute: generic.movement_speed\n    operation: multiply_base\n    value: 0.1\n</code></pre> <p></p>"},{"location":"zh/admin/configuration/#_5","title":"\u8d44\u6e90\u200b\u5305\u200b\u7b5b\u9009\u200b\u5668","text":"<p>\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u8d44\u6e90\u200b\u5305\u200b\u7b5b\u9009\u200b\uff0c\u200b\u5c06\u200b\u53ef\u4ee5\u200b\u5728\u200b\u751f\u6210\u200b\u8d44\u6e90\u200b\u5305\u65f6\u200b\u6392\u9664\u200b\u67d0\u4e9b\u200b\u6587\u4ef6\u200b. \u200b\u8be5\u200b\u8bbe\u7f6e\u200b\u4f4d\u4e8e\u200b\u4e3b\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b <code>resource_pack</code> &gt; <code>generation</code> &gt; <code>resource_filters</code> \u200b\u90e8\u5206\u200b.</p> <pre><code>resource_pack:\n  generation:\n    resource_filters:\n    - stage: \"\" # (1)!\n      type: \"\" # (2)!\n      pattern_type: \"\" # (3)!\n      filter: \"\" # (4)!\n      directory: \"\" # (5)!\n</code></pre> <ol> <li>\u200b\u7b5b\u9009\u200b\u5668\u200b\u542f\u7528\u200b\u7684\u200b\u9636\u6bb5\u200b. \u200b\u53ef\u200b\u4e3a\u200b <code>asset_pack</code> \u200b\u6216\u200b <code>resource_pack</code>.</li> <li>\u200b\u7b5b\u9009\u200b\u5668\u200b\u7c7b\u578b\u200b. \u200b\u53ef\u200b\u4e3a\u200b <code>whitelist</code>(\u200b\u767d\u540d\u5355\u200b) \u200b\u6216\u200b <code>blacklist</code>(\u200b\u9ed1\u540d\u5355\u200b).</li> <li><code>filter</code> \u200b\u5b57\u6bb5\u200b\u7684\u200b\u7c7b\u578b\u200b. \u200b\u53ef\u200b\u4e3a\u200b <code>regex</code>(\u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b) \u200b\u6216\u200b <code>wildcard</code>(\u200b\u901a\u914d\u7b26\u200b).</li> <li>\u200b\u7b5b\u9009\u200b\u5668\u200b\u5339\u914d\u200b\u5185\u5bb9\u200b. <code>pattern_type</code> \u200b\u5b57\u200b\u6bb5\u200b\u914d\u7f6e\u200b\u4e86\u200b\u6b64\u200b\u5b57\u200b\u6bb5\u200b\u5982\u4f55\u200b\u5904\u7406\u200b.    \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b RegExr \u200b\u6216\u200b\u7c7b\u4f3c\u200b\u7f51\u7ad9\u200b\u4e0a\u200b\u6d4b\u8bd5\u200b\u4f60\u200b\u7684\u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b.</li> <li>\uff08\u200b\u53ef\u200b\u9009\u200b\uff09\u200b\u7b5b\u9009\u200b\u5668\u200b\u5e94\u7528\u200b\u7684\u200b\u76ee\u5f55\u200b. \u200b\u8bf7\u200b\u586b\u5199\u200b\u76f8\u5bf9\u200b\u4e8e\u200b <code>assets</code> \u200b\u76ee\u5f55\u200b\u7684\u200b\u76f8\u5bf9\u8def\u5f84\u200b\u3002</li> </ol> \u200b\u4e00\u4e9b\u200b\u793a\u4f8b\u200b <p>\u200b\u6392\u9664\u200b\u9664\u4e86\u200b <code>en_us.json</code> \u200b\u548c\u200b <code>de_de.json</code> \u200b\u4e4b\u5916\u200b\u7684\u200b\u6240\u6709\u200b\u8bed\u8a00\u200b\u6587\u4ef6\u200b:</p> config.yml: resource_pack &gt; generation &gt; resource_filters<pre><code>- stage: resource_pack\n  type: whitelist\n  pattern_type: regex\n  filter: minecraft\\/lang\\/(en_us|de_de).json\n  directory: minecraft/lang/\n</code></pre> <p>\u200b\u6392\u9664\u200b\u4e00\u200b\u6574\u4e2a\u200b\u76ee\u5f55\u200b:</p> config.yml: resource_pack &gt; generation &gt; resource_filters<pre><code>- stage: resource_pack\n  type: blacklist\n  pattern_type: regex\n  filter: .*\n  directory: path/to/directory/\n</code></pre> <p>\u200b\u6392\u9664\u200b\u6240\u6709\u200b png \u200b\u6587\u4ef6\u200b:</p> <p>```yaml title=\"config.yml: resource_pack &gt; generation &gt; resource_filters\" - stage: resource_pack   type: blacklist   pattern_type: regex   filter: *.png</p>"},{"location":"zh/admin/configuration/#waila","title":"WAILA(\u200b\u9ad8\u4eae\u200b\u4fe1\u606f\u200b\u62d3\u5c55\u200b) \u200b\u663e\u793a\u200b\u4f4d\u7f6e","text":"<p>\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u9ad8\u4eae\u200b\u4fe1\u606f\u200b\u4e0a\u65b9\u200b\u6216\u200b\u4e0b\u65b9\u200b\u7684\u200b Boss \u200b\u680f\u200b\uff0c\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4fee\u6539\u200b\u9ad8\u4eae\u200b\u4fe1\u606f\u200b\u6240\u5728\u200b\u7684\u200b\u5782\u76f4\u200b\u4f4d\u7f6e\u200b, \u200b\u5177\u4f53\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5728\u200b <code>waila</code> &gt; <code>positioning</code> &gt; <code>above</code> (WAILA \u200b\u4e0a\u65b9\u200b\u7684\u200b Boss \u200b\u680f\u200b)\u200b\u548c\u200b <code>waila</code> &gt; <code>positioning</code> &gt; <code>below</code> (WAILA\u200b\u4e0b\u65b9\u200b\u7684\u200b Boss \u200b\u680f\u200b)\u200b\u4e2d\u200b\u5b9a\u4e49\u200b\u5339\u914d\u200b\u5668\u6765\u200b\u5b9e\u73b0\u200b.</p> <p>\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u4e94\u79cd\u200b\u53ef\u7528\u200b\u7684\u200b\u5339\u914d\u200b\u5668\u200b:</p> \u200b\u7c7b\u578b\u200b \u200b\u7b80\u4ecb\u200b <code>origin</code> \u200b\u5339\u914d\u200b Boss \u200b\u680f\u200b\u6765\u6e90\u200b. (<code>minecraft</code> \u200b\u6216\u662f\u200b\u5176\u5b83\u200b\u63d2\u4ef6\u200b\u540d\u200b.) <code>text</code> \u200b\u4f7f\u7528\u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b\u6216\u8005\u200b\u901a\u914d\u7b26\u200b\u5339\u914d\u200b Boss \u200b\u680f\u200b\u663e\u793a\u200b\u7684\u200b\u6587\u5b57\u200b. <code>overlay</code> \u200b\u5339\u914d\u200b\u6765\u81ea\u200b\u53e6\u200b\u4e00\u4e2a\u200b Nova \u200b\u6269\u5c55\u200b\u7684\u200b Boss \u200b\u680f\u200b ID. <code>uuid</code> \u200b\u5339\u914d\u200b Boss \u200b\u680f\u200b UUID. <code>index</code> \u200b\u5339\u914d\u200b Nova \u200b\u91cd\u65b0\u200b\u6392\u5e8f\u200b\u524d\u200b\u7684\u200b Boss \u200b\u680f\u200b\u7d22\u5f15\u200b\uff0c\u200b\u7d22\u5f15\u200b\u4ece\u200b 0 \u200b\u5f00\u59cb\u200b. OriginTextOverlayUUIDIndex <pre><code>waila:\n  positioning:\n    above:\n    - type: origin\n      origin: &lt;origin&gt; # (1)!\n</code></pre> <ol> <li>\u200b\u5339\u914d\u200b\u7684\u200b\u6765\u6e90\u200b. \u200b\u53ef\u200b\u4e3a\u200b <code>minecraft</code> \u200b\u6216\u200b\u4e00\u4e2a\u200b\u63d2\u4ef6\u200b\u540d\u200b.</li> </ol> WildcardRegex <pre><code>waila:\n  positioning:\n    above:\n    - type: text\n      wildcard: &lt;pattern&gt; # (1)!\n</code></pre> <ol> <li>\u200b\u8981\u200b\u5339\u914d\u200b\u7684\u200b\u901a\u914d\u7b26\u200b\u6a21\u5f0f\u200b.    \u200b\u4f7f\u7528\u200b <code>*</code> \u200b\u6765\u200b\u5339\u914d\u200b\u4efb\u610f\u200b\u6570\u91cf\u200b\u7684\u200b\u5b57\u7b26\u200b\uff0c\u200b\u4f7f\u7528\u200b <code>?</code> \u200b\u6765\u200b\u5339\u914d\u200b\u5355\u4e2a\u200b\u5b57\u7b26\u200b\u3002</li> </ol> <pre><code>waila:\n  positioning:\n    above:\n    - type: text\n      regex: &lt;pattern&gt; # (1)!\n</code></pre> <ol> <li>\u200b\u8981\u200b\u5339\u914d\u200b\u7684\u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b\u6a21\u5f0f\u200b.    \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b RegExr \u200b\u4e0a\u200b\u68c0\u67e5\u200b\u4f60\u200b\u7684\u200b\u6b63\u5219\u8868\u8fbe\u5f0f\u200b\u6a21\u5f0f\u200b.</li> </ol> <pre><code>waila:\n  positioning:\n    above:\n    - type: overlay\n      overlay: &lt;overlay id&gt; # (1)!\n</code></pre> <ol> <li>\u200b\u6765\u81ea\u200b\u53e6\u200b\u4e00\u4e2a\u200b Nova \u200b\u6269\u5c55\u200b\u7684\u200b Boss \u200b\u680f\u200b ID.    \u200b\u4f8b\u5982\u200b, WAILA \u200b\u7684\u200b Boss \u200b\u680f\u200b ID \u200b\u662f\u200b <code>nova:waila</code>.</li> </ol> <pre><code>waila:\n  positioning:\n    above:\n    - type: uuid\n      uuid: &lt;uuid&gt; # (1)!\n</code></pre> <ol> <li>\u200b\u8981\u200b\u5339\u914d\u200b\u7684\u200b UUID.</li> </ol> <pre><code>waila:\n  positioning:\n    above:\n    - type: index\n      index: &lt;index&gt; # (1)!\n</code></pre> <ol> <li>Boss \u200b\u680f\u200b\u7684\u200b\u7d22\u5f15\u200b\uff0c\u200b\u7d22\u5f15\u200b\u4ece\u200b\u4e0a\u200b\u81f3\u200b\u4e0b\u200b\u4ece\u200b 0 \u200b\u5f00\u59cb\u200b.</li> </ol> \u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b <p>\u200b\u6b64\u200b\u793a\u4f8b\u200b\u5c06\u200b\u4f7f\u200b\u6240\u6709\u200b\u539f\u7248\u200b Boss \u200b\u680f\u200b\u90fd\u200b\u663e\u793a\u200b\u5728\u200b WAILA \u200b\u4e0b\u65b9\u200b, \u200b\u4e14\u200b\u4f7f\u200b <code>\u200b\u63d2\u4ef6\u200bA</code> \u200b\u548c\u200b <code>\u200b\u63d2\u4ef6\u200bB</code> \u200b\u7684\u200b Boss \u200b\u680f\u200b\u663e\u793a\u200b\u5728\u200b WAILA \u200b\u4e0a\u65b9\u200b.</p> <pre><code>waila:\n  positioning:\n    above:\n    - type: origin\n      origin: minecraft\n    below:\n    - type: origin\n      origin: '\u200b\u63d2\u4ef6\u200bA'\n    - type: origin\n      origin: '\u200b\u63d2\u4ef6\u200bB'\n</code></pre>"},{"location":"zh/admin/faq/","title":"\u95ee\u4e0e\u7b54","text":""},{"location":"zh/admin/faq/#nova","title":"Nova","text":"\u5982\u4f55\u200b\u83b7\u5f97\u200b\u8d44\u6e90\u200b\u5305\u200b? <p>\u200b\u8be6\u89c1\u200b \u200b\u5b89\u88c5\u200b Nova.</p> Nova \u200b\u652f\u6301\u200b\u54ea\u4e9b\u200b Minecraft \u200b\u7248\u672c\u200b? <p>Nova \u200b\u901a\u5e38\u200b\u53ea\u200b\u652f\u6301\u200b\u6700\u65b0\u200b\u7248\u672c\u200b\u7684\u200b Minecraft.</p> Nova \u200b\u4f1a\u200b\u517c\u5bb9\u200b\u591a\u200b\u7248\u672c\u200b\u5417\u200b? <p>\u200b\u4e0d\u200b\uff0c\u200b\u6211\u4eec\u200b\u6ca1\u6709\u200b\u591a\u200b\u7248\u672c\u200b\u5f00\u53d1\u200b\u7684\u200b\u8ba1\u5212\u200b</p> Nova \u200b\u4e0e\u200b Geyser \u200b\u517c\u5bb9\u200b\u5417\u200b? <p>\u200b\u4e0d\u200b\uff0cNova \u200b\u4e0e\u200b Geyser \u200b\u4e0d\u200b\u517c\u5bb9\u200b.</p> \u200b\u6211\u200b\u8be5\u200b\u5728\u200b\u54ea\u200b\u63d0\u4ea4\u200b bug? <p>\u200b\u8bf7\u200b\u5728\u200b GitHub \u200b\u4e0a\u200b\u63d0\u4ea4\u200b bug.</p> \u200b\u6211\u200b\u600e\u4e48\u200b\u83b7\u5f97\u200b\u5408\u6210\u200b\u914d\u65b9\u200b? <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>/nova items</code> \u200b\u6307\u4ee4\u200b\u6765\u200b\u67e5\u770b\u200b\u6240\u6709\u200b Nova \u200b\u7269\u54c1\u200b\u53ca\u5176\u200b\u5408\u6210\u200b\u914d\u65b9\u200b\u6216\u662f\u200b\u5728\u200b\u5408\u6210\u200b\u4e66\u4e2d\u200b\u67e5\u770b\u200b (\u200b\u5408\u6210\u200b\u533a\u57df\u200b\u5de6\u8fb9\u200b\u7684\u200b\u7eff\u8272\u200b\u4e66\u200b). \u200b\u5f53\u7136\u200b, \u200b\u914d\u65b9\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>/nvrecipe</code> \u200b\u548c\u200b <code>/nvusage</code> \u200b\u6307\u4ee4\u200b\u76f4\u63a5\u200b\u67e5\u770b\u200b.</p> \u200b\u7269\u54c1\u200b\u6ca1\u6709\u200b\u7eb9\u7406\u200b / \u200b\u770b\u8d77\u6765\u200b\u50cf\u662f\u200b\u6f5c\u5f71\u58f3\u200b. <p>\u200b\u8bf7\u200b\u67e5\u770b\u200b\u5b89\u88c5\u200b Nova \u200b\u9875\u9762\u200b\u786e\u4fdd\u200b\u8d44\u6e90\u200b\u5305\u88ab\u200b\u6b63\u786e\u200b\u914d\u7f6e\u200b.</p> Nova \u200b\u4e0e\u200b XX \u200b\u63d2\u4ef6\u200b\u517c\u5bb9\u200b\u5417\u200b? <p>\u200b\u6240\u6709\u200b\u517c\u5bb9\u200b\u7684\u200b\u63d2\u4ef6\u200b\u4ee5\u53ca\u200b\u5b89\u88c5\u200b\u8981\u6c42\u200b\u8bf7\u200b\u89c1\u200b\u517c\u5bb9\u6027\u200b\u9875\u9762\u200b.</p>"},{"location":"zh/admin/faq/#_2","title":"\u5b98\u65b9\u200b\u6269\u5c55","text":""},{"location":"zh/admin/faq/#logistics","title":"Logistics","text":"\u7269\u54c1\u200b\u8fc7\u6ee4\u5668\u200b\u662f\u200b\u5982\u4f55\u200b\u5de5\u4f5c\u200b\u7684\u200b? <p>\u200b\u5bf9\u200b\u7740\u200b\u7a7a\u6c14\u200b\u53f3\u952e\u200b\u6765\u200b\u9009\u62e9\u200b\u7269\u54c1\u200b, \u200b\u7136\u540e\u200b\u5c06\u200b\u7269\u54c1\u200b\u8fc7\u6ee4\u5668\u200b\u653e\u5230\u200b\u7535\u7f06\u200b\u6216\u200b\u771f\u7a7a\u200b\u7bb1\u4e2d\u200b.</p>"},{"location":"zh/admin/faq/#machines","title":"Machines","text":"\u6211\u200b\u5982\u4f55\u200b\u83b7\u5f97\u200b\u661f\u8fb0\u200b\u788e\u7247\u200b? <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b\u7bb1\u5b50\u200b\u4e2d\u200b\u627e\u5230\u200b\u5b83\u4eec\u200b (\u200b\u6bd4\u5982\u200b\u8981\u585e\u200b, \u200b\u77ff\u6d1e\u200b, \u200b\u6c99\u6f20\u200b\u795e\u6bbf\u200b...) \u200b\u6216\u8005\u200b\u901a\u8fc7\u200b\u6316\u6398\u200b\u751f\u6210\u200b\u5728\u200b y \u200b\u5750\u6807\u200b\u5927\u4e8e\u200b 120 \u200b\u7684\u200b\u533a\u57df\u200b\u7684\u200b\u661f\u8fb0\u200b\u788e\u7247\u200b\u77ff\u77f3\u200b.</p>"},{"location":"zh/admin/setup/","title":"\u5b89\u88c5\u200b Nova","text":""},{"location":"zh/admin/setup/#1","title":"\u6b65\u9aa4\u200b 1: \u200b\u5b89\u88c5\u200b\u63d2\u4ef6","text":"<ul> <li>\u200b\u4e0e\u200b\u5176\u4ed6\u200b\u63d2\u4ef6\u200b\u4e00\u6837\u200b, \u200b\u4ece\u200b Hangar, Modrinth, GitHub \u200b\u6216\u200b Discord \u200b\u4e0a\u200b\u4e0b\u8f7d\u200b\u7684\u200b\u63d2\u4ef6\u200b jar \u200b\u6587\u4ef6\u200b\u53ea\u200b\u9700\u200b\u653e\u5728\u200b <code>plugins/</code> \u200b\u6587\u4ef6\u5939\u200b\u4e2d\u200b\u5373\u53ef\u200b.</li> <li>\u200b\u542f\u52a8\u200b\u670d\u52a1\u5668\u200b\u5e76\u200b\u7b49\u5f85\u200b Nova \u200b\u5b8c\u6210\u200b\u52a0\u8f7d\u200b. (\u200b\u63a7\u5236\u53f0\u200b\u6d88\u606f\u200b <code>[Nova] Done loading</code>). \u200b\u6b64\u65f6\u200b\u540e\u9762\u200b\u4f1a\u200b\u7528\u5230\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u53ca\u200b\u76ee\u5f55\u200b\u5c31\u200b\u521b\u5efa\u200b\u597d\u200b\u4e86\u200b.</li> <li>\u200b\u5173\u95ed\u200b\u670d\u52a1\u5668\u200b.</li> </ul> <p>\u200b\u4e0d\u8981\u200b\u5c06\u200b\u6269\u5c55\u200b\u653e\u5728\u200b plugins \u200b\u6587\u4ef6\u5939\u200b\u4e0b\u200b</p> <p>Nova \u200b\u6269\u5c55\u200b\u4e0e\u200b\u63d2\u4ef6\u200b\u6709\u7740\u200b\u5f88\u5927\u200b\u7684\u200b\u4e0d\u540c\u200b\uff0c\u200b\u65e0\u6cd5\u200b\u5728\u200b <code>plugins/</code> \u200b\u76ee\u5f55\u200b\u4e0b\u200b\u6b63\u5e38\u200b\u5de5\u4f5c\u200b. \u200b\u5b89\u88c5\u200b\u6269\u5c55\u200b\u7684\u200b\u6b65\u9aa4\u200b\u89c1\u200b\u6b65\u9aa4\u200b 2.</p>"},{"location":"zh/admin/setup/#2","title":"\u6b65\u9aa4\u200b 2: \u200b\u5b89\u88c5\u200b\u6269\u5c55","text":"<p>\u200b\u8981\u200b\u5b89\u88c5\u200b\u4e00\u4e2a\u200b\u6269\u5c55\u200b:</p> <ul> <li>\u200b\u5173\u95ed\u200b\u670d\u52a1\u5668\u200b</li> <li>\u200b\u5c06\u200b\u6269\u5c55\u200b jar \u200b\u6587\u4ef6\u200b\u653e\u8fdb\u200b <code>plugins/Nova/addons/</code></li> <li>\u200b\u542f\u52a8\u200b\u670d\u52a1\u5668\u200b</li> </ul> <p>\u200b\u65b0\u200b\u8d44\u6e90\u200b\u5305\u5c06\u4f1a\u200b\u81ea\u52a8\u200b\u751f\u6210\u200b, \u200b\u4f46\u662f\u200b\u6682\u65f6\u200b\u8fd8\u200b\u6ca1\u6cd5\u200b\u53d1\u9001\u7ed9\u200b\u73a9\u5bb6\u200b. \u200b\u8bf7\u200b\u4f7f\u7528\u200b\u6b65\u9aa4\u200b 3 \u200b\u63d0\u4f9b\u200b\u7684\u200b\u65b9\u6cd5\u200b\u914d\u7f6e\u200b\u8d44\u6e90\u200b\u5305\u200b\u6258\u7ba1\u200b\u6e90\u200b.</p> <p>\u200b\u6ce8\u610f\u200b</p> <p>\u200b\u67d0\u4e9b\u200b\u6269\u5c55\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u4f9d\u8d56\u4e8e\u200b\u5176\u4ed6\u200b\u6269\u5c55\u200b\u3002\u200b\u5982\u679c\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b\u53d1\u751f\u200b\uff0c\u200b\u63d2\u4ef6\u200b\u4f1a\u200b\u5728\u200b\u63a7\u5236\u53f0\u200b\u8f93\u51fa\u200b\u6240\u7f3a\u200b\u7684\u200b\u6269\u5c55\u200b: <code>Failed to initialize &lt;\u200b\u6269\u5c55\u540d\u200b&gt;: Missing addon(s): &lt;\u200b\u7f3a\u5931\u200b\u7684\u200b\u6269\u5c55\u200b&gt;</code></p>"},{"location":"zh/admin/setup/#3","title":"\u6b65\u9aa4\u200b 3: \u200b\u914d\u7f6e\u200b\u8d44\u6e90\u200b\u5305\u200b\u6258\u7ba1\u200b\u6e90","text":"<p>\u200b\u6839\u636e\u200b\u591a\u4eba\u200b\u6e38\u620f\u200b\u8d44\u6e90\u200b\u5305\u200b\u7684\u200b\u5de5\u4f5c\u200b\u539f\u7406\u200b\uff0c\u200b\u8d44\u6e90\u200b\u5305\u200b\u5fc5\u987b\u200b\u5148\u200b\u88ab\u200b\u4e0a\u4f20\u200b\u81f3\u200b\u4e00\u4e2a\u200b\u7f51\u7ad9\u200b\u670d\u52a1\u5668\u200b\u624d\u80fd\u200b\u53d1\u9001\u7ed9\u200b\u73a9\u5bb6\u200b. \u200b\u8fd9\u200b\u53ef\u4ee5\u200b\u81ea\u52a8\u200b\u5b8c\u6210\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u624b\u52a8\u200b\u5b8c\u6210\u200b.</p> \u200b\u8d44\u6e90\u200b\u5305\u200b\u81ea\u52a8\u200b\u4e0a\u4f20\u200b (\u200b\u63a8\u8350\u200b)\u200b\u624b\u52a8\u200b\u4e0a\u4f20\u200b\u8d44\u6e90\u200b\u5305\u200b <p>\u200b\u5f53\u200b\u8d44\u6e90\u200b\u5305\u200b\u6539\u53d8\u200b\u65f6\u200b\u81ea\u52a8\u200b\u4e0a\u4f20\u200b. \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>plugins/Nova/configs/config.yml</code> \u200b\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b <code>resource_pack</code> &gt; <code>auto_upload</code> \u200b\u8bbe\u7f6e\u200b\u9879\u4e2d\u200b\u8fdb\u884c\u200b\u914d\u7f6e\u200b.</p> <p>\u200b\u53ef\u7528\u200b\u7684\u200b\u4e0a\u4f20\u200b\u670d\u52a1\u200b</p> Patreon \u200b\u4e0a\u4f20\u200b\u670d\u52a1\u200b\u81ea\u884c\u200b\u642d\u5efa\u200b Web \u200b\u670d\u52a1\u200b\u4f7f\u7528\u200b Multipart \u200b\u8bf7\u6c42\u200bAmazon S3Oraxen <p>Patrons \u200b\u53ef\u4ee5\u200b\u5c06\u200b\u8d44\u6e90\u200b\u5305\u200b\u4e0a\u200b\u4f20\u5230\u200b\u6211\u4eec\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b. \u200b\u7531\u4e8e\u200b\u670d\u52a1\u5668\u200b\u8d39\u7528\u200b\u4ee5\u53ca\u200b\u9632\u6b62\u200b\u6ee5\u7528\u200b, \u200b\u6b64\u200b\u670d\u52a1\u200b\u4ec5\u200b\u5bf9\u200b Patrons \u200b\u5f00\u653e\u200b.</p> <p>\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b:</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  auto_upload:\n    enabled: true\n    service: xenondevs\n    key: \"\" # \u200b\u4f60\u200b\u7684\u200b Patreon-Uploader \u200b\u5bc6\u94a5\u200b\n</code></pre> <p>\u200b\u9664\u975e\u200b\u4f60\u200b\u80fd\u591f\u200b\u5728\u200b\u60a8\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u5f00\u653e\u200b\u4e00\u4e2a\u200b Web \u200b\u7aef\u53e3\u200b, \u200b\u5426\u5219\u8bf7\u200b\u5ffd\u7565\u200b\u6b64\u200b\u65b9\u6cd5\u200b. Nova \u200b\u5c06\u200b\u542f\u52a8\u200b\u4e00\u4e2a\u200b Web \u200b\u670d\u52a1\u5668\u200b\u6765\u200b\u63d0\u4f9b\u200b\u8d44\u6e90\u200b\u5305\u200b\u7684\u200b\u4e0b\u8f7d\u200b.</p> <p>\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b:</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  auto_upload:\n    enabled: true\n    service: self_host\n    port: 12345 # Web \u200b\u670d\u52a1\u200b\u7684\u200b\u7aef\u53e3\u200b\n</code></pre> <p><code>host</code> \u200b\u53c2\u6570\u200b</p> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>host</code> \u200b\u53c2\u6570\u200b\u6765\u200b\u8bbe\u7f6e\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u4e3b\u673a\u540d\u200b. \u200b\u5982\u679c\u200b\u6ca1\u6709\u200b\u8bbe\u7f6e\u200b, \u200b\u5c06\u4f1a\u200b\u4f7f\u7528\u200b\u60a8\u200b\u670d\u52a1\u5668\u200b\u7684\u200b\u516c\u7f51\u200b IP. \u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u4ec5\u200b\u5bf9\u200b\u672c\u673a\u200b\u5f00\u653e\u200b, \u200b\u4f60\u200b\u9700\u8981\u200b\u8bbe\u200b\u4e3a\u200b <code>host: 127.0.0.1</code></p> <p><code>append_port</code> \u200b\u53c2\u6570\u200b</p> <p>\u200b\u5f53\u200b <code>host</code> \u200b\u88ab\u200b\u8bbe\u7f6e\u200b\u65f6\u200b, Nova \u200b\u4f1a\u200b\u8ba4\u4e3a\u200b\u7aef\u53e3\u200b\u4e0d\u5fc5\u200b\u518d\u200b\u88ab\u200b\u52a0\u5165\u200b\u4e3b\u673a\u540d\u200b\u672b\u5c3e\u200b. \u200b\u5982\u679c\u200b\u8fd9\u200b\u4e0d\u662f\u200b\u4f60\u200b\u9700\u8981\u200b\u7684\u200b\u60c5\u51b5\u200b, \u200b\u8bbe\u7f6e\u200b <code>append_port: true</code>.</p> <p>\u200b\u5bf9\u4e8e\u200b\u9ad8\u7ea7\u200b\u7528\u6237\u200b, Nova \u200b\u53ef\u4ee5\u200b\u53d1\u9001\u200b\u8bf7\u6c42\u200b\u81f3\u200b\u4f60\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u5e76\u200b\u89e3\u6790\u200b\u670d\u52a1\u5668\u200b\u56de\u5e94\u200b.</p> <p>\u200b\u793a\u4f8b\u200b: php \u200b\u4e0a\u4f20\u200b\u811a\u672c\u200b</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  auto_upload:\n    enabled: true\n    service: custom_multi_part\n    url: https://example.com/upload.php\n    filePartName: pack\n    extraParams:\n      key: \"\" # \u200b\u6b64\u200b\u5bc6\u94a5\u200b\u9700\u8981\u200b\u4e0e\u200b\u4e0a\u65b9\u200b\u63d0\u53ca\u200b\u7684\u200b php \u200b\u811a\u672c\u200b\u4e2d\u200b\u7684\u200b\u5bc6\u94a5\u200b\u4e00\u81f4\u200b\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u4f7f\u7528\u200b\u7684\u200b\u662f\u200b Amazon S3, \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b S3 \u200b\u670d\u52a1\u200b\u6765\u200b\u4e0a\u4f20\u200b\u8d44\u6e90\u200b\u5305\u200b. \u200b\u4f60\u200b\u9700\u8981\u200b\u5f00\u653e\u200b S3 \u200b\u5bb9\u5668\u200b\u7684\u200b\u516c\u5f00\u200b\u7f51\u7edc\u200b\u8bbf\u95ee\u200b\u6743\u9650\u200b.</p> <p>\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b:</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  auto_upload:\n    enabled: true\n    service: amazon_s3\n    endpoint: s3.amazonaws.com # \u200b\u4f60\u200b\u7684\u200b S3 \u200b\u670d\u52a1\u200b\u7684\u200b endpoint\n    region: eu-central-1 # \u200b\u4f60\u200b\u7684\u200b S3 \u200b\u670d\u52a1\u200b\u7684\u200b endpoint \u200b\u533a\u57df\u200b\n    bucket: examplebucket # \u200b\u4f60\u200b\u7684\u200b S3 \u200b\u5bb9\u5668\u200b\u7684\u200b\u540d\u79f0\u200b\n    key_id: \"\" # \u200b\u4f60\u200b\u7684\u200b S3 key id\n    key_secret: \"\" # \u200b\u4f60\u200b\u7684\u200b S3 key secret\n</code></pre> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u5b89\u88c5\u200b\u4e86\u200b Oraxen \u200b\u63d2\u4ef6\u200b, \u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Oraxen \u200b\u63d2\u4ef6\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u914d\u7f6e\u200b\u7684\u200b PolyMath \u200b\u670d\u52a1\u200b.</p> <p>\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b:</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  auto_upload:\n    enabled: true\n    service: oraxen\n</code></pre> <p>\u200b\u8981\u200b\u624b\u52a8\u200b\u4e0a\u4f20\u200b\u8d44\u6e90\u200b\u5305\u200b, \u200b\u53ea\u200b\u9700\u200b\u4e0a\u4f20\u200b <code>plugins/Nova/resource_pack/ResourcePack.zip</code> \u200b\u5373\u53ef\u200b. \u200b\u4e0a\u4f20\u200b\u5b8c\u540e\u200b\uff0c\u200b\u5728\u200b\u4e3b\u200b\u914d\u7f6e\u6587\u4ef6\u200b <code>plugins/Nova/configs/config.yml</code> \u200b\u4e2d\u200b\u7684\u200b <code>resource_pack.url</code> \u200b\u4e0b\u200b\u586b\u5199\u200b\u8d44\u6e90\u200b\u5305\u200b\u94fe\u63a5\u200b\u5373\u53ef\u200b:</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  url: https://example.com/resource_pack.zip\n</code></pre> <p>\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u4f60\u200b\u586b\u5199\u200b\u7684\u200b\u4e0b\u8f7d\u200b\u94fe\u63a5\u200b\u662f\u200b\u76f4\u94fe\u200b</p> <p>\u200b\u7406\u8bba\u200b\u4e0a\u200b\u94fe\u63a5\u200b\u5e94\u200b\u4ee5\u200b <code>.zip</code> \u200b\u7ed3\u5c3e\u200b\uff0c\u200b\u8bf7\u200b\u786e\u4fdd\u200b\u4e0d\u662f\u200b\u5404\u200b\u5927\u7f51\u200b\u76d8\u200b\u7684\u200b\u5206\u4eab\u200b\u94fe\u63a5\u200b.</p> <p>\u200b\u4f18\u5148\u9009\u62e9\u200b\u8d44\u6e90\u200b\u5305\u200b\u81ea\u52a8\u200b\u4e0a\u4f20\u200b</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u9009\u62e9\u200b\u624b\u52a8\u200b\u4e0a\u4f20\u200b\u8d44\u6e90\u200b\u5305\u200b\uff0c\u200b\u4f60\u200b\u5c06\u200b\u9700\u8981\u200b\u5728\u200b\u6bcf\u6b21\u200b\u66f4\u65b0\u200b Nova \u200b\u53ca\u5176\u200b\u6269\u5c55\u200b\u6216\u662f\u200b\u4fee\u6539\u200b\u5f71\u54cd\u200b\u8d44\u6e90\u200b\u5305\u200b\u751f\u6210\u200b\u7684\u200b\u914d\u7f6e\u200b\u65f6\u200b\u91cd\u65b0\u200b\u4e0a\u4f20\u200b\u8d44\u6e90\u200b\u5305\u200b. \u200b\u8fd9\u200b\u4e5f\u200b\u662f\u200b\u4e3a\u4ec0\u4e48\u200b\u4f60\u200b\u5e94\u8be5\u200b\u4f18\u5148\u9009\u62e9\u200b\u8d44\u6e90\u200b\u5305\u200b\u81ea\u52a8\u200b\u4e0a\u4f20\u200b.</p>"},{"location":"zh/admin/setup/#_1","title":"(\u200b\u53ef\u200b\u9009\u200b) \u200b\u8d44\u6e90\u200b\u5305\u200b\u5408\u5e76","text":"<p>\u200b\u6b64\u200b\u6b65\u9aa4\u200b\u4ec5\u200b\u5728\u200b\u4f60\u200b\u7684\u200b\u670d\u52a1\u5668\u200b\u540c\u65f6\u200b\u5b58\u5728\u200b\u5176\u5b83\u200b\u8d44\u6e90\u200b\u5305\u65f6\u200b\u8fdb\u884c\u200b.</p> <p>\u200b\u7531\u4e8e\u200b Minecraft \u200b\u7684\u200b\u9650\u5236\u200b, \u200b\u4e00\u4e2a\u200b\u670d\u52a1\u5668\u200b\u53ea\u80fd\u200b\u8bbe\u7f6e\u200b\u4e00\u4e2a\u200b\u8d44\u6e90\u200b\u5305\u200b. \u200b\u4f46\u200b\u8fd9\u4e2a\u200b\u9650\u5236\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5408\u5e76\u200b\u8d44\u6e90\u200b\u5305\u6765\u200b\u89e3\u51b3\u200b\uff0c\u200b\u800c\u200b Nova \u200b\u5c31\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u81ea\u5df1\u200b\u7684\u200b\u8d44\u6e90\u200b\u5305\u200b\u548c\u200b\u5176\u4ed6\u200b\u8d44\u6e90\u200b\u5305\u200b\u8fdb\u884c\u200b\u5408\u5e76\u200b. \u200b\u53e6\u5916\u200b, Nova \u200b\u8fd8\u4f1a\u200b\u5206\u6790\u200b\u8fd9\u4e9b\u200b\u8d44\u6e90\u200b\u5305\u5e76\u200b\u4fee\u6539\u200b\u81ea\u8eab\u200b\u6570\u636e\u200b\u4ece\u800c\u200b\u907f\u514d\u200b\u51b2\u7a81\u200b. \u200b\u4e0d\u8981\u200b\u624b\u52a8\u200b\u5408\u5e76\u200b\u8d44\u6e90\u200b\u5305\u200b\u6216\u662f\u200b\u4f7f\u7528\u200b\u5176\u4ed6\u200b\u63d2\u4ef6\u200b\u7684\u200b\u5408\u5e76\u200b\u670d\u52a1\u200b.</p> <p>\u200b\u63d2\u4ef6\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u4e24\u79cd\u200b\u65b9\u6cd5\u200b\u6765\u200b\u6307\u5b9a\u200b\u8981\u200b\u5408\u5e76\u200b\u7684\u200b\u8d44\u6e90\u200b\u5305\u200b:  </p> \u200b\u4f7f\u7528\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4f7f\u7528\u200b\u6587\u4ef6\u5939\u200b <ol> <li>\u200b\u786e\u4fdd\u200b\u4f60\u200b\u5173\u95ed\u200b\u4e86\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u63d0\u4f9b\u200b\u8d44\u6e90\u200b\u5305\u200b\u7684\u200b\u63d2\u4ef6\u200b\u7684\u200b\u8d44\u6e90\u200b\u5305\u200b\u53d1\u9001\u200b\u529f\u80fd\u200b\u3002</li> <li> <p>\u200b\u5728\u200b Nova \u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b <code>resource_pack</code> &gt; <code>generation</code> &gt; <code>base_packs</code> \u200b\u8bbe\u7f6e\u200b\u5f85\u200b\u5408\u5e76\u200b\u8d44\u6e90\u200b\u5305\u200b\u8def\u5f84\u200b\u3002</p> plugins/Nova/configs/config.yml<pre><code>resource_pack:\n  generation:\n    base_packs:\n      - plugins/ItemsAdder/output/generated.zip\n</code></pre> </li> <li> <p>\u200b\u786e\u4fdd\u200b\u5217\u51fa\u200b\u7684\u200b\u8d44\u6e90\u200b\u5305\u90fd\u200b\u5df2\u7ecf\u200b\u88ab\u200b\u6b63\u786e\u200b\u751f\u6210\u200b. (\u200b\u4f8b\u5982\u200b, ItemsAdder \u200b\u9700\u8981\u200b\u4f7f\u7528\u200b <code>/iazip</code> \u200b\u6307\u4ee4\u200b\u6765\u200b\u751f\u6210\u200b\u8d44\u6e90\u200b\u5305\u200b.)</p> </li> <li>\u200b\u4f7f\u7528\u200b <code>/nova reload configs</code> \u200b\u6307\u4ee4\u200b\u91cd\u8f7d\u200b\u914d\u7f6e\u200b\u6216\u200b\u91cd\u542f\u200b\u670d\u52a1\u5668\u200b.</li> <li>\u200b\u4f7f\u7528\u200b <code>/nova resourcePack create</code> \u200b\u6307\u4ee4\u200b\u91cd\u65b0\u200b\u751f\u6210\u200b\u8d44\u6e90\u200b\u5305\u200b.</li> </ol> <ol> <li>\u200b\u786e\u4fdd\u200b\u4f60\u200b\u5173\u95ed\u200b\u4e86\u200b\u53e6\u200b\u4e00\u4e2a\u200b\u63d0\u4f9b\u200b\u8d44\u6e90\u200b\u5305\u200b\u7684\u200b\u63d2\u4ef6\u200b\u7684\u200b\u8d44\u6e90\u200b\u5305\u200b\u53d1\u9001\u200b\u529f\u80fd\u200b</li> <li>\u200b\u5c06\u200b\u8d44\u6e90\u200b\u5305\u200b\u590d\u5236\u5230\u200b <code>plugins/Nova/resource_pack/base_packs/</code></li> <li>\u200b\u4f7f\u7528\u200b <code>/nova resourcePack create</code> \u200b\u6307\u4ee4\u200b\u91cd\u65b0\u200b\u751f\u6210\u200b\u8d44\u6e90\u200b\u5305\u200b.</li> </ol> <p>\u200b\u7406\u8bba\u200b\u4e0a\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b\u65e0\u9650\u200b\u591a\u200b\u7684\u200b\u8d44\u6e90\u200b\u5305\u200b.</p>"},{"location":"zh/admin/compatibility/","title":"\u670d\u52a1\u7aef\u200b\u53ca\u200b\u7b2c\u4e09\u65b9\u200b\u63d2\u4ef6","text":""},{"location":"zh/admin/compatibility/#_1","title":"\u517c\u5bb9\u200b\u7684\u200b\u670d\u52a1\u7aef","text":"<p>Nova \u200b\u662f\u200b\u4e00\u4e2a\u200b Paper \u200b\u63d2\u4ef6\u200b\uff0c\u200b\u5efa\u8bae\u200b\u5728\u200b Paper \u200b\u670d\u52a1\u7aef\u200b\u6216\u200b\u57fa\u4e8e\u200b Paper \u200b\u7684\u200b\u670d\u52a1\u7aef\u200b\u4e0a\u200b\u8fd0\u884c\u200b. \u200b\u76ee\u524d\u200b\u652f\u6301\u200b\u7684\u200b\u670d\u52a1\u7aef\u200b\u6709\u200b:</p> <ul> <li> Paper (\u200b\u63a8\u8350\u200b)</li> <li> Purpur</li> <li> Pufferfish</li> </ul> <p>\u200b\u5176\u5b83\u200b\u670d\u52a1\u7aef\u200b\u90fd\u200b\u6216\u591a\u6216\u5c11\u200b\u4e0e\u200b Nova \u200b\u4e0d\u200b\u517c\u5bb9\u200b.</p> <p>\u200b\u6211\u4eec\u200b\u6b63\u5728\u200b\u8ba1\u5212\u200b\u517c\u5bb9\u200b\u4ee5\u4e0b\u200b\u670d\u52a1\u7aef\u200b:</p> <ul> <li>Folia</li> </ul>"},{"location":"zh/admin/compatibility/#_2","title":"\u63d2\u4ef6\u200b\u517c\u5bb9\u6027","text":""},{"location":"zh/admin/compatibility/#_3","title":"\u81ea\u5b9a\u4e49\u200b\u7269\u54c1\u200b\u63d2\u4ef6","text":"<p>\u200b\u6253\u52fe\u200b\u7684\u200b\u63d2\u4ef6\u200b\u4e3a\u200b\u5b8c\u5168\u200b\u517c\u5bb9\u200b\u7684\u200b\u63d2\u4ef6\u200b (\u200b\u5b83\u4eec\u200b\u7684\u200b\u7269\u54c1\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u7528\u200b\u5728\u200b\u914d\u65b9\u200b\u4e2d\u200b, \u200b\u5b83\u4eec\u200b\u7684\u200b\u65b9\u5757\u200b\u53ef\u200b\u88ab\u200b\u673a\u5668\u200b\u7834\u574f\u200b\u7b49\u200b) \u200b\u672a\u200b\u6253\u52fe\u200b\u7684\u200b\u63d2\u4ef6\u200b\u4e3a\u200b\u90e8\u5206\u200b\u517c\u5bb9\u200b, \u200b\u67d0\u4e9b\u200b\u529f\u80fd\u200b\u53ef\u80fd\u200b\u4e0d\u4f1a\u200b\u6b63\u5e38\u200b\u5de5\u4f5c\u200b.</p> <ul> <li> ItemsAdder | \u200b\u5df2\u77e5\u200b\u95ee\u9898\u200b</li> <li> Oraxen | \u200b\u5df2\u77e5\u200b\u95ee\u9898\u200b</li> <li> MMOItems</li> </ul> <p>\u200b\u5373\u5c06\u200b\u517c\u5bb9\u200b:</p> <ul> <li>\u200b\u7c98\u6db2\u200b\u79d1\u6280\u200b</li> <li>Space</li> </ul> <p>\u200b\u8b66\u544a\u200b</p> <p>\u200b\u8fd9\u91cc\u200b\u7684\u200b\u5927\u591a\u6570\u200b\u63d2\u4ef6\u200b\u90fd\u200b\u9700\u8981\u200b\u5408\u5e76\u200b\u8d44\u6e90\u200b\u5305\u200b. \u200b\u4f60\u200b\u53ef\u80fd\u200b\u4e5f\u200b\u9700\u8981\u200b\u9605\u8bfb\u200b\u7591\u96be\u89e3\u7b54\u200b\u9875\u9762\u200b.</p>"},{"location":"zh/admin/compatibility/#_4","title":"\u4fdd\u62a4\u200b\u7c7b\u200b\u63d2\u4ef6","text":"<p>\u200b\u4ee5\u4e0b\u200b\u63d2\u4ef6\u200b\u5df2\u7ecf\u200b\u5b8c\u5168\u200b\u517c\u5bb9\u200b, \u200b\u63d2\u4ef6\u200b\u5f00\u53d1\u8005\u200b\u53ef\u4ee5\u200b\u53c2\u8003\u200b\u8fd9\u4e2a\u200b API \u200b\u6765\u200b\u8ba9\u200b\u81ea\u5df1\u200b\u7684\u200b\u63d2\u4ef6\u200b\u517c\u5bb9\u200b Nova.</p> <ul> <li> WorldGuard</li> <li> GriefPrevention</li> <li> PlotSquared</li> <li> Towny</li> <li> ProtectionStones</li> <li> QuickShop</li> <li> Residence</li> </ul>"},{"location":"zh/admin/compatibility/itemsadder/#itemsadder","title":"\u5982\u4f55\u200b\u517c\u5bb9\u200b ItemsAdder","text":"<p>\u200b\u8981\u200b\u4f7f\u200b ItemsAdder \u200b\u548c\u200b Nova \u200b\u4e00\u8d77\u200b\u5de5\u4f5c\u200b, \u200b\u4f60\u200b\u9700\u8981\u200b\u8fd9\u6837\u200b\u505a\u200b:</p> <ol> <li>\u200b\u5728\u200b ItemsAdder \u200b\u7684\u200b <code>config.yml</code> \u200b\u4e2d\u200b\u4fee\u6539\u200b\u8fd9\u4e9b\u200b\u503c\u200b:<ul> <li>\u200b\u8bbe\u7f6e\u200b <code>resource-pack</code> &gt; <code>hosting</code> &gt; <code>no-host</code> &gt; <code>enabled</code> \u200b\u4e3a\u200b <code>true</code> (\u200b\u5176\u5b83\u200b\u6709\u5173\u200b <code>hosting</code> \u200b\u7684\u200b\u9009\u9879\u200b\u4e5f\u200b\u9700\u8981\u200b\u8bbe\u200b\u4e3a\u200b <code>false</code>).</li> <li>\u200b\u5728\u200b <code>resource-pack</code> &gt; <code>zip</code> &gt; <code>protect-file-from-unzip</code> \u200b\u4e2d\u200b\u8bbe\u7f6e\u200b <code>protection_1</code> \u200b\u548c\u200b <code>protection_2</code> \u200b\u4e3a\u200b <code>false</code>.</li> <li>\u200b\u8bbe\u7f6e\u200b <code>resource-pack</code> &gt; <code>zip</code> &gt; <code>disable-overwrite-leather-armor-layers-textures</code> \u200b\u4e3a\u200b <code>true</code>.</li> </ul> </li> <li>\u200b\u5c06\u200b ItemsAdder \u200b\u7684\u200b\u8d44\u6e90\u200b\u5305\u200b\u4f5c\u4e3a\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u5f85\u200b\u5408\u5e76\u200b\u8d44\u6e90\u200b\u5305\u200b.</li> <li>\u200b\u4f7f\u7528\u200b <code>/nova resourcePack create</code> \u200b\u6307\u4ee4\u200b\u91cd\u65b0\u200b\u751f\u6210\u200b Nova \u200b\u7684\u200b\u8d44\u6e90\u200b\u5305\u200b (\u200b\u8bf7\u200b\u5148\u200b\u6267\u884c\u200b <code>/iazip</code> \u200b\u6765\u200b\u786e\u4fdd\u200b\u8d44\u6e90\u200b\u5305\u200b\u5b58\u5728\u200b)</li> </ol> <p>\u200b\u4e0d\u200b\u652f\u6301\u200b\u7684\u200b\u529f\u80fd\u200b</p> <p>ItemsAdder \u200b\u7684\u200b\u8c03\u8272\u200b\u76d4\u7532\u200b \"mineral armor\" \u200b\u4e0d\u200b\u53d7\u200b\u652f\u6301\u200b. \u200b\u8bf7\u200b\u4f7f\u7528\u200b\u81ea\u5b9a\u4e49\u200b\u7eb9\u7406\u200b.</p>"},{"location":"zh/admin/compatibility/itemsadder/#itemsadder_1","title":"\u5f53\u4e3a\u200b ItemsAdder \u200b\u6dfb\u52a0\u200b\u65b0\u5143\u7d20\u200b\u65f6","text":"<p>\u200b\u5728\u200b\u65b0\u5143\u7d20\u200b\u6dfb\u52a0\u200b\u5230\u200b ItemsAdder \u200b\u5e76\u200b\u6267\u884c\u200b <code>/iazip</code> \u200b\u540e\u200b, \u200b\u4f60\u200b\u8fd8\u200b\u9700\u200b\u6267\u884c\u200b <code>/nova resourcePack create</code> \u200b\u547d\u4ee4\u200b.</p>"},{"location":"zh/admin/compatibility/itemsadder/#_1","title":"\u5df2\u77e5\u200b\u95ee\u9898","text":"<ul> <li>ItemsAdder-2043: ItemsAdder \u200b\u5e72\u6270\u200b Nova \u200b\u7684\u200b\u65b9\u5757\u200b\u72b6\u6001\u200b   (\u200b\u8fd9\u662f\u200b ItemsAdder \u200b\u7684\u200b\u95ee\u9898\u200b, \u200b\u8bf7\u200b\u4e0d\u8981\u200b\u5411\u200b\u6211\u4eec\u200b\u53cd\u9988\u200b)</li> </ul>"},{"location":"zh/admin/compatibility/oraxen/#oraxen","title":"\u5982\u4f55\u200b\u517c\u5bb9\u200b Oraxen","text":"<p>\u200b\u8981\u200b\u4f7f\u200b Oraxen \u200b\u548c\u200b Nova \u200b\u5171\u540c\u200b\u5de5\u4f5c\u200b, \u200b\u4f60\u200b\u9700\u8981\u200b\u5b8c\u6210\u200b\u4e00\u4e0b\u200b\u6b65\u9aa4\u200b:</p> <ol> <li>\u200b\u5728\u200b Oraxen \u200b\u7684\u200b <code>settings.yml</code> \u200b\u4fee\u6539\u200b\u4ee5\u4e0b\u200b\u8bbe\u7f6e\u200b:<ul> <li>\u200b\u5c06\u200b <code>Pack</code> &gt; <code>upload</code> &gt; <code>enabled</code> \u200b\u8bbe\u200b\u4e3a\u200b <code>false</code></li> <li>\u200b\u5c06\u200b <code>Pack</code>&gt; <code>dispatch</code> \u200b\u4e2d\u200b\u7684\u200b <code>send_pack</code> \u200b\u548c\u200b <code>send_on_reload</code> \u200b\u8bbe\u200b\u4e3a\u200b <code>false</code></li> </ul> </li> <li>\u200b\u5728\u200b Nova \u200b\u7684\u200b\u4e3b\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u5c06\u200b Oraxen \u200b\u8d44\u6e90\u200b\u5305\u8bbe\u200b\u4e3a\u200b\u5f85\u200b\u5408\u5e76\u200b\u8d44\u6e90\u200b\u5305\u200b.</li> <li>\u200b\u4f7f\u7528\u200b <code>/nova resourcePack create</code> \u200b\u6307\u4ee4\u200b\u91cd\u65b0\u200b\u751f\u6210\u200b Nova \u200b\u7684\u200b\u8d44\u6e90\u200b\u5305\u200b (\u200b\u8bf7\u200b\u5148\u200b\u6267\u884c\u200b <code>/o reload pack</code> \u200b\u6765\u200b\u786e\u4fdd\u200b\u8d44\u6e90\u200b\u5305\u200b\u5b58\u5728\u200b)</li> </ol>"},{"location":"zh/admin/compatibility/oraxen/#oraxen_1","title":"\u4f7f\u7528\u200b Oraxen \u200b\u7684\u200b\u4e0a\u4f20\u200b\u670d\u52a1","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b Oraxen \u200b\u7684\u200b\u4e0a\u4f20\u200b\u670d\u52a1\u200b\u6765\u200b\u81ea\u52a8\u200b\u4e0a\u4f20\u200b\u8d44\u6e90\u200b\u5305\u200b. \u200b\u8d44\u6e90\u200b\u5305\u200b\u6258\u7ba1\u200b - \u200b\u53ef\u7528\u200b\u7684\u200b\u4e0a\u4f20\u200b\u670d\u52a1\u200b</p>"},{"location":"zh/admin/compatibility/oraxen/#_1","title":"\u5df2\u77e5\u200b\u95ee\u9898","text":"<ul> <li>\u200b\u91cd\u590d\u200b\u4e14\u200b\u9519\u8bef\u200b\u7684\u200b\u65b9\u5757\u200b\u97f3\u6548\u200b</li> </ul>"},{"location":"zh/admin/compatibility/troubleshooting/","title":"\u7591\u96be\u89e3\u7b54","text":""},{"location":"zh/admin/compatibility/troubleshooting/#_2","title":"\u56fa\u4f53\u200b\u65b9\u5757","text":"<p>\u200b\u5982\u679c\u200b\u4f60\u200b\u670d\u52a1\u5668\u200b\u4e0a\u200b\u6709\u200b\u5176\u4ed6\u200b\u63d2\u4ef6\u200b\u5728\u200b\u63d0\u4f9b\u200b\u975e\u200b\u57fa\u4e8e\u200b\u76d4\u7532\u200b\u67b6\u200b\u7684\u200b\u65b9\u5757\u200b (\u200b\u5982\u200b\u97f3\u7b26\u200b\u76d2\u200b\u3001\u200b\u8611\u83c7\u200b), \u200b\u5b83\u4eec\u200b\u6216\u8bb8\u200b\u4f1a\u200b\u4e0e\u200b Nova \u200b\u51b2\u7a81\u200b. \u200b\u5982\u679c\u200b\u4f60\u200b\u662f\u200b\u8fd9\u79cd\u200b\u60c5\u51b5\u200b, \u200b\u4f60\u200b\u53ef\u80fd\u200b\u9700\u8981\u200b\u7981\u7528\u200b Nova \u200b\u7684\u200b\u56fa\u4f53\u200b\u65b9\u5757\u200b.</p>"},{"location":"zh/admin/compatibility/troubleshooting/#_3","title":"\u7981\u7528\u200b\u56fa\u4f53\u200b\u65b9\u5757","text":"<ol> <li>\u200b\u5c06\u200b <code>plugins/Nova/configs/config.yml</code> \u200b\u4e2d\u200b\u7684\u200b <code>use_solid_blocks</code> \u200b\u8bbe\u200b\u4e3a\u200b <code>false</code></li> <li>\u200b\u91cd\u8f7d\u200b\u914d\u7f6e\u200b\u6216\u200b\u91cd\u542f\u200b\u670d\u52a1\u5668\u200b</li> <li>\u200b\u4f7f\u7528\u200b <code>/nova resourcePack create</code> \u200b\u6307\u4ee4\u200b\u91cd\u65b0\u200b\u751f\u6210\u200b\u8d44\u6e90\u200b\u5305\u200b</li> <li>\u200b\u91cd\u542f\u200b\u670d\u52a1\u5668\u200b</li> </ol>"},{"location":"zh/admin/compatibility/troubleshooting/#_4","title":"\u91cd\u65b0\u200b\u542f\u7528\u200b\u56fa\u4f53\u200b\u65b9\u5757","text":"<ol> <li>\u200b\u5c06\u200b <code>plugins/Nova/configs/config.yml</code> \u200b\u4e2d\u200b\u7684\u200b <code>use_solid_blocks</code> \u200b\u8bbe\u200b\u4e3a\u200b <code>true</code></li> <li>\u200b\u91cd\u8f7d\u200b\u914d\u7f6e\u200b\u6216\u200b\u91cd\u542f\u200b\u670d\u52a1\u5668\u200b</li> <li>\u200b\u4f7f\u7528\u200b <code>/nova resourcePack create</code> \u200b\u6307\u4ee4\u200b\u91cd\u65b0\u200b\u751f\u6210\u200b\u8d44\u6e90\u200b\u5305\u200b</li> <li>\u200b\u6267\u884c\u200b <code>/nova debug updateChunkSearchId</code> \u200b\u6307\u4ee4\u200b</li> <li>\u200b\u91cd\u542f\u200b\u670d\u52a1\u5668\u200b</li> </ol>"},{"location":"zh/admin/compatibility/troubleshooting/#_5","title":"\u4e3a\u4ec0\u4e48\u200b\u6700\u597d\u200b\u4e0d\u8981\u200b\u7981\u7528\u200b\u56fa\u4f53\u200b\u65b9\u5757\u200b?","text":"<p>\u200b\u56fa\u4f53\u200b\u65b9\u5757\u200b\u76f8\u6bd4\u200b\u76d4\u7532\u200b\u67b6\u200b\u65b9\u5757\u200b\u66f4\u200b\u8282\u7ea6\u200b\u670d\u52a1\u5668\u8d44\u6e90\u200b, \u200b\u4e14\u200b\u5ba2\u6237\u7aef\u200b\u53ef\u4ee5\u200b\u5c06\u200b\u5b83\u4eec\u200b\u6e32\u67d3\u200b\u4e3a\u200b\u65b9\u5757\u200b\u800c\u200b\u4e0d\u662f\u200b\u5b9e\u4f53\u200b. \u200b\u6240\u4ee5\u200b\u7981\u7528\u200b\u56fa\u4f53\u200b\u65b9\u5757\u200b\u5e94\u8be5\u200b\u88ab\u200b\u5217\u4e3a\u200b\u89e3\u51b3\u95ee\u9898\u200b\u7684\u200b\u6700\u540e\u200b\u65b9\u6848\u200b.</p>"},{"location":"zh/admin/compatibility/utp/","title":"UTP (\u200b\u5373\u5c06\u200b\u517c\u5bb9\u200b)","text":"<p>UTP (Unified Tech Power) \u200b\u662f\u200b\u4e00\u4e2a\u200b\u7531\u200b\u591a\u4e2a\u200b\u9879\u76ee\u200b\u7ef4\u62a4\u8005\u200b\u7ec4\u6210\u200b\u7684\u200b\u56e2\u961f\u200b\u5f00\u53d1\u200b\u7684\u200b\u4e00\u4e2a\u200b\u6a21\u7ec4\u200b\u63d2\u4ef6\u200b\u6846\u67b6\u200b\u3002 \u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b unified \u200b\u5e93\u200b, \u200b\u6211\u4eec\u200b\u8ba1\u5212\u200b\u5f00\u53d1\u200b\u4e00\u4e2a\u200b\u80fd\u91cf\u200b\u3001\u200b\u7269\u54c1\u200b\u548c\u200b\u65b9\u5757\u200b\u7684\u200b\u901a\u7528\u200b\u63a5\u53e3\u200b. \u200b\u4ee5\u540e\u200b, \u200b\u8fd9\u4e2a\u200b\u5e93\u200b\u5c06\u200b\u4f1a\u200b\u63d0\u4f9b\u200b\u5bf9\u200b\u7c98\u6db2\u200b\u79d1\u6280\u200b\u3001Space \u200b\u4ee5\u53ca\u200b\u66f4\u200b\u591a\u200b\u63d2\u4ef6\u200b\u7684\u200b\u517c\u5bb9\u200b\u652f\u6301\u200b.</p> <p>\u200b\u4e0d\u8fc7\u200b\u8bf7\u200b\u6ce8\u610f\u200b Nova \u200b\u76ee\u524d\u200b\u8fd8\u200b\u6ca1\u6709\u200b\u4f7f\u7528\u200b unified \u200b\u5e93\u200b.</p>"},{"location":"zh/admin/recipes/","title":"\u81ea\u5b9a\u4e49\u200b\u914d\u65b9","text":"<p>\u200b\u5728\u200b Nova \u200b\u4e2d\u200b, \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4fee\u6539\u200b\u6240\u6709\u200b\u7684\u200b\u5408\u6210\u200b\u914d\u65b9\u200b\u3002\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u5728\u200b <code>plugins/Nova/recipes</code> \u200b\u76ee\u5f55\u200b\u4e2d\u200b\u627e\u5230\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u3002 \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4fee\u6539\u200b\u6216\u200b\u5220\u9664\u200b\u5df2\u6709\u200b\u7684\u200b\u914d\u65b9\u200b\u6216\u200b\u6dfb\u52a0\u200b\u65b0\u200b\u914d\u65b9\u200b. \u200b\u5982\u679c\u200b\u6211\u4eec\u200b\u66f4\u65b0\u200b\u4e86\u200b\u914d\u65b9\u200b, Nova \u200b\u5c06\u200b\u53ea\u4f1a\u200b\u66f4\u65b0\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u4e2d\u672a\u200b\u88ab\u200b\u4fee\u6539\u200b\u7684\u200b\u90e8\u5206\u200b.</p> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>/nova reload recipes</code> \u200b\u6307\u4ee4\u200b\u6765\u200b\u91cd\u8f7d\u200b\u6240\u6709\u200b\u914d\u65b9\u200b.</p>"},{"location":"zh/admin/recipes/#_2","title":"\u7269\u54c1\u200b\u683c\u5f0f","text":"<p>\u200b\u63d2\u4ef6\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u591a\u79cd\u200b\u65b9\u5f0f\u200b\u6765\u200b\u5728\u200b\u914d\u65b9\u200b\u4e2d\u200b\u6307\u5b9a\u200b\u7269\u54c1\u200b:</p>"},{"location":"zh/admin/recipes/#_3","title":"\u81ea\u5b9a\u4e49\u200b\u7269\u54c1\u200b\u683c\u5f0f","text":"<p>\u200b\u8fd9\u79cd\u200b\u683c\u5f0f\u200b\u5c06\u200b\u5141\u8bb8\u200b\u4f60\u200b\u4f7f\u7528\u200b Nova \u200b\u4e2d\u200b\u7684\u200b\u7269\u54c1\u200b\u6216\u662f\u200b\u5176\u5b83\u200b\u63d2\u4ef6\u200b\u4e2d\u200b\u7684\u200b\u7269\u54c1\u200b. \u200b\u6bd4\u5982\u200b <code>itemsadder:ruby</code> \u200b\u5728\u200b\u6b64\u5904\u200b\u4e5f\u200b\u662f\u200b\u53ef\u7528\u200b\u7684\u200b.</p> \u200b\u81ea\u5b9a\u4e49\u200b\u7269\u54c1\u200b\u683c\u5f0f\u200b<pre><code>\"machines:copper_gear\"\n</code></pre> <p>\u200b\u5bf9\u4e8e\u200b Nova \u200b\u6269\u5c55\u200b\u63d0\u4f9b\u200b\u7684\u200b\u7269\u54c1\u200b, \u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>nova:</code> \u200b\u524d\u7f00\u200b\u6765\u200b\u4ee3\u66ff\u200b\u6269\u5c55\u200b\u7684\u200b\u524d\u7f00\u200b. \u200b\u4f46\u662f\u200b\u8fd9\u200b\u5c06\u200b\u5339\u914d\u200b\u6240\u6709\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b ID \u200b\u7684\u200b\u7269\u54c1\u200b. \u200b\u4f8b\u5982\u200b, \u200b\u5047\u5982\u200b\u6709\u200b\u51e0\u4e2a\u200b\u6269\u5c55\u200b\u90fd\u200b\u5b9a\u4e49\u200b\u4e86\u200b <code>copper_dust</code>, <code>machines:copper_dust</code> \u200b\u5c06\u200b\u53ea\u4f1a\u200b\u5339\u914d\u200b\u673a\u68b0\u200b\u6269\u5c55\u200b\u7684\u200b\u94dc\u7c89\u200b, \u200b\u4f46\u662f\u200b <code>nova:copper_dust</code> \u200b\u5c06\u4f1a\u200b\u5339\u914d\u200b\u6240\u6709\u200b.</p>"},{"location":"zh/admin/recipes/#_4","title":"\u9ad8\u7ea7\u200b\u7269\u54c1\u200b\u683c\u5f0f","text":"<p>\u200b\u8fd9\u79cd\u200b\u683c\u5f0f\u200b\u5c06\u200b\u5141\u8bb8\u200b\u4f60\u200b\u5b8c\u5168\u200b\u81ea\u5b9a\u4e49\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u7269\u54c1\u200b. \u200b\u5982\u679c\u200b\u4f60\u200b\u4f7f\u7528\u200b\u8fd9\u79cd\u200b\u683c\u5f0f\u200b, \u200b\u4f60\u200b\u5c06\u200b\u4e0d\u80fd\u200b\u4f7f\u7528\u200b\u81ea\u5b9a\u4e49\u200b\u547d\u540d\u200b\u7a7a\u95f4\u200b\uff0c\u200b\u6bd4\u5982\u200b <code>nova:</code> \u200b\u56e0\u4e3a\u200b\u8fd9\u79cd\u200b\u68c0\u6d4b\u200b\u65b9\u5f0f\u200b\u5f88\u200b\u4e25\u683c\u200b (\u200b\u53ea\u200b\u5ffd\u7565\u200b\u7269\u54c1\u200b\u540d\u79f0\u200b), \u200b\u4f60\u200b\u53ef\u80fd\u200b\u4f1a\u200b\u9047\u5230\u200b\u4e00\u4e9b\u200b\u9644\u9b54\u200b\u548c\u200b\u7269\u54c1\u200b\u5185\u7f6e\u200b\u6570\u636e\u200b\u4e4b\u7c7b\u200b\u7684\u200b\u95ee\u9898\u200b. \u200b\u8fd9\u200b\u4e0e\u200b Minecraft \u200b\u7684\u200b /give \u200b\u6307\u4ee4\u200b\u7684\u200b\u683c\u5f0f\u200b\u76f8\u540c\u200b. \u200b\u56e0\u4e3a\u200b\u662f\u200b JSON, \u200b\u6240\u4ee5\u200b\u5f15\u53f7\u200b\u9700\u8981\u200b\u88ab\u200b\u8f6c\u4e49\u200b.</p> \u200b\u9ad8\u7ea7\u200b\u7269\u54c1\u200b\u683c\u5f0f\u200b<pre><code>\"minecraft:potion{\\\"Potion\\\": \\\"minecraft:water\\\"}\"\n</code></pre>"},{"location":"zh/admin/recipes/#_5","title":"\u5907\u7528\u200b\u7269\u54c1\u200b &amp; \u200b\u914d\u65b9","text":"<p>\u200b\u5c3d\u7ba1\u200b\u8fd9\u4e2a\u200b\u529f\u80fd\u200b\u662f\u200b\u4e3a\u200b\u5f00\u53d1\u8005\u200b\u51c6\u5907\u200b\u7684\u200b, \u200b\u5907\u7528\u200b\u7269\u54c1\u200b\u548c\u200b\u5907\u7528\u200b\u914d\u65b9\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u88ab\u200b\u670d\u52a1\u5668\u200b\u7ba1\u7406\u5458\u200b\u4f7f\u7528\u200b.</p> <p>\u200b\u4ec0\u4e48\u200b\u662f\u200b\u5907\u7528\u200b\u7269\u54c1\u200b\u548c\u200b\u914d\u65b9\u200b? \u200b\u5f53\u200b\u7269\u54c1\u200b\u6216\u200b\u914d\u65b9\u200b\u52a0\u8f7d\u200b\u5931\u8d25\u200b\u65f6\u200b\uff0c\u200b\u5907\u7528\u200b\u7269\u54c1\u200b\u548c\u200b\u914d\u65b9\u200b\u5c06\u200b\u88ab\u200b\u4f7f\u7528\u200b. \u200b\u5bf9\u4e8e\u200b\u6269\u5c55\u200b\u5f00\u53d1\u8005\u200b\u6765\u8bf4\u200b\uff0c\u200b\u8fd9\u200b\u5c06\u200b\u5141\u8bb8\u200b\u4ed6\u4eec\u200b\u5728\u200b\u9996\u9009\u200b\u914d\u65b9\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u5176\u5b83\u200b\u6269\u5c55\u200b\u7684\u200b\u7269\u54c1\u200b\uff0c\u200b\u4f46\u200b\u5e76\u4e0d\u9700\u8981\u200b\u5c06\u200b\u8be5\u200b\u6269\u5c55\u200b\u8bbe\u4e3a\u200b\u786c\u200b\u4f9d\u8d56\u200b.</p>"},{"location":"zh/admin/recipes/#_6","title":"\u5907\u7528\u200b\u7269\u54c1","text":"<p>\u200b\u5907\u7528\u200b\u7269\u54c1\u200b\u7684\u200b\u5b9a\u4e49\u65b9\u6cd5\u200b\u662f\u200b\u5728\u200b\u9996\u9009\u200b\u7269\u54c1\u200b ID \u200b\u540e\u200b\u6dfb\u52a0\u200b\u4e00\u4e2a\u200b\u5206\u200b\u53f7\u200b\uff0c\u200b\u7136\u540e\u200b\u8f93\u5165\u200b\u5907\u7528\u200b\u7269\u54c1\u200b ID: \u200b\u5907\u7528\u200b\u7269\u54c1\u200b<pre><code>\"nova:basic_fluid_tank; minecraft:bucket\"\n</code></pre> \u200b\u914d\u65b9\u200b\u5728\u200b\u52a0\u8f7d\u200b\u65f6\u200b\u5c06\u200b\u4f1a\u200b\u9996\u5148\u200b\u68c0\u9a8c\u200b <code>nova:basic_fluid_tank</code> \u200b\u662f\u5426\u200b\u5b58\u5728\u200b. \u200b\u5982\u679c\u200b\u4e0d\u200b\u5b58\u5728\u200b, <code>minecraft:bucket</code> \u200b\u5c06\u200b\u88ab\u200b\u4f7f\u7528\u200b.</p>"},{"location":"zh/admin/recipes/#_7","title":"\u5907\u7528\u200b\u914d\u65b9","text":"<p>\u200b\u5907\u7528\u200b\u914d\u65b9\u200b\u4e00\u822c\u200b\u4f1a\u200b\u5728\u200b\u914d\u65b9\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u4e86\u200b\u67d0\u4e2a\u200b\u672a\u200b\u5b89\u88c5\u200b\u6269\u5c55\u200b\u7684\u200b\u7269\u54c1\u200b\u65f6\u200b\u4f7f\u7528\u200b. \u200b\u8981\u200b\u5b9e\u73b0\u200b\u8fd9\u79cd\u200b\u529f\u80fd\u200b, \u200b\u53ea\u7528\u200b\u5728\u200b json \u200b\u7ec4\u4e2d\u200b\u52a0\u5165\u200b\u591a\u4e2a\u200b\u5408\u6210\u200b\u914d\u65b9\u200b:</p> \u200b\u793a\u4f8b\u200b\u5408\u6210\u200b\u914d\u65b9\u200b \u200b\u666e\u901a\u200bfailSilently \u200b\u9009\u9879\u200b recipe.json<pre><code>[\n  {\n    \"result\": \"addon1:result_item\",\n    \"shape\": [\n      \"a  \",\n      \" a \",\n      \"  a\"\n    ],\n    \"ingredients\": {\n      \"a\": \"addon2:example_item\"\n    }\n  },\n  {\n    \"result\": \"addon1:result_item\",\n    \"shape\": [\n      \" a \",\n      \" a \",\n      \" a \"\n    ],\n    \"ingredients\": {\n      \"a\": \"addon1:fallback_item\"\n    }\n  }\n]\n</code></pre> <p>\u200b\u63d0\u793a\u200b</p> <p>\u200b\u5982\u679c\u200b\u9700\u8981\u7684\u8bdd\u200b, \u200b\u4f60\u200b\u751a\u81f3\u200b\u53ef\u4ee5\u200b\u5728\u200b\u914d\u65b9\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u5907\u7528\u200b\u7269\u54c1\u200b.</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u4e0d\u60f3\u200b\u5728\u200b\u63a7\u5236\u53f0\u200b\u4e2d\u200b\u770b\u5230\u200b\u5907\u7528\u200b\u914d\u65b9\u200b\u65e0\u6cd5\u200b\u52a0\u8f7d\u200b\u7684\u200b\u62a5\u9519\u200b\u4fe1\u606f\u200b, \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u8bbe\u7f6e\u200b <code>failSilently</code> \u200b\u4e3a\u200b <code>true</code>.</p> recipe.json<pre><code>{\n  \"failSilently\": true,\n  \"recipes\": [\n    {\n      \"result\": \"addon1:result_item\",\n      \"shape\": [\n        \"a  \",\n        \" a \",\n        \"  a\"\n      ],\n      \"ingredients\": {\n        \"a\": \"addon2:example_item\"\n      }\n    },\n    {\n      \"result\": \"addon1:result_item\",\n      \"shape\": [\n        \" a \",\n        \" a \",\n        \" a \"\n      ],\n      \"ingredients\": {\n        \"a\": \"addon1:fallback_item\"\n      }\n    }\n  ]\n}\n</code></pre> <p>\u200b\u63d0\u793a\u200b</p> <p>\u200b\u5982\u679c\u200b\u9700\u8981\u7684\u8bdd\u200b, \u200b\u4f60\u200b\u751a\u81f3\u200b\u53ef\u4ee5\u200b\u5728\u200b\u914d\u65b9\u200b\u4e2d\u200b\u4f7f\u7528\u200b\u5907\u7528\u200b\u7269\u54c1\u200b.</p>"},{"location":"zh/admin/recipes/machines/","title":"\u673a\u68b0\u200b\u6269\u5c55\u200b\u914d\u65b9","text":""},{"location":"zh/admin/recipes/machines/#_2","title":"\u7c89\u788e\u673a\u200b\u914d\u65b9","text":"<p>\u200b\u4ee5\u4e0b\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b\u4e86\u200b\u5c06\u200b\u94c1\u77ff\u200b\u7c89\u788e\u200b\u4e3a\u200b\u94c1\u7c89\u200b\u7684\u200b\u914d\u65b9\u200b:</p> iron_ore_to_iron_dust.json<pre><code>{\n  \"input\": [\n    \"minecraft:iron_ore\",\n    \"minecraft:deepslate_iron_ore\"\n  ],\n  \"result\": \"machines:iron_dust\",\n  \"amount\": 2,\n  \"time\": 200\n}\n</code></pre>"},{"location":"zh/admin/recipes/machines/#_3","title":"\u673a\u68b0\u200b\u51b2\u538b\u673a\u200b\u914d\u65b9","text":"<p>\u200b\u673a\u68b0\u200b\u51b2\u538b\u673a\u200b\u914d\u65b9\u200b\u5b58\u653e\u200b\u5728\u5b50\u200b\u6587\u4ef6\u5939\u200b <code>gear/</code> \u200b\u548c\u200b <code>plate/</code> \u200b\u4e2d\u200b \u200b\u4e24\u8005\u200b\u4f7f\u7528\u200b\u540c\u6837\u200b\u7684\u200b\u683c\u5f0f\u200b. \u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b\u662f\u200b\u51b2\u538b\u200b\u94c1\u8d28\u200b\u538b\u529b\u200b\u677f\u200b\u7684\u200b\u914d\u65b9\u200b:</p> iron_ingot_to_iron_plate.json<pre><code>{\n  \"input\": \"minecraft:iron_ingot\",\n  \"result\": \"machines:iron_plate\",\n  \"time\": 200\n}\n</code></pre> <p>\u200b\u539f\u6599\u200b\u591a\u6837\u6027\u200b</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u5141\u8bb8\u200b\u73a9\u5bb6\u200b\u4f7f\u7528\u200b\u51e0\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u539f\u6599\u200b\u6765\u200b\u5408\u6210\u200b\u540c\u4e00\u4e2a\u200b\u7269\u54c1\u200b, \u200b\u4f60\u200b\u9700\u8981\u200b\u5728\u200b ingredients \u200b\u7684\u200b\u6bcf\u4e00\u9879\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u591a\u4e2a\u200b\u7528\u200b\u9017\u53f7\u200b\u5206\u5f00\u200b\u7684\u200b\u539f\u6599\u200b.</p>"},{"location":"zh/admin/recipes/machines/#_4","title":"\u6db2\u4f53\u200b\u6ce8\u5165\u200b\u673a\u200b\u914d\u65b9","text":"<p>\u200b\u6db2\u4f53\u200b\u6ce8\u5165\u200b\u673a\u6709\u200b\u4e24\u79cd\u200b\u5de5\u4f5c\u200b\u6a21\u5f0f\u200b: \u200b\u5c06\u200b\u6db2\u4f53\u200b\u6ce8\u5165\u200b\u7269\u54c1\u200b\u6216\u8005\u200b\u5c06\u200b\u6db2\u4f53\u200b\u4ece\u200b\u7269\u54c1\u200b\u4e2d\u200b\u62bd\u53d6\u200b\u51fa\u6765\u200b\u3002 \u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b\u662f\u200b\u5c06\u200b\u6c34\u200b\u6ce8\u5165\u200b\u6876\u200b\u5408\u6210\u200b\u6c34\u6876\u200b\u7684\u200b\u914d\u65b9\u200b:</p> bucket_to_water_bucket.json<pre><code>{\n  \"mode\": \"INSERT\",\n  \"fluid_type\": \"WATER\",\n  \"fluid_amount\": 1000,\n  \"input\": \"minecraft:bucket\",\n  \"result\": \"minecraft:water_bucket\",\n  \"time\": 100\n}\n</code></pre> <p>\u200b\u53c2\u6570\u200b</p> modefluid_type <p>mode \u200b\u53c2\u6570\u200b\u5b9a\u4e49\u200b\u6b64\u200b\u914d\u65b9\u200b\u662f\u200b\u6ce8\u5165\u200b (<code>INSERT</code>) \u200b\u8fd8\u662f\u200b\u62bd\u53d6\u200b (<code>EXTRACT</code>) \u200b\u6db2\u4f53\u200b.</p> <p>\u200b\u76ee\u524d\u200b\u53ea\u200b\u652f\u6301\u200b\u6c34\u200b (<code>WATER</code>) \u200b\u548c\u200b\u5ca9\u6d46\u200b (<code>LAVA</code>). \u200b\u6682\u200b\u4e0d\u200b\u652f\u6301\u200b\u5176\u5b83\u200b\u63d2\u4ef6\u200b\u7684\u200b\u81ea\u5b9a\u4e49\u200b\u6d41\u4f53\u200b.</p> <p>\u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b\u662f\u200b\u5c06\u200b\u6c34\u200b\u4ece\u200b\u6c34\u74f6\u200b\u4e2d\u200b\u62bd\u53d6\u200b\u51fa\u6765\u200b\u4ece\u800c\u200b\u5408\u6210\u200b\u73bb\u7483\u74f6\u200b\u7684\u200b\u914d\u65b9\u200b:</p> potion_to_glass_bottle.json<pre><code>{\n  \"mode\": \"EXTRACT\",\n  \"fluid_type\": \"WATER\",\n  \"fluid_amount\": 300,\n  \"input\": \"minecraft:potion{\\\"Potion\\\": \\\"minecraft:water\\\"}\",\n  \"result\": \"minecraft:glass_bottle\",\n  \"time\": 30\n}\n</code></pre> <p>\u200b\u81ea\u5b9a\u4e49\u200b\u7269\u54c1\u200b\u683c\u5f0f\u200b</p> <p>\u200b\u56e0\u4e3a\u200b\u6c34\u74f6\u200b\u5e76\u200b\u6ca1\u6709\u200b\u5bf9\u5e94\u200b\u7684\u200b ID, \u200b\u4f60\u200b\u9700\u8981\u200b\u4f7f\u7528\u200b\u9ad8\u7ea7\u200b\u7269\u54c1\u200b\u683c\u5f0f\u200b\u6765\u200b\u5b9a\u4e49\u200b\u5b83\u200b.</p>"},{"location":"zh/admin/recipes/machines/#_5","title":"\u7535\u529b\u200b\u917f\u9020\u200b\u53f0\u200b\u914d\u65b9","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u8fd9\u79cd\u200b\u914d\u65b9\u200b\u6765\u200b\u914d\u7f6e\u200b\u7535\u529b\u200b\u917f\u9020\u200b\u53f0\u200b\u53ef\u4ee5\u200b\u917f\u9020\u200b\u7684\u200b\u836f\u6c34\u200b\u7c7b\u578b\u200b. \u200b\u4f60\u200b\u540c\u65f6\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u914d\u7f6e\u200b\u5b83\u4eec\u200b\u7684\u200b\u539f\u6599\u200b\u3001\u200b\u6301\u7eed\u65f6\u95f4\u200b\u53ca\u200b\u500d\u7387\u200b\u3001\u200b\u836f\u6c34\u200b\u7b49\u7ea7\u200b\u4ee5\u53ca\u200b\u65f6\u957f\u200b\u548c\u200b\u7b49\u7ea7\u200b\u9650\u5236\u200b.</p> <p>\u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b\u5c06\u200b\u4e3a\u200b\u7535\u529b\u200b\u917f\u9020\u200b\u53f0\u200b\u6dfb\u52a0\u200b\u5e78\u8fd0\u200b\u6548\u679c\u200b\u914d\u65b9\u200b:</p> luck.json<pre><code>{\n  \"result\": \"minecraft:luck\",\n  \"default_time\": 1800,\n  \"redstone_multiplier\": 2,\n  \"glowstone_multiplier\": 0.5,\n  \"max_duration_level\": 5,\n  \"max_amplifier_level\": 5,\n  \"inputs\": [\n    \"minecraft:nether_wart\",\n    \"minecraft:grass_block\"\n  ]\n}\n</code></pre> <p>\u200b\u53c2\u6570\u200b</p> default_timeredstone_multiplierglowstone_multipliermax_duration_levelmax_amplifier_level <p>\u200b\u8fd9\u79cd\u200b\u836f\u6c34\u200b\u6548\u679c\u200b\u7684\u200b\u9ed8\u8ba4\u200b\u6301\u7eed\u65f6\u95f4\u200b. \u200b\u5355\u4f4d\u200b\u662f\u200b\u523b\u200b, 20 \u200b\u523b\u200b = 1 \u200b\u79d2\u200b. \u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u5c31\u662f\u200b 1 \u200b\u5206\u200b 30 \u200b\u79d2\u200b</p> <p>\u200b\u5f53\u65f6\u200b\u957f\u200b\u7b49\u7ea7\u200b (\u200b\u4e00\u4e2a\u200b\u7ea2\u77f3\u200b) \u200b\u589e\u52a0\u200b\u65f6\u200b\uff0c\u200b\u6301\u7eed\u65f6\u95f4\u200b\u7684\u200b\u500d\u7387\u200b. \u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u914d\u7f6e\u200b\u4e2d\u200b\u5c31\u662f\u200b\u65f6\u200b\u957f\u200b\u7b49\u7ea7\u200b 2 \u200b\u7684\u200b\u5e78\u8fd0\u200b\u836f\u6c34\u200b\u7684\u200b\u6301\u7eed\u65f6\u95f4\u200b\u5c06\u200b\u662f\u200b 3 \u200b\u5206\u949f\u200b, \u200b\u65f6\u200b\u957f\u200b\u7b49\u7ea7\u200b 3 \u200b\u4e3a\u200b 4 \u200b\u5206\u200b 30 \u200b\u79d2\u200b\uff0c\u200b\u4ee5\u6b64\u7c7b\u63a8\u200b.</p> <p>\u200b\u5728\u200b Minecraft \u200b\u4e2d\u200b, \u200b\u5f53\u5411\u200b\u836f\u6c34\u200b\u4e2d\u200b\u6dfb\u52a0\u200b\u8367\u77f3\u6765\u200b\u589e\u52a0\u200b\u836f\u6c34\u200b\u7b49\u7ea7\u200b\u65f6\u200b, \u200b\u836f\u6c34\u200b\u7684\u200b\u6301\u7eed\u65f6\u95f4\u200b\u5c06\u200b\u51cf\u5c11\u200b. \u200b\u8fd9\u200b\u5728\u200b\u500d\u7387\u200b\u4e2d\u200b\u6709\u6240\u200b\u4f53\u73b0\u200b. \u200b\u5728\u200b\u4e0a\u9762\u200b\u7684\u200b\u914d\u7f6e\u200b\u4e2d\u200b\uff0c\u200b\u7b49\u7ea7\u200b 2 \u200b\u7684\u200b\u836f\u6c34\u200b\u5c06\u200b\u53ea\u6709\u200b 0:45 \u200b\u7684\u200b\u6301\u7eed\u65f6\u95f4\u200b, \u200b\u7b49\u7ea7\u200b 3 \u200b\u5219\u200b\u53ea\u6709\u200b 0:11\uff0c\u200b\u4ee5\u6b64\u7c7b\u63a8\u200b.</p> <p>\u200b\u6b64\u200b\u836f\u6c34\u200b\u6548\u679c\u200b\u5141\u8bb8\u200b\u7684\u200b\u6700\u5927\u200b\u65f6\u200b\u957f\u200b\u7b49\u7ea7\u200b\u3002\u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b, \u200b\u4f60\u200b\u4e0d\u80fd\u200b\u8ba9\u200b\u65f6\u957f\u200b\u7b49\u7ea7\u200b\u548c\u200b\u836f\u6c34\u200b\u7b49\u7ea7\u200b\u540c\u65f6\u200b\u589e\u957f\u200b, \u200b\u4f46\u662f\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u7535\u529b\u200b\u917f\u9020\u200b\u53f0\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u6765\u200b\u5b9e\u73b0\u200b\u8fd9\u79cd\u200b\u8bbe\u7f6e\u200b.</p> <p>\u200b\u6b64\u200b\u836f\u6c34\u200b\u6548\u679c\u200b\u5141\u8bb8\u200b\u7684\u200b\u6700\u5927\u200b\u836f\u6c34\u200b\u7b49\u7ea7\u200b. \u200b\u9ed8\u8ba4\u200b\u60c5\u51b5\u200b\u4e0b\u200b, \u200b\u4f60\u200b\u4e0d\u80fd\u200b\u8ba9\u200b\u65f6\u957f\u200b\u7b49\u7ea7\u200b\u548c\u200b\u836f\u6c34\u200b\u7b49\u7ea7\u200b\u540c\u65f6\u200b\u589e\u957f\u200b, \u200b\u4f46\u662f\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4fee\u6539\u200b\u7535\u529b\u200b\u917f\u9020\u200b\u53f0\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u6765\u200b\u5b9e\u73b0\u200b\u8fd9\u79cd\u200b\u8bbe\u7f6e\u200b.</p> <p>\u200b\u539f\u6599\u200b\u591a\u6837\u6027\u200b</p> <p>\u200b\u5728\u200b\u8fd9\u79cd\u200b\u914d\u65b9\u200b\u7c7b\u578b\u200b\u4e2d\u200b, \u200b\u4e0d\u200b\u652f\u6301\u200b\u539f\u6599\u200b\u7684\u200b\u591a\u6837\u6027\u200b.</p>"},{"location":"zh/admin/recipes/vanilla/","title":"\u539f\u7248\u200b\u7c7b\u578b\u200b\u914d\u65b9","text":""},{"location":"zh/admin/recipes/vanilla/#_2","title":"\u6709\u5e8f\u200b\u914d\u65b9","text":"<p>\u200b\u6709\u5e8f\u200b\u914d\u65b9\u200b\u662f\u200b\u5728\u200b\u5de5\u4f5c\u53f0\u200b\u4e2d\u200b\u8fdb\u884c\u200b\u4e00\u5b9a\u200b\u7ed3\u6784\u200b\u6392\u5217\u200b\u7684\u200b\u914d\u65b9\u200b\u5f62\u5f0f\u200b. \u200b\u4f8b\u5982\u200b\u4e0b\u9762\u200b\u662f\u200b\u9ad8\u7ea7\u200b\u7f06\u7ebf\u200b\u7684\u200b\u5408\u6210\u200b\u914d\u65b9\u200b\u914d\u7f6e\u200b:</p> advanced_cable.json<pre><code>{\n  \"result\": \"logistics:advanced_cable\",\n  \"amount\": 3,\n  \"shape\": [\n    \"ggg\",\n    \"ccc\",\n    \"ggg\"\n  ],\n  \"ingredients\": {\n    \"g\": \"minecraft:glowstone_dust\",\n    \"c\": \"logistics:basic_cable\"\n  }\n}\n</code></pre> <p>\u200b\u53c2\u6570\u200b</p> shapeamount <p>shape \u200b\u5b9a\u4e49\u200b\u4e86\u200b\u914d\u65b9\u200b\u7684\u200b\u6392\u5217\u200b\u7ed3\u6784\u200b. \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u628a\u200b\u5b83\u200b\u770b\u4f5c\u200b\u4e00\u4e2a\u200b\u5de5\u4f5c\u53f0\u200b. \u200b\u5728\u200b\u8fd9\u91cc\u200b\u4f7f\u7528\u200b\u7684\u200b\u5b57\u6bcd\u200b\u5fc5\u987b\u200b\u5728\u200b <code>ingredients</code> \u200b\u91cc\u200b\u8fdb\u884c\u200b\u5b9a\u4e49\u200b. \u200b\u7528\u200b\u7a7a\u683c\u200b\u6765\u200b\u4ee3\u8868\u200b\u7a7a\u4f4d\u200b.</p> <p>\u200b\u5355\u6b21\u200b\u5408\u6210\u200b\u51fa\u200b\u7684\u200b\u6570\u91cf\u200b, \u200b\u5982\u200b\u4e0d\u200b\u8bbe\u7f6e\u200b\u5c06\u200b\u9ed8\u8ba4\u200b\u4e3a\u200b 1.</p> <p>\u200b\u539f\u6599\u200b\u591a\u6837\u6027\u200b</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u5141\u8bb8\u200b\u73a9\u5bb6\u200b\u4f7f\u7528\u200b\u51e0\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u539f\u6599\u200b\u6765\u200b\u5408\u6210\u200b\u540c\u4e00\u4e2a\u200b\u7269\u54c1\u200b, \u200b\u4f60\u200b\u9700\u8981\u200b\u5728\u200b ingredients \u200b\u7684\u200b\u6bcf\u4e00\u9879\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u591a\u4e2a\u200b\u7528\u200b\u9017\u53f7\u200b\u5206\u5f00\u200b\u7684\u200b\u539f\u6599\u200b.</p>"},{"location":"zh/admin/recipes/vanilla/#_3","title":"\u65e0\u5e8f\u200b\u914d\u65b9","text":"<p>\u200b\u65e0\u5e8f\u200b\u914d\u65b9\u200b\u662f\u200b\u7528\u200b\u5728\u200b\u5de5\u4f5c\u53f0\u200b\u4e2d\u4e14\u200b\u65e0\u9700\u200b\u6839\u636e\u200b\u67d0\u79cd\u200b\u7ed3\u6784\u200b\u6392\u5217\u200b\u7684\u200b\u914d\u65b9\u200b. \u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b\u4e86\u200b\u57fa\u7840\u200b\u7269\u54c1\u200b\u7b5b\u9009\u200b\u5668\u200b\u7684\u200b\u5408\u6210\u200b\u914d\u65b9\u200b:</p> basic_item_filter.json<pre><code>{\n  \"result\": \"logistics:basic_item_filter\",\n  \"ingredients\": {\n    \"minecraft:hopper\": 1,\n    \"minecraft:paper\": 1\n  }\n}\n</code></pre> <p>\u200b\u539f\u6599\u200b\u6570\u91cf\u200b</p> <p>\u200b\u539f\u6599\u200b ID \u200b\u540e\u200b\u7684\u200b\u6570\u5b57\u200b\u4ee3\u8868\u200b\u6240\u200b\u9700\u200b\u7684\u200b\u539f\u6599\u200b\u6570\u91cf\u200b.</p> <p>\u200b\u548c\u200b\u6709\u5e8f\u200b\u914d\u65b9\u200b\u4e00\u6837\u200b\uff0c\u200b\u65e0\u5e8f\u200b\u914d\u65b9\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u540c\u65f6\u200b\u8bbe\u7f6e\u200b\u591a\u79cd\u200b\u539f\u6599\u200b. \u200b\u4f8b\u5982\u200b\uff0c\u200b\u5728\u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b\uff0c\u200b\u73a9\u5bb6\u200b\u5c06\u200b\u65e2\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u7eb8\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u94c1\u8d28\u200b\u538b\u529b\u200b\u677f\u6765\u200b\u5408\u6210\u200b\u4e00\u4e2a\u200b\u57fa\u7840\u200b\u7269\u54c1\u200b\u7b5b\u9009\u200b\u5668\u200b.</p> basic_item_filter.json<pre><code>{\n  \"result\": \"logistics:basic_item_filter\",\n  \"ingredients\": [\n    {\n      \"item\": \"minecraft:hopper\",\n      \"amount\": 1\n    },\n    {\n      \"items\": [\n        \"nova:iron_plate\",\n        \"minecraft:paper\"\n      ],\n      \"amount\": 1\n    }\n  ]\n}\n</code></pre>"},{"location":"zh/admin/recipes/vanilla/#_4","title":"\u70e7\u70bc\u200b\u914d\u65b9","text":"<p>\u200b\u4e0b\u9762\u200b\u7684\u200b\u793a\u4f8b\u200b\u914d\u7f6e\u200b\u4e86\u200b\u5c06\u200b\u94c1\u7c89\u200b\u70e7\u70bc\u200b\u4e3a\u200b\u94c1\u952d\u200b\u7684\u200b\u914d\u65b9\u200b:</p> iron_dust_to_iron_ingot.json<pre><code>{\n  \"result\": \"minecraft:iron_ingot\",\n  \"input\": \"machines:iron_dust\",\n  \"experience\": 1.0,\n  \"time\": 100\n}\n</code></pre> <p>\u200b\u539f\u6599\u200b\u591a\u6837\u6027\u200b</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u60f3\u200b\u5141\u8bb8\u200b\u73a9\u5bb6\u200b\u4f7f\u7528\u200b\u51e0\u79cd\u200b\u4e0d\u540c\u200b\u7684\u200b\u539f\u6599\u200b\u6765\u200b\u5408\u6210\u200b\u540c\u4e00\u4e2a\u200b\u7269\u54c1\u200b, \u200b\u4f60\u200b\u9700\u8981\u200b\u5728\u200b ingredients \u200b\u7684\u200b\u6bcf\u4e00\u9879\u200b\u4e2d\u200b\u8bbe\u7f6e\u200b\u591a\u4e2a\u200b\u7528\u200b\u9017\u53f7\u200b\u5206\u5f00\u200b\u7684\u200b\u539f\u6599\u200b.</p> <p>time</p> <p>\u200b\u70e7\u70bc\u200b\u9700\u8981\u200b\u7684\u200b\u65f6\u95f4\u200b\uff0c\u200b\u5355\u4f4d\u200b\u662f\u200b\u523b\u200b. 1 \u200b\u79d2\u200b\u662f\u200b 20 \u200b\u523b\u200b.</p>"},{"location":"zh/api/","title":"\u5165\u95e8","text":"<p>\u200b\u8981\u200b\u4f7f\u7528\u200b Nova API \u200b\u9996\u5148\u200b\u4f60\u200b\u9700\u8981\u200b\u5c06\u200b xenondevs maven \u200b\u4ed3\u5e93\u200b\u6dfb\u52a0\u200b\u5230\u200b\u4f60\u200b\u7684\u200b\u6784\u5efa\u200b\u914d\u7f6e\u200b\u4e2d\u200b.</p> MavenGradle GroovyGradle Kotlin <pre><code>&lt;repository&gt;\n    &lt;id&gt;xenondevs&lt;/id&gt;\n    &lt;url&gt;https://repo.xenondevs.xyz/releases&lt;/url&gt;\n&lt;/repository&gt;\n</code></pre> <pre><code>maven {\n    url 'https://repo.xenondevs.xyz/releases'\n}\n</code></pre> <pre><code>maven(\"https://repo.xenondevs.xyz/releases\")\n</code></pre> <p>\u200b\u7136\u540e\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u6dfb\u52a0\u200b API \u200b\u4f9d\u8d56\u200b\u5230\u200b\u4f60\u200b\u7684\u200b\u6784\u5efa\u200b\u914d\u7f6e\u200b\u4e2d\u200b:</p> MavenGradle GroovyGradle Kotlin <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;xyz.xenondevs.nova&lt;/groupId&gt;\n    &lt;artifactId&gt;nova-api&lt;/artifactId&gt;\n    &lt;version&gt;VERSION&lt;/version&gt;\n    &lt;scope&gt;provided&lt;/scope&gt;\n&lt;/dependency&gt;\n</code></pre> <pre><code>implementation \"xyz.xenondevs.nova:nova-api:VERSION\"\n</code></pre> <pre><code>implementation(\"xyz.xenondevs.nova:nova-api:VERSION\")\n</code></pre> <p>\u200b\u8981\u200b\u83b7\u53d6\u200b Nova \u200b\u5b9e\u4f8b\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>Nova</code> \u200b\u7c7b\u200b:</p> KotlinJava <pre><code>val nova = Nova // (1)!\n</code></pre> <ol> <li><code>Nova</code> \u200b\u662f\u200b\u4e00\u4e2a\u200b\u63a5\u53e3\u200b\u4f46\u662f\u200b\u4f34\u968f\u200b\u5bf9\u8c61\u200b\u5219\u200b\u4ea4\u7ed9\u200b <code>Bukkit.getPluginManager().getPlugin(\"Nova\") as Nova</code>.</li> </ol> <pre><code>Nova nova = Nova.getNova();\n</code></pre> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u6b64\u200b\u5b9e\u4f8b\u200b\u6765\u200b\u4f7f\u7528\u200b\u5176\u5b83\u200b\u529f\u80fd\u200b:</p> <ul> <li>\u200b\u6dfb\u52a0\u200b\u81ea\u5b9a\u4e49\u200b\u4fdd\u62a4\u200b\u68c0\u6d4b\u200b</li> <li>\u200b\u83b7\u53d6\u200b <code>NovaItems</code></li> <li>\u200b\u83b7\u53d6\u200b <code>NovaBlocks</code></li> <li>\u200b\u7ba1\u7406\u200b <code>NovaBlocks</code> \u200b\u548c\u200b <code>NovaBlockStates</code></li> <li>\u200b\u7ba1\u7406\u200b <code>TileEntities</code></li> <li>\u200b\u7ba1\u7406\u200b WAILA overlay</li> </ul>"},{"location":"zh/api/blocks/blockmanager/","title":"\u65b9\u5757\u200b\u7ba1\u7406\u5668","text":"<p>\u200b\u65b9\u5757\u200b\u7ba1\u7406\u5668\u200b\u5141\u8bb8\u200b\u4f60\u200b\u4e0e\u200b Nova \u200b\u7684\u200b\u65b9\u5757\u200b\u4ea4\u4e92\u200b. \u200b\u4f60\u200b\u53ef\u4ee5\u200b\u653e\u7f6e\u200b/\u200b\u7834\u574f\u200b/\u200b\u6361\u8d77\u200b\u6389\u843d\u200b\u7269\u7b49\u200b.</p> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e4b\u524d\u200b\u83b7\u53d6\u200b\u7684\u200b Nova \u200b\u5b9e\u4f8b\u200b\u6765\u200b\u83b7\u5f97\u200b <code>BlockManager</code>.</p> KotlinJava <pre><code>val blockManager = Nova.blockManager\n</code></pre> <pre><code>BlockManager blockManager = nova.getBlockManager(); // (1)!\n</code></pre> <ol> <li>\"nova\" \u200b\u662f\u200b\u4e4b\u524d\u200b\u83b7\u53d6\u200b\u7684\u200b Nova \u200b\u5b9e\u4f8b\u200b, \u200b\u9ed8\u8ba4\u200b\u5b58\u50a8\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5b57\u6bb5\u200b\u6216\u200b\u53d8\u91cf\u200b\u4e2d\u200b.\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b <code>Nova.getNova().getMaterialRegistry()</code></li> </ol>"},{"location":"zh/api/blocks/blockmanager/#_2","title":"\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u65b9\u5757\u200b\u7684\u200b\u72b6\u6001","text":"<p>\u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u65b9\u5757\u200b\u7ba1\u7406\u5668\u200b\u6765\u200b\u83b7\u5f97\u200b\u67d0\u4e00\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u65b9\u5757\u200b\u72b6\u6001\u200b.</p> KotlinJava <pre><code>val blockState = blockManager.getBlock(location) ?: return\n</code></pre> <pre><code>NovaBlockState blockState = blockManager.getBlock(location);\nif (blockState == null)\n    return;\n</code></pre> <p>\u200b\u4f60\u200b\u8fd8\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b <code>BlockManager.hasBlock(Location)</code> \u200b\u6765\u200b\u68c0\u6d4b\u200b\u67d0\u4e00\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u65b9\u5757\u200b\u662f\u5426\u662f\u200b Nova \u200b\u7684\u200b\u65b9\u5757\u200b\u3002</p>"},{"location":"zh/api/blocks/blockmanager/#block-type","title":"Block Type","text":"<p><code>NovaBlock</code> \u200b\u662f\u200b\u4e00\u79cd\u200b\u65b9\u5757\u200b\u7c7b\u578b\u200b, \u200b\u7c7b\u4f3c\u200b Bukkit \u200b\u4e2d\u200b\u7684\u200b <code>Material</code>, \u200b\u4f46\u662f\u200b\u53ea\u80fd\u200b\u7528\u4e8e\u200b\u65b9\u5757\u200b. \u200b\u8981\u200b\u68c0\u7d22\u200b\u7279\u5b9a\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u65b9\u5757\u200b\u7c7b\u578b\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u6267\u884c\u200b\u4ee5\u4e0b\u200b\u64cd\u4f5c\u200b\uff1a</p> KotlinJava <pre><code>val blockState = blockManager.getBlock(location) ?: return\nval block = blockState.block\n</code></pre> <pre><code>NovaBlockState blockState = blockManager.getBlock(location);\nif (blockState == null)\n    return;\nNovaBlock block = blockState.getBlock();\n</code></pre>"},{"location":"zh/api/blocks/blockmanager/#tile-entity","title":"Tile Entity","text":"<p>\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b \u200b\u4f7f\u7528\u200b <code>NovaTileEntityState</code> \u200b\u7c7b\u200b\uff0c\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u8be5\u7c7b\u200b\u6765\u200b\u83b7\u53d6\u200b\u65b9\u5757\u200b\u7684\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u5b9e\u4f8b\u200b.</p> KotlinJava <pre><code>val blockState = blockManager.getBlock(location) ?: return\nif (blockState is NovaTileEntityState) {\n    val tileEntity = blockState.tileEntity\n}\n</code></pre> <pre><code>NovaBlockState blockState = blockManager.getBlock(location);\nif (blockState == null)\n    return;\nif (blockState instanceof NovaTileEntityState tileEntityState) {\n    TileEntity tileEntity = tileEntityState.getTileEntity();\n}\n</code></pre>"},{"location":"zh/api/blocks/blockmanager/#_3","title":"\u653e\u7f6e\u200b\u65b9\u5757","text":"<p>\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b <code>NovaBlock</code> \u200b\u6765\u200b\u5728\u200b\u6307\u5b9a\u200b\u4f4d\u7f6e\u200b\u653e\u7f6e\u200b nova \u200b\u65b9\u5757\u200b.</p> KotlinJava <pre><code>val block = blockRegistry.get(\"machines:pulverizer\")\nblockManager.placeBlock(\n    location, // (1)!\n    block, // (2)!\n    player, // (3)!\n    true // (4)!\n)\n</code></pre> <ol> <li>\u200b\u653e\u7f6e\u200b\u65b9\u5757\u200b\u7684\u200b\u4f4d\u7f6e\u200b.</li> <li>\u200b\u653e\u7f6e\u200b\u7684\u200b\u65b9\u5757\u200b\u7c7b\u578b\u200b.</li> <li>\u200b\u653e\u7f6e\u200b\u65b9\u5757\u200b\u7684\u200b\u76ee\u6807\u200b. \u200b\u76ee\u6807\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u662f\u200b\u73a9\u5bb6\u200b, \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u6216\u200b\u5176\u5b83\u200b\u7c7b\u4f3c\u200b\u5b9e\u4f53\u200b.</li> <li>\u200b\u662f\u5426\u200b\u64ad\u653e\u200b\u65b9\u5757\u200b\u653e\u7f6e\u200b\u97f3\u6548\u200b.</li> </ol> <pre><code>NovaBlock block = blockRegistry.get(\"machines:pulverizer\");\nblockManager.placeBlock(\n    location, // (1)!\n    block, // (2)!\n    player, // (3)!\n    true // (4)!\n);\n</code></pre> <ol> <li>\u200b\u653e\u7f6e\u200b\u65b9\u5757\u200b\u7684\u200b\u4f4d\u7f6e\u200b.</li> <li>\u200b\u653e\u7f6e\u200b\u7684\u200b\u65b9\u5757\u200b\u7c7b\u578b\u200b.</li> <li>\u200b\u653e\u7f6e\u200b\u65b9\u5757\u200b\u7684\u200b\u76ee\u6807\u200b. \u200b\u76ee\u6807\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u662f\u200b\u73a9\u5bb6\u200b, \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u6216\u200b\u5176\u5b83\u200b\u7c7b\u4f3c\u200b\u5b9e\u4f53\u200b.</li> <li>\u200b\u662f\u5426\u200b\u64ad\u653e\u200b\u65b9\u5757\u200b\u653e\u7f6e\u200b\u97f3\u6548\u200b.</li> </ol> <p>\u200b\u63d0\u793a\u200b</p> <p><code>BlockManager.placeBlock</code> \u200b\u51fd\u6570\u200b\u6709\u200b\u4e00\u4e9b\u200b\u9700\u8981\u200b\u66f4\u200b\u5c11\u200b\u5b9e\u53c2\u200b\u7684\u200b\u8986\u76d6\u200b.</p>"},{"location":"zh/api/blocks/blockmanager/#_4","title":"\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u65b9\u5757\u200b\u7684\u200b\u6389\u843d\u200b\u7269","text":"<p>\u200b\u8981\u200b\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u65b9\u5757\u200b\u7684\u200b\u6389\u843d\u200b\u7269\u200b, \u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>BlockManager.getDrops</code> \u200b\u51fd\u6570\u200b. \u200b\u8be5\u200b\u51fd\u6570\u200b\u540c\u6837\u200b\u6709\u200b\u4e00\u4e9b\u200b\u9700\u8981\u200b\u66f4\u200b\u5c11\u200b\u5b9e\u53c2\u200b\u7684\u200b\u8986\u76d6\u200b.</p> <p>\u200b\u6ce8\u610f\u200b</p> <p>\u200b\u5982\u679c\u200b\u6240\u200b\u7ed9\u200b\u7684\u200b\u4f4d\u7f6e\u200b\u6ca1\u6709\u200b Nova \u200b\u65b9\u5757\u200b\u6b64\u200b\u51fd\u6570\u200b\u5c06\u200b\u8fd4\u56de\u200b <code>null</code>.</p> KotlinJava <pre><code>val drops = blockManager.getDrops(\n    location, // (1)!\n    player, // (2)!\n    tool // (3)!\n)\n</code></pre> <ol> <li>\u200b\u65b9\u5757\u200b\u7684\u200b\u4f4d\u7f6e\u200b.</li> <li>\u200b\u76ee\u6807\u200b\u5b9e\u4f53\u200b, \u200b\u76ee\u6807\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u662f\u200b\u73a9\u5bb6\u200b, \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u6216\u200b\u5176\u5b83\u200b\u7c7b\u4f3c\u200b\u5b9e\u4f53\u200b.</li> <li>\u200b\u7834\u574f\u200b\u65b9\u5757\u200b\u6240\u7528\u200b\u7684\u200b\u5de5\u5177\u200b.</li> </ol> <pre><code>List&lt;ItemStack&gt; drops = blockManager.getDrops(\n    location, // (1)!\n    player, // (2)!\n    tool // (3)!\n);\n</code></pre> <ol> <li>\u200b\u65b9\u5757\u200b\u7684\u200b\u4f4d\u7f6e\u200b.</li> <li>\u200b\u76ee\u6807\u200b\u5b9e\u4f53\u200b, \u200b\u76ee\u6807\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u662f\u200b\u73a9\u5bb6\u200b, \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u6216\u200b\u5176\u5b83\u200b\u7c7b\u4f3c\u200b\u5b9e\u4f53\u200b.</li> <li>\u200b\u7834\u574f\u200b\u65b9\u5757\u200b\u6240\u7528\u200b\u7684\u200b\u5de5\u5177\u200b.</li> </ol>"},{"location":"zh/api/blocks/blockmanager/#_5","title":"\u79fb\u9664\u200b\u4e00\u4e2a\u200b\u65b9\u5757","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>BlockManager.removeBlock</code> \u200b\u51fd\u6570\u200b\u6765\u200b\u79fb\u9664\u200b\u67d0\u4e2a\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u65b9\u5757\u200b. \u200b\u8be5\u200b\u51fd\u6570\u200b\u5c06\u4f1a\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b <code>boolean</code>, \u200b\u8be5\u200b\u5e03\u5c14\u503c\u200b\u4ee3\u8868\u200b\u6240\u200b\u7ed9\u200b\u4f4d\u7f6e\u200b\u662f\u5426\u200b\u6709\u200b\u65b9\u5757\u200b\u6216\u662f\u200b\u6240\u200b\u7ed9\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u65b9\u5757\u200b\u662f\u5426\u200b\u6210\u529f\u200b\u79fb\u9664\u200b.</p> KotlinJava <pre><code>blockManager.removeBlock(\n    location, // (1)!\n    player, // (2)!\n    true, // (3)!\n    true // (4)!\n)\n</code></pre> <ol> <li>\u200b\u65b9\u5757\u200b\u7684\u200b\u4f4d\u7f6e\u200b.</li> <li>\u200b\u76ee\u6807\u200b\u5b9e\u4f53\u200b, \u200b\u76ee\u6807\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u662f\u200b\u73a9\u5bb6\u200b, \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u6216\u200b\u5176\u5b83\u200b\u7c7b\u4f3c\u200b\u5b9e\u4f53\u200b.</li> <li>\u200b\u65b9\u5757\u200b\u79fb\u9664\u200b\u65f6\u200b\u662f\u5426\u200b\u64ad\u653e\u200b\u97f3\u6548\u200b.</li> <li>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65b9\u5757\u200b\u7834\u574f\u200b\u7684\u200b\u7c92\u5b50\u200b\u6548\u679c\u200b.</li> </ol> <pre><code>blockManager.removeBlock(\n    location, // (1)!\n    player, // (2)!\n    true, // (3)!\n    true // (4)!\n);\n</code></pre> <ol> <li>\u200b\u65b9\u5757\u200b\u7684\u200b\u4f4d\u7f6e\u200b.</li> <li>\u200b\u76ee\u6807\u200b\u5b9e\u4f53\u200b, \u200b\u76ee\u6807\u200b\u4e0d\u200b\u4e00\u5b9a\u200b\u662f\u200b\u73a9\u5bb6\u200b, \u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u662f\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u6216\u200b\u5176\u5b83\u200b\u7c7b\u4f3c\u200b\u5b9e\u4f53\u200b.</li> <li>\u200b\u65b9\u5757\u200b\u79fb\u9664\u200b\u65f6\u200b\u662f\u5426\u200b\u64ad\u653e\u200b\u97f3\u6548\u200b.</li> <li>\u200b\u662f\u5426\u200b\u663e\u793a\u200b\u65b9\u5757\u200b\u7834\u574f\u200b\u7684\u200b\u7c92\u5b50\u200b\u6548\u679c\u200b.</li> </ol>"},{"location":"zh/api/blocks/blockregistry/","title":"\u65b9\u5757\u200b\u6ce8\u518c\u8868","text":"<p>\u200b\u65b9\u5757\u200b\u6ce8\u518c\u8868\u200b\u5305\u542b\u200b\u4e86\u200b\u6240\u6709\u200b\u5df2\u200b\u58f0\u660e\u200b\u7684\u200b\u65b9\u5757\u200b\u7c7b\u578b\u200b.</p> <p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u4e4b\u524d\u200b\u83b7\u53d6\u200b\u7684\u200b Nova \u200b\u5b9e\u4f8b\u200b \u200b\u6765\u200b\u83b7\u5f97\u200b <code>BlockRegistry</code>.</p> KotlinJava <pre><code>val blockRegistry = Nova.blockRegistry\n</code></pre> <pre><code>BlockRegistry blockRegistry = Nova.getNova().getBlockRegistry();\n</code></pre> <p>\u200b\u7136\u540e\u200b, \u200b\u901a\u8fc7\u200b ID \u200b\u6765\u200b\u68c0\u7d22\u200b\u65b9\u5757\u200b\u7c7b\u578b\u200b:</p> KotlinJava <pre><code>val block = blockRegistry.getBlock(\"machines:pulverizer\")\n</code></pre> <pre><code>NovaBlock block = blockRegistry.getBlock(\"machines:pulverizer\");\n</code></pre>"},{"location":"zh/api/events/novaloaddataevent/","title":"NovaLoadDataEvent","text":"<p><code>NovaLoadDataEvent</code> \u200b\u4e8b\u4ef6\u200b\u4f1a\u200b\u5728\u200b Nova \u200b\u5b8c\u6210\u200b\u521d\u59cb\u5316\u200b\u65f6\u200b\u88ab\u200b\u8c03\u7528\u200b.</p>"},{"location":"zh/api/events/tileentitybreakblockevent/","title":"TileEntityBreakBlockEvent","text":"<p><code>TileEntityBreakBlockEvent</code> \u200b\u4e8b\u4ef6\u200b\u4f1a\u200b\u5728\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7834\u574f\u200b\u65b9\u5757\u200b\u65f6\u200b\u88ab\u200b\u8c03\u7528\u200b. \u200b\u8be5\u200b\u4e8b\u4ef6\u200b\u53ef\u200b\u7528\u4e8e\u200b\u63a7\u5236\u200b\u88ab\u200b\u7834\u574f\u200b\u65b9\u5757\u200b\u7684\u200b\u6389\u843d\u200b\u7269\u200b.</p> <p>\u200b\u6ce8\u610f\u200b</p> <p>\u200b\u6b64\u200b\u4e8b\u4ef6\u200b\u4e0d\u53ef\u200b\u88ab\u200b\u53d6\u6d88\u200b. \u200b\u8be6\u89c1\u200b\u4fdd\u62a4\u200b\u7ae0\u8282\u200b.</p>"},{"location":"zh/api/events/tileentitybreakblockevent/#_1","title":"\u5c5e\u6027","text":""},{"location":"zh/api/events/tileentitybreakblockevent/#_2","title":"\u65b9\u5757\u200b\u5b9e\u4f53","text":"<p>\u200b\u7834\u574f\u200b\u65b9\u5757\u200b\u7684\u200b <code>TileEntity</code>.</p>"},{"location":"zh/api/events/tileentitybreakblockevent/#_3","title":"\u65b9\u5757","text":"<p>\u200b\u88ab\u200b\u7834\u574f\u200b\u7684\u200b <code>Block</code>.</p>"},{"location":"zh/api/events/tileentitybreakblockevent/#_4","title":"\u6389\u843d\u200b\u7269","text":"<p>\u200b\u653e\u8fdb\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u80cc\u5305\u200b\u4e2d\u200b\u7684\u200b\u4e00\u4e2a\u200b <code>MutableList</code> of <code>ItemStacks</code> (\u200b\u5982\u679c\u200b\u80cc\u5305\u200b\u6ee1\u200b\u4e86\u200b\u5219\u200b\u5728\u200b\u5730\u9762\u200b\u751f\u6210\u200b\u6389\u843d\u200b\u7269\u200b). \u200b\u901a\u8fc7\u200b\u7f16\u8f91\u200b\u6b64\u200b\u5217\u8868\u200b\u6765\u200b\u4fee\u6539\u200b\u6389\u843d\u200b\u7269\u200b.</p>"},{"location":"zh/api/events/tileentitybreakblockevent/#_5","title":"\u793a\u4f8b","text":""},{"location":"zh/api/events/tileentitybreakblockevent/#_6","title":"\u6ce5\u571f\u200b\u6389\u843d\u200b\u71e7\u77f3","text":"<p>\u200b\u7528\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7834\u574f\u200b\u6ce5\u571f\u200b\u65b9\u5757\u200b\u65f6\u6709\u200b 25% \u200b\u7684\u200b\u6982\u7387\u200b\u6389\u843d\u200b\u4e00\u4e2a\u200b\u71e7\u77f3\u200b.</p> KotlinJava <pre><code>@EventHandler\nfun handleBlockBreak(event: TileEntityBreakBlockEvent) {\n    if (event.block.type == Material.DIRT\n        &amp;&amp; Random.nextInt(0, 100) &lt;= 25  // 25% \u200b\u7684\u200b\u6982\u7387\u200b\n    ) {\n        event.drops.add(ItemStack(Material.FLINT, 1)) // \u200b\u5728\u200b\u6389\u843d\u200b\u7269\u4e2d\u200b\u6dfb\u52a0\u200b\u71e7\u77f3\u200b\n    }\n}\n</code></pre> <pre><code>@EventHandler\npublic void handleBlockBreak(TileEntityBreakBlockEvent event) {\n    if (event.getBlock().getType() == Material.DIRT\n        &amp;&amp; random.nextInt(100) &lt;= 25 // 25% \u200b\u7684\u200b\u6982\u7387\u200b\n    ) {\n        List&lt;ItemStack&gt; drops = event.getDrops();\n        drops.add(new ItemStack(Material.FLINT, 1)); // \u200b\u5728\u200b\u6389\u843d\u200b\u7269\u4e2d\u200b\u6dfb\u52a0\u200b\u71e7\u77f3\u200b\n        event.setDrops(drops);\n    }\n}\n</code></pre>"},{"location":"zh/api/items/","title":"\u7269\u54c1\u200b\u76f8\u5173","text":"<p><code>NovaItem</code> \u200b\u4ee3\u8868\u200b\u7269\u54c1\u200b\u7c7b\u578b\u200b. \u200b\u5b83\u200b\u4e0e\u200b Bukkit \u200b\u4e2d\u200b\u7684\u200b <code>Material</code> \u200b\u76f8\u4f3c\u200b, \u200b\u4f46\u662f\u200b\u53ea\u200b\u53ef\u200b\u7528\u4e8e\u200b\u7269\u54c1\u200b.</p>"},{"location":"zh/api/items/#novaitem","title":"\u901a\u8fc7\u200b\u540d\u79f0\u200b\u83b7\u53d6\u200b <code>NovaItem</code>","text":"<p>\u200b\u8981\u200b\u83b7\u5f97\u200b <code>NovaItem</code> \u200b\u9996\u5148\u200b\u9700\u8981\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u4e4b\u524d\u200b\u83b7\u53d6\u200b\u7684\u200b Nova \u200b\u5b9e\u4f8b\u200b \u200b\u6765\u200b\u83b7\u5f97\u200b <code>NovaItemRegistry</code>.</p> KotlinJava <pre><code>val itemRegistry = Nova.itemRegistry\n</code></pre> <pre><code>NovaItemRegistry itemRegistry = nova.getItemRegistry(); // (1)!\n</code></pre> <ol> <li>\"nova\" \u200b\u662f\u200b\u4e4b\u524d\u200b\u83b7\u53d6\u200b\u7684\u200b Nova \u200b\u5b9e\u4f8b\u200b, \u200b\u901a\u5e38\u200b\u5b58\u50a8\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5b57\u6bb5\u200b\u6216\u200b\u53d8\u91cf\u200b\u4e2d\u200b.\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>Nova.getNova().getItemRegistry()</code> \u200b\u6765\u200b\u8c03\u7528\u200b</li> </ol> <p>\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u8fd9\u4e2a\u200b\u6ce8\u518c\u8868\u200b, \u200b\u53ef\u4ee5\u200b\u83b7\u5f97\u200b ID \u200b\u5bf9\u5e94\u200b\u7684\u200b <code>NovaItem</code>. \u200b\u683c\u5f0f\u200b\u5982\u4e0b\u200b: <code>namespace:name</code>.</p> KotlinJava <pre><code>val item = itemRegistry.get(\"nova:wrench\") // (1)!\n</code></pre> <ol> <li>\u200b\u5982\u679c\u200b\u8be5\u200b\u7269\u54c1\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5c06\u4f1a\u200b\u629b\u51fa\u200b\u62a5\u9519\u200b. \u200b\u5f53\u7136\u200b, \u200b\u6b64\u200b\u793a\u4f8b\u200b\u4e2d\u200b\u7684\u200b\u6273\u624b\u200b\u80af\u5b9a\u200b\u662f\u200b\u5b58\u5728\u200b\u7684\u200b.\u200b\u5982\u679c\u200b\u4f60\u200b\u4e0d\u200b\u786e\u5b9a\u200b\u6216\u8005\u200b\u5728\u200b\u4f7f\u7528\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\uff0c\u200b\u5219\u200b\u5e94\u8be5\u200b\u4f7f\u7528\u200b <code>getOrNull</code>.</li> </ol> <pre><code>NovaItem item = itemRegistry.get(\"nova:wrench\"); // (1)!\n</code></pre> <ol> <li>\u200b\u5982\u679c\u200b\u8be5\u200b\u7269\u54c1\u200b\u4e0d\u200b\u5b58\u5728\u200b\uff0c\u200b\u5c06\u4f1a\u200b\u629b\u51fa\u200b\u62a5\u9519\u200b. \u200b\u5f53\u7136\u200b, \u200b\u6b64\u200b\u793a\u4f8b\u200b\u4e2d\u200b\u7684\u200b\u6273\u624b\u200b\u80af\u5b9a\u200b\u662f\u200b\u5b58\u5728\u200b\u7684\u200b.\u200b\u5982\u679c\u200b\u4f60\u200b\u4e0d\u200b\u786e\u5b9a\u200b\u6216\u8005\u200b\u5728\u200b\u4f7f\u7528\u200b\u7528\u6237\u200b\u8f93\u5165\u200b\uff0c\u200b\u5219\u200b\u5e94\u8be5\u200b\u4f7f\u7528\u200b <code>getOrNull</code>.</li> </ol> <p>\u200b\u63d0\u793a\u200b</p> <p>\u200b\u8be5\u200b\u65b9\u6cd5\u200b\u540c\u6837\u200b\u9002\u7528\u200b\u4e8e\u200b\u4ece\u200b <code>ItemStack</code> \u200b\u4e2d\u200b\u83b7\u53d6\u200b <code>NovaItem</code>.</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u8981\u200b\u4f7f\u7528\u200b\u540d\u79f0\u200b\u6765\u200b\u68c0\u7d22\u200b\u6240\u6709\u200b\u7269\u54c1\u200b\u800c\u200b\u5ffd\u7565\u200b\u547d\u540d\u200b\u7a7a\u95f4\u200b, \u200b\u53ef\u4ee5\u200b\u8fd9\u6837\u200b\u505a\u200b:</p> KotlinJava <pre><code>val items = itemRegistry.getNonNamespaced(\"wrench\")\n</code></pre> <pre><code>List&lt;NovaItem&gt; items = itemRegistry.getNonNamespaced(\"wrench\");\n</code></pre>"},{"location":"zh/api/items/#id","title":"\u83b7\u53d6\u200b\u7269\u54c1\u200b ID","text":"<p><code>nova:wrench</code> \u200b\u7684\u200b\u4f8b\u5b50\u200b:</p> KotlinJava <pre><code>val id = item.id\n\nval namespace = id.namespace // \"nova\"\nval name = id.name // \"wrench\"\nval idString = id.toString() // \"nova:wrench\"\n</code></pre> <pre><code>NamespacedId id = item.getId();\n\nString namespace = id.getNamespace(); // \"nova\"\nString name = id.getName(); // \"wrench\"\nString idString = id.toString(); // \"nova:wrench\"\n</code></pre>"},{"location":"zh/api/items/#_1","title":"\u83b7\u53d6\u200b\u7269\u54c1\u200b\u7684\u200b\u672c\u571f\u5316\u200b\u540d\u79f0","text":"<p>Nova \u200b\u4f7f\u7528\u200b\u8d44\u6e90\u200b\u5305\u6765\u200b\u4e3a\u200b\u5ba2\u6237\u7aef\u200b\u63d0\u4f9b\u200b\u7ffb\u8bd1\u200b. \u200b\u5982\u679c\u200b\u4f60\u200b\u9700\u8981\u200b\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u7269\u54c1\u200b\u7684\u200b\u672c\u571f\u5316\u200b\u540d\u79f0\u200b, \u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>NovaItem.getLocalizedName(locale)</code>. \u200b\u5c06\u200b locale \u200b\u66ff\u6362\u200b\u4e3a\u200b\u4f60\u200b\u60f3\u8981\u200b\u83b7\u53d6\u200b\u7684\u200b\u672c\u571f\u5316\u200b\u540d\u79f0\u200b\u7684\u200b\u8bed\u8a00\u200b\u4ee3\u7801\u200b. \u200b\u8bed\u8a00\u200b\u4ee3\u7801\u200b\u53ef\u200b\u5728\u200b\u8fd9\u91cc\u200b\u67e5\u627e\u200b\uff1a\u200b\u8bed\u8a00\u200b.</p> <p>\u200b\u63d0\u793a\u200b</p> <p>\u200b\u5982\u679c\u200b\u7ed9\u5b9a\u200b\u7684\u200b\u8bed\u8a00\u200b\u4ee3\u7801\u200b\u4e0d\u200b\u5b58\u5728\u200b\u6216\u200b\u65e0\u6548\u200b, \u200b\u5c06\u4f1a\u200b\u8fd4\u56de\u200b\u7269\u54c1\u200b\u7684\u200b\u82f1\u8bed\u200b\u540d\u79f0\u200b.</p> <p><code>nova:wrench</code> \u200b\u7684\u200b\u793a\u4f8b\u200b:</p> KotlinJava <pre><code>val name = item.getLocalizedName(\"de_de\") // \"Schraubenschl\u00fcssel\"\n</code></pre> <pre><code>String name = item.getLocalizedName(\"de_de\"); // \"Schraubenschl\u00fcssel\"\n</code></pre>"},{"location":"zh/api/player/wailamanager/","title":"Waila \u200b\u7ba1\u7406\u5668","text":"<p>Waila \u200b\u7ba1\u7406\u5668\u200b\u7528\u4e8e\u200b\u63a7\u5236\u200b\u73a9\u5bb6\u200b\u9ad8\u4eae\u200b\u4fe1\u606f\u200b\u663e\u793a\u200b\u7684\u200b\u5f00\u200b/\u200b\u5173\u200b.</p> KotlinJava <pre><code>// \u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u72b6\u6001\u200b\nval enabled = wailaManager.getState(player)\n\n// \u200b\u542f\u7528\u200b\u9ad8\u4eae\u200b\u4fe1\u606f\u200b\u663e\u793a\u200b\nwailaManager.setState(player, true)\n// \u200b\u5173\u95ed\u200b\u9ad8\u4eae\u200b\u4fe1\u606f\u200b\u663e\u793a\u200b\nwailaManager.setState(player, false)\n</code></pre> <pre><code>// \u200b\u83b7\u53d6\u200b\u5f53\u524d\u200b\u72b6\u6001\u200b\nboolean enabled = wailaManager.getState(player);\n\n// \u200b\u542f\u7528\u200b\u9ad8\u4eae\u200b\u4fe1\u606f\u200b\u663e\u793a\u200b\nwailaManager.setState(player, true);\n// \u200b\u5173\u95ed\u200b\u9ad8\u4eae\u200b\u4fe1\u606f\u200b\u663e\u793a\u200b\nwailaManager.setState(player, false);\n</code></pre>"},{"location":"zh/api/protection/protectionintegration/","title":"\u4fdd\u62a4","text":"<p>\u200b\u5982\u679c\u200b\u60f3\u8981\u200b\u8ba9\u200b\u4e00\u4e2a\u200b\u63d2\u4ef6\u200b\u63d0\u4f9b\u200b\u81ea\u5b9a\u4e49\u200b\u4fdd\u62a4\u200b\u529f\u80fd\u200b, \u200b\u5219\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u5b9e\u73b0\u200b  <code>ProtectionIntegration</code> \u200b\u63a5\u53e3\u200b\u6765\u200b\u5b8c\u6210\u200b. \u200b\u6b64\u200b\u63a5\u53e3\u200b\u63d0\u4f9b\u200b\u4e86\u200b\u51e0\u4e2a\u200b\u88ab\u200b <code>ProtectionManager</code> \u200b\u8c03\u7528\u200b\u7684\u200b\u65b9\u6cd5\u200b.</p> <p>\u200b\u5982\u679c\u200b\u4f60\u200b\u9700\u8981\u200b\u4e00\u4e9b\u200b\u4f7f\u7528\u200b\u6b64\u200b\u63a5\u53e3\u200b\u7684\u200b\u793a\u4f8b\u200b, \u200b\u53ef\u4ee5\u200b\u770b\u200b\u4e00\u4e0b\u200b\u6211\u4eec\u200b\u7684\u200b \u200b\u5185\u7f6e\u200b\u4fdd\u62a4\u200b\u652f\u6301\u200b.</p> <p>\u200b\u4e00\u65e6\u200b\u5b9e\u73b0\u200b\u4e86\u200b\u8be5\u200b\u63a5\u53e3\u200b, \u200b\u5219\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b <code>Nova.registerProtectionIntegration(ProtectionIntegration)</code> \u200b\u6765\u200b\u6ce8\u518c\u200b\u5b83\u200b.</p>"},{"location":"zh/api/tileentity/tileentity/","title":"\u65b9\u5757\u200b\u5b9e\u4f53","text":"<p>\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u662f\u200b\u4e00\u79cd\u200b\u62e5\u6709\u200b\u5185\u90e8\u200b\u903b\u8f91\u200b\u5e76\u200b\u6839\u636e\u200b\u6e38\u620f\u200b\u523b\u200b\u66f4\u65b0\u200b\u7684\u200b\u4e00\u79cd\u200b\u65b9\u5757\u200b.</p>"},{"location":"zh/api/tileentity/tileentity/#_2","title":"\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7684\u200b\u6240\u6709\u8005","text":"KotlinJava <pre><code>val tileEntity = tileEntityManager.getTileEntityAt(location) ?: return\nval owner = tileEntity.owner\n</code></pre> <pre><code>TileEntity tileEntity = tileEntityManager.getTileEntityAt(location);\nif (tileEntity == null)\n    return;\nOfflinePlayer owner = tileEntity.getOwner();\n</code></pre>"},{"location":"zh/api/tileentity/tileentity/#_3","title":"\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7684\u200b\u672c\u5730\u5316\u200b\u540d\u79f0","text":"<p>\u200b\u901a\u8fc7\u200b\u4f7f\u7528\u200b\u4e00\u4e2a\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7684\u200b <code>Nova \u200b\u65b9\u5757\u200b</code>\u200b\u6765\u200b\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7684\u200b\u540d\u79f0\u200b.</p> <p>\u200b\u5728\u200b\u4e0b\u65b9\u200b\u7684\u200b\u793a\u4f8b\u200b\u4e2d\u200b, \u200b\u5c06\u200b\u6f14\u793a\u200b\u5982\u4f55\u200b\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u7c89\u788e\u673a\u200b\u7684\u200b\u82f1\u6587\u540d\u200b.</p> KotlinJava <pre><code>val tileEntity = tileEntityManager.getTileEntityAt(location) ?: return\nval name = tileEntity.block.getLocalizedName(\"en_us\")\nprintln(name) // \u200b\u8f93\u51fa\u200b \"Pulverizer\"\n</code></pre> <pre><code>TileEntity tileEntity = tileEntityManager.getTileEntityAt(location);\nif(tileEntity == null)\n    return;\nString name = tileEntity.getMaterial().getLocalizedName(\"en_us\");\nSystem.out.println(name); // \u200b\u8f93\u51fa\u200b \"Pulverizer\"\n</code></pre>"},{"location":"zh/api/tileentity/tileentity/#_4","title":"\u83b7\u53d6\u200b\u4e00\u4e2a\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7684\u200b\u6389\u843d\u200b\u7269","text":"<p>\u200b\u8fd9\u91cc\u200b\u7684\u200b\u6389\u843d\u200b\u7269\u200b\u5305\u62ec\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u5185\u200b\u88c5\u6709\u200b\u7684\u200b\u7269\u54c1\u200b\u548c\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u672c\u8eab\u200b\uff08\u200b\u5982\u679c\u200b <code>includeSelf</code> \u200b\u8bbe\u200b\u4e3a\u4e86\u200b <code>true</code> \u200b\u7684\u8bdd\u200b\uff09\u3002</p> KotlinJava <pre><code>val tileEntity = tileEntityManager.getTileEntityAt(location) ?: return\nval drops = tileEntity.getDrops(includeSelf = true)\n</code></pre> <pre><code>TileEntity tileEntity = tileEntityManager.getTileEntityAt(location);\nif (tileEntity == null)\n    return;\nList&lt;ItemStack&gt; drops = tileEntity.getDrops(true);\n</code></pre> <p>\u200b\u66f4\u200b\u591a\u200b\u5173\u4e8e\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7ba1\u7406\u5668\u200b\u7684\u200b\u8bf4\u660e\u200b\u8bf7\u200b\u89c1\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7ba1\u7406\u5668\u200b\u9875\u9762\u200b.</p>"},{"location":"zh/api/tileentity/tileentitymanager/","title":"\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u7ba1\u7406\u5668","text":"<p>\u200b\u4f60\u200b\u53ef\u4ee5\u200b\u4f7f\u7528\u200b\u4e4b\u524d\u200b\u83b7\u53d6\u200b\u7684\u200b Nova \u200b\u5b9e\u4f8b\u200b\u6765\u200b\u83b7\u53d6\u200b <code>TileEntityManager</code>.</p> KotlinJava <pre><code>val tileEntityManager = Nova.tileEntityManager\n</code></pre> <pre><code>TileEntityManager tileEntityManager = nova.getTileEntityManager(); // (1)!\n</code></pre> <ol> <li>\"nova\" \u200b\u662f\u200b\u4e4b\u524d\u200b\u83b7\u53d6\u200b\u7684\u200b Nova \u200b\u5b9e\u4f8b\u200b, \u200b\u9ed8\u8ba4\u200b\u5b58\u50a8\u200b\u5728\u200b\u4e00\u4e2a\u200b\u5b57\u6bb5\u200b\u6216\u200b\u53d8\u91cf\u200b\u4e2d\u200b.\u200b\u4f60\u200b\u4e5f\u200b\u53ef\u4ee5\u200b\u8c03\u7528\u200b <code>Nova.getNova().getTileEntityManager()</code></li> </ol>"},{"location":"zh/api/tileentity/tileentitymanager/#_2","title":"\u83b7\u53d6\u200b\u6307\u5b9a\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u65b9\u5757\u200b\u5b9e\u4f53","text":"<p>\u200b\u8981\u200b\u83b7\u53d6\u200b\u6307\u5b9a\u200b\u4f4d\u7f6e\u200b\u7684\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\uff0c\u200b\u53ef\u4ee5\u200b\u901a\u8fc7\u200b\u8c03\u7528\u200b <code>TileEntityManager</code> \u200b\u4e2d\u200b\u7684\u200b <code>getTileEntityAt</code> \u200b\u51fd\u6570\u200b. \u200b\u4e00\u822c\u200b\u60c5\u51b5\u200b\u4e0b\u8be5\u200b\u51fd\u6570\u200b\u5c06\u200b\u8fd4\u56de\u200b\u4e00\u4e2a\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\uff0c\u200b\u4f46\u662f\u200b\u5982\u679c\u200b\u8be5\u200b\u4f4d\u7f6e\u200b\u6ca1\u6709\u200b\u65b9\u5757\u200b\u5b9e\u4f53\u200b\u5c06\u4f1a\u200b\u8fd4\u56de\u200b <code>null</code>.</p> KotlinJava <pre><code>val tileEntity: TileEntity? = tileEntityManager.getTileEntityAt(location)\n</code></pre> <pre><code>TileEntity tileEntity = tileEntityManager.getTileEntityAt(location);\n</code></pre>"}]}